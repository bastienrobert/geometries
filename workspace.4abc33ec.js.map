{"version":3,"sources":["../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/mat2.js","../node_modules/gl-matrix/esm/mat2d.js","../node_modules/gl-matrix/esm/mat3.js","../node_modules/gl-matrix/esm/mat4.js","../node_modules/gl-matrix/esm/vec3.js","../node_modules/gl-matrix/esm/vec4.js","../node_modules/gl-matrix/esm/quat.js","../node_modules/gl-matrix/esm/quat2.js","../node_modules/gl-matrix/esm/vec2.js","../node_modules/gl-matrix/esm/index.js","../dist/index.js","shader.vert","shader.frag","index.js"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","create","out","glMatrix","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","s","sin","c","cos","scale","v","v0","v1","fromRotation","fromScaling","str","frob","sqrt","pow","LDU","L","D","U","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","mul","sub","d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromTranslation","fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","x","y","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","a6","a7","a8","b6","b7","b8","m03","m13","m23","m30","m31","m32","m33","axis","t","len","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","a9","a14","a15","b9","b13","b14","b15","length","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","r","zScale","transformMat4","m","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","angle","tempA","tempB","cosine","acos","zero","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","i","l","u","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","out_axis","calculateW","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","invDot","conjugate","fromMat3","fTrace","fRoot","j","k","fromEuler","halfToRad","cx","cy","cz","vec4","rotationTo","tmpvec3","vec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","mat3","view","dq","w1","fromRotationTranslationValues","outer","quat","mat4","getReal","getDual","setReal","setDual","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","a_dot_b","transformMat2","transformMat2d","p0","p1","sinC","cosC","len1","len2","Object","defineProperty","exports","value","extendStatics","setPrototypeOf","__proto__","hasOwnProperty","__extends","__","constructor","prototype","Geometry","vertices","textures","normals","indices","Plane","_super","_a","_b","_c","_d","_e","widthSegments","_f","heightSegments","_this","call","generate","compute","udir","vdir","depth","gridX","gridY","segmentWidth","segmentHeight","push","BoxGeometry","_g","_h","depthSegments","faces","front","back","keys","key","face","computedIndices","map","indice","concat","SphereGeometry","radius","theta","sinTheta","cosTheta","phi","sinPhi","first","second","Box","Sphere","module","App","e","touches","mouse","vec2","clientX","clientY","previousAngle","canvas","xRotation","identityMatrix","zRotation","worldMatrix","gl","uniformMatrix4fv","worldUniformLocation","FALSE","raf","window","requestAnimationFrame","render","clearColor","clear","COLOR_BUFFER_BIT","drawElements","TRIANGLES","box","UNSIGNED_SHORT","document","getElementById","getContext","init","console","log","unlisten","cancelAnimationFrame","body","removeChild","listen","viewport","enable","DEPTH_TEST","shaders","createShaders","program","createProgram","useProgram","createBox","createUniforms","addEventListener","onMouseDown","onMouseMove","onMouseUp","removeEventListener","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderSource","vertexSource","fragmentSource","compileShader","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","attachShader","linkProgram","getProgramParameter","LINK_STATUS","validateProgram","VALIDATE_STATUS","getProgramInfoLog","indicesBuffer","createBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","Uint16Array","STATIC_DRAW","vertexBuffer","ARRAY_BUFFER","positionLocation","getAttribLocation","vertexAttribPointer","FLOAT","BYTES_PER_ELEMENT","enableVertexAttribArray","normalsBuffer","normalLocation","getUniformLocation","viewUniformLocation","projectionUniformLocation","viewMatrix","projectionMatrix"],"mappings":";AAuCC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,mBAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,OAAA,QAAA,WAAA,QAAA,aAAA,EAlCM,IAAIA,EAAU,KAkCpB,QAAA,QAAA,EAjCM,IAAIC,EAAqC,oBAAjBC,aAA+BA,aAAeC,MAiC5E,QAAA,WAAA,EAhCM,IAAIC,EAASC,KAAKC,OAOlB,SAASC,EAAmBC,GACjCP,QAAAA,WAAAA,EAAaO,EAwBd,QAAA,OAAA,EAtBD,IAAIC,EAASJ,KAAKK,GAAK,IAOhB,SAASC,EAASC,GAChBA,OAAAA,EAAIH,EAYN,SAASI,EAAOD,EAAGE,GACjBT,OAAAA,KAAKU,IAAIH,EAAIE,IAAMd,EAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIH,GAAIP,KAAKU,IAAID;;ACyYnE,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,SAAA,EAAA,QAAA,WAAA,EAAA,QAAA,IAAA,EAAA,QAAA,UAAA,EAAA,QAAA,OAAA,EAAA,QAAA,QAAA,EAAA,QAAA,YAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,aAAA,EAAA,QAAA,YAAA,EAAA,QAAA,IAAA,EAAA,QAAA,KAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,YAAA,EAAA,QAAA,OAAA,EAAA,QAAA,eAAA,EAAA,QAAA,qBAAA,EAAA,QAAA,IAAA,QAAA,SAAA,EA/aP,IAAA,EAAA,EAAA,QAAA,gBA+aO,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,OAAA,yBAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,IAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,EAnaA,SAASG,IACVC,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAS3BiB,OAPHC,EAASlB,YAAcC,eACzBgB,EAAI,GAAK,EACTA,EAAI,GAAK,GAGXA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EASF,SAASE,EAAMR,GAChBM,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAK3BiB,OAJPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACJM,EAUF,SAASG,EAAKH,EAAKN,GAKjBM,OAJPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACJM,EASF,SAASI,EAASJ,GAKhBA,OAJPA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAYF,SAASK,EAAWC,EAAKC,EAAKC,EAAKC,GACpCT,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAK3BiB,OAJPA,EAAI,GAAKM,EACTN,EAAI,GAAKO,EACTP,EAAI,GAAKQ,EACTR,EAAI,GAAKS,EACFT,EAaF,SAASU,EAAIV,EAAKM,EAAKC,EAAKC,EAAKC,GAK/BT,OAJPA,EAAI,GAAKM,EACTN,EAAI,GAAKO,EACTP,EAAI,GAAKQ,EACTR,EAAI,GAAKS,EACFT,EAUF,SAASW,EAAUX,EAAKN,GAGzBM,GAAAA,IAAQN,EAAG,CACTkB,IAAAA,EAAKlB,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKY,OAETZ,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GAGNM,OAAAA,EAUF,SAASa,EAAOb,EAAKN,GACtBoB,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACPqB,EAAKrB,EAAE,GACPsB,EAAKtB,EAAE,GAEPuB,EAAMH,EAAKE,EAAKD,EAAKH,EAErB,OAACK,GAILA,EAAM,EAAMA,EACZjB,EAAI,GAAKgB,EAAKC,EACdjB,EAAI,IAAMY,EAAKK,EACfjB,EAAI,IAAMe,EAAKE,EACfjB,EAAI,GAAKc,EAAKG,EACPjB,GARE,KAkBJ,SAASkB,EAAQlB,EAAKN,GAEvBoB,IAAAA,EAAKpB,EAAE,GAKJM,OAJPA,EAAI,GAAKN,EAAE,GACXM,EAAI,IAAMN,EAAE,GACZM,EAAI,IAAMN,EAAE,GACZM,EAAI,GAAKc,EACFd,EASF,SAASmB,EAAYzB,GACnBA,OAAAA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAWzB,SAAS0B,EAASpB,EAAKN,EAAGE,GAC3BkB,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACPqB,EAAKrB,EAAE,GACPsB,EAAKtB,EAAE,GACP2B,EAAKzB,EAAE,GACP0B,EAAK1B,EAAE,GACP2B,EAAK3B,EAAE,GACP4B,EAAK5B,EAAE,GAKJI,OAJPA,EAAI,GAAKc,EAAKO,EAAKN,EAAKO,EACxBtB,EAAI,GAAKY,EAAKS,EAAKL,EAAKM,EACxBtB,EAAI,GAAKc,EAAKS,EAAKR,EAAKS,EACxBxB,EAAI,GAAKY,EAAKW,EAAKP,EAAKQ,EACjBxB,EAWF,SAASyB,EAAOzB,EAAKN,EAAGgC,GACzBZ,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACPqB,EAAKrB,EAAE,GACPsB,EAAKtB,EAAE,GACPiC,EAAIxC,KAAKyC,IAAIF,GACbG,EAAI1C,KAAK2C,IAAIJ,GAKV1B,OAJPA,EAAI,GAAKc,EAAKe,EAAId,EAAKY,EACvB3B,EAAI,GAAKY,EAAKiB,EAAIb,EAAKW,EACvB3B,EAAI,GAAKc,GAAMa,EAAIZ,EAAKc,EACxB7B,EAAI,GAAKY,GAAMe,EAAIX,EAAKa,EACjB7B,EAWF,SAAS+B,EAAM/B,EAAKN,EAAGsC,GACxBlB,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACPqB,EAAKrB,EAAE,GACPsB,EAAKtB,EAAE,GACPuC,EAAKD,EAAE,GACPE,EAAKF,EAAE,GAKJhC,OAJPA,EAAI,GAAKc,EAAKmB,EACdjC,EAAI,GAAKY,EAAKqB,EACdjC,EAAI,GAAKe,EAAKmB,EACdlC,EAAI,GAAKgB,EAAKkB,EACPlC,EAcF,SAASmC,EAAanC,EAAK0B,GAC5BC,IAAAA,EAAIxC,KAAKyC,IAAIF,GACbG,EAAI1C,KAAK2C,IAAIJ,GAKV1B,OAJPA,EAAI,GAAK6B,EACT7B,EAAI,GAAK2B,EACT3B,EAAI,IAAM2B,EACV3B,EAAI,GAAK6B,EACF7B,EAcF,SAASoC,EAAYpC,EAAKgC,GAKxBhC,OAJPA,EAAI,GAAKgC,EAAE,GACXhC,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAKgC,EAAE,GACJhC,EASF,SAASqC,EAAI3C,GACX,MAAA,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAS7D,SAAS4C,EAAK5C,GACZP,OAAAA,KAAKoD,KAAKpD,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,IAUvF,SAAS+C,EAAIC,EAAGC,EAAGC,EAAGlD,GAKpB,OAJPgD,EAAE,GAAKhD,EAAE,GAAKA,EAAE,GAChBkD,EAAE,GAAKlD,EAAE,GACTkD,EAAE,GAAKlD,EAAE,GACTkD,EAAE,GAAKlD,EAAE,GAAKgD,EAAE,GAAKE,EAAE,GAChB,CAACF,EAAGC,EAAGC,GAWT,SAASC,EAAI7C,EAAKN,EAAGE,GAKnBI,OAJPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAWF,SAAS8C,EAAS9C,EAAKN,EAAGE,GAKxBI,OAJPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAUF,SAAS+C,EAAYrD,EAAGE,GACtBF,OAAAA,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,GAUhE,SAASD,EAAOD,EAAGE,GACpBkB,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACPqB,EAAKrB,EAAE,GACPsB,EAAKtB,EAAE,GACP2B,EAAKzB,EAAE,GACP0B,EAAK1B,EAAE,GACP2B,EAAK3B,EAAE,GACP4B,EAAK5B,EAAE,GACJT,OAAAA,KAAKU,IAAIiB,EAAKO,IAAOpB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIiB,GAAK3B,KAAKU,IAAIwB,KAAQlC,KAAKU,IAAIe,EAAKU,IAAOrB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIe,GAAKzB,KAAKU,IAAIyB,KAAQnC,KAAKU,IAAIkB,EAAKQ,IAAOtB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIkB,GAAK5B,KAAKU,IAAI0B,KAAQpC,KAAKU,IAAImB,EAAKQ,IAAOvB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImB,GAAK7B,KAAKU,IAAI2B,IAW9U,SAASwB,EAAehD,EAAKN,EAAGE,GAK9BI,OAJPA,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EACTI,EAYF,SAASiD,EAAqBjD,EAAKN,EAAGE,EAAGmC,GAKvC/B,OAJPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EAChB/B,EAOF,IAAIkD,EAAM9B,EAMV,QAAA,IAAA,EAAA,IAAI+B,EAAML,EAAV,QAAA,IAAA;;ACsDA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,SAAA,EAAA,QAAA,WAAA,EAAA,QAAA,IAAA,EAAA,QAAA,OAAA,EAAA,QAAA,YAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,UAAA,EAAA,QAAA,aAAA,EAAA,QAAA,YAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,IAAA,EAAA,QAAA,KAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,eAAA,EAAA,QAAA,qBAAA,EAAA,QAAA,YAAA,EAAA,QAAA,OAAA,EAAA,QAAA,IAAA,QAAA,SAAA,EAreP,IAAA,EAAA,EAAA,QAAA,gBAqeO,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,OAAA,yBAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,IAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,EA3cA,SAAS/C,IACVC,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAW3BiB,OATHC,EAASlB,YAAcC,eACzBgB,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGXA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EASF,SAASE,EAAMR,GAChBM,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAO3BiB,OANPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACJM,EAUF,SAASG,EAAKH,EAAKN,GAOjBM,OANPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACJM,EASF,SAASI,EAASJ,GAOhBA,OANPA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAcF,SAASK,EAAWX,EAAGE,EAAGiC,EAAGuB,EAAGC,EAAIC,GACrCtD,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAO3BiB,OANPA,EAAI,GAAKN,EACTM,EAAI,GAAKJ,EACTI,EAAI,GAAK6B,EACT7B,EAAI,GAAKoD,EACTpD,EAAI,GAAKqD,EACTrD,EAAI,GAAKsD,EACFtD,EAeF,SAASU,EAAIV,EAAKN,EAAGE,EAAGiC,EAAGuB,EAAGC,EAAIC,GAOhCtD,OANPA,EAAI,GAAKN,EACTM,EAAI,GAAKJ,EACTI,EAAI,GAAK6B,EACT7B,EAAI,GAAKoD,EACTpD,EAAI,GAAKqD,EACTrD,EAAI,GAAKsD,EACFtD,EAUF,SAASa,EAAOb,EAAKN,GACtB6D,IAAAA,EAAK7D,EAAE,GACP8D,EAAK9D,EAAE,GACP+D,EAAK/D,EAAE,GACPgE,EAAKhE,EAAE,GACPiE,EAAMjE,EAAE,GACRkE,EAAMlE,EAAE,GACRuB,EAAMsC,EAAKG,EAAKF,EAAKC,EAErB,OAACxC,GAILA,EAAM,EAAMA,EACZjB,EAAI,GAAK0D,EAAKzC,EACdjB,EAAI,IAAMwD,EAAKvC,EACfjB,EAAI,IAAMyD,EAAKxC,EACfjB,EAAI,GAAKuD,EAAKtC,EACdjB,EAAI,IAAMyD,EAAKG,EAAMF,EAAKC,GAAO1C,EACjCjB,EAAI,IAAMwD,EAAKG,EAAMJ,EAAKK,GAAO3C,EAC1BjB,GAVE,KAmBJ,SAASmB,EAAYzB,GACnBA,OAAAA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAWzB,SAAS0B,EAASpB,EAAKN,EAAGE,GAC3BkB,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACPqB,EAAKrB,EAAE,GACPsB,EAAKtB,EAAE,GACPmE,EAAKnE,EAAE,GACPoE,EAAKpE,EAAE,GACP2B,EAAKzB,EAAE,GACP0B,EAAK1B,EAAE,GACP2B,EAAK3B,EAAE,GACP4B,EAAK5B,EAAE,GACPmE,EAAKnE,EAAE,GACPoE,EAAKpE,EAAE,GAOJI,OANPA,EAAI,GAAKc,EAAKO,EAAKN,EAAKO,EACxBtB,EAAI,GAAKY,EAAKS,EAAKL,EAAKM,EACxBtB,EAAI,GAAKc,EAAKS,EAAKR,EAAKS,EACxBxB,EAAI,GAAKY,EAAKW,EAAKP,EAAKQ,EACxBxB,EAAI,GAAKc,EAAKiD,EAAKhD,EAAKiD,EAAKH,EAC7B7D,EAAI,GAAKY,EAAKmD,EAAK/C,EAAKgD,EAAKF,EACtB9D,EAWF,SAASyB,EAAOzB,EAAKN,EAAGgC,GACzBZ,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACPqB,EAAKrB,EAAE,GACPsB,EAAKtB,EAAE,GACPmE,EAAKnE,EAAE,GACPoE,EAAKpE,EAAE,GACPiC,EAAIxC,KAAKyC,IAAIF,GACbG,EAAI1C,KAAK2C,IAAIJ,GAOV1B,OANPA,EAAI,GAAKc,EAAKe,EAAId,EAAKY,EACvB3B,EAAI,GAAKY,EAAKiB,EAAIb,EAAKW,EACvB3B,EAAI,GAAKc,GAAMa,EAAIZ,EAAKc,EACxB7B,EAAI,GAAKY,GAAMe,EAAIX,EAAKa,EACxB7B,EAAI,GAAK6D,EACT7D,EAAI,GAAK8D,EACF9D,EAWF,SAAS+B,EAAM/B,EAAKN,EAAGsC,GACxBlB,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACPqB,EAAKrB,EAAE,GACPsB,EAAKtB,EAAE,GACPmE,EAAKnE,EAAE,GACPoE,EAAKpE,EAAE,GACPuC,EAAKD,EAAE,GACPE,EAAKF,EAAE,GAOJhC,OANPA,EAAI,GAAKc,EAAKmB,EACdjC,EAAI,GAAKY,EAAKqB,EACdjC,EAAI,GAAKe,EAAKmB,EACdlC,EAAI,GAAKgB,EAAKkB,EACdlC,EAAI,GAAK6D,EACT7D,EAAI,GAAK8D,EACF9D,EAWF,SAASiE,EAAUjE,EAAKN,EAAGsC,GAC5BlB,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACPqB,EAAKrB,EAAE,GACPsB,EAAKtB,EAAE,GACPmE,EAAKnE,EAAE,GACPoE,EAAKpE,EAAE,GACPuC,EAAKD,EAAE,GACPE,EAAKF,EAAE,GAOJhC,OANPA,EAAI,GAAKc,EACTd,EAAI,GAAKY,EACTZ,EAAI,GAAKe,EACTf,EAAI,GAAKgB,EACThB,EAAI,GAAKc,EAAKmB,EAAKlB,EAAKmB,EAAK2B,EAC7B7D,EAAI,GAAKY,EAAKqB,EAAKjB,EAAKkB,EAAK4B,EACtB9D,EAcF,SAASmC,EAAanC,EAAK0B,GAC5BC,IAAAA,EAAIxC,KAAKyC,IAAIF,GACbG,EAAI1C,KAAK2C,IAAIJ,GAOV1B,OANPA,EAAI,GAAK6B,EACT7B,EAAI,GAAK2B,EACT3B,EAAI,IAAM2B,EACV3B,EAAI,GAAK6B,EACT7B,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAcF,SAASoC,EAAYpC,EAAKgC,GAOxBhC,OANPA,EAAI,GAAKgC,EAAE,GACXhC,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAKgC,EAAE,GACXhC,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAcF,SAASkE,EAAgBlE,EAAKgC,GAO5BhC,OANPA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAKgC,EAAE,GACXhC,EAAI,GAAKgC,EAAE,GACJhC,EASF,SAASqC,EAAI3C,GACX,MAAA,SAAWA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAS1F,SAAS4C,EAAK5C,GACZP,OAAAA,KAAKoD,KAAKpD,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAK,GAWpI,SAASmD,EAAI7C,EAAKN,EAAGE,GAOnBI,OANPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAWF,SAAS8C,EAAS9C,EAAKN,EAAGE,GAOxBI,OANPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAWF,SAASgD,EAAehD,EAAKN,EAAGE,GAO9BI,OANPA,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EACTI,EAYF,SAASiD,EAAqBjD,EAAKN,EAAGE,EAAGmC,GAOvC/B,OANPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EAChB/B,EAUF,SAAS+C,EAAYrD,EAAGE,GACtBF,OAAAA,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,GAUlG,SAASD,EAAOD,EAAGE,GACpBkB,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACPqB,EAAKrB,EAAE,GACPsB,EAAKtB,EAAE,GACPmE,EAAKnE,EAAE,GACPoE,EAAKpE,EAAE,GACP2B,EAAKzB,EAAE,GACP0B,EAAK1B,EAAE,GACP2B,EAAK3B,EAAE,GACP4B,EAAK5B,EAAE,GACPmE,EAAKnE,EAAE,GACPoE,EAAKpE,EAAE,GACJT,OAAAA,KAAKU,IAAIiB,EAAKO,IAAOpB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIiB,GAAK3B,KAAKU,IAAIwB,KAAQlC,KAAKU,IAAIe,EAAKU,IAAOrB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIe,GAAKzB,KAAKU,IAAIyB,KAAQnC,KAAKU,IAAIkB,EAAKQ,IAAOtB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIkB,GAAK5B,KAAKU,IAAI0B,KAAQpC,KAAKU,IAAImB,EAAKQ,IAAOvB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImB,GAAK7B,KAAKU,IAAI2B,KAAQrC,KAAKU,IAAIgE,EAAKE,IAAO9D,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIgE,GAAK1E,KAAKU,IAAIkE,KAAQ5E,KAAKU,IAAIiE,EAAKE,IAAO/D,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIiE,GAAK3E,KAAKU,IAAImE,IAOxf,IAAId,EAAM9B,EAMV,QAAA,IAAA,EAAA,IAAI+B,EAAML,EAAV,QAAA,IAAA;;ACqSA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,EAAA,QAAA,SAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,WAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,UAAA,EAAA,QAAA,OAAA,EAAA,QAAA,QAAA,EAAA,QAAA,YAAA,EAAA,QAAA,SAAA,EAAA,QAAA,UAAA,EAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,aAAA,EAAA,QAAA,YAAA,EAAA,QAAA,UAAA,EAAA,QAAA,SAAA,EAAA,QAAA,eAAA,EAAA,QAAA,WAAA,EAAA,QAAA,IAAA,EAAA,QAAA,KAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,eAAA,EAAA,QAAA,qBAAA,EAAA,QAAA,YAAA,EAAA,QAAA,OAAA,EAAA,QAAA,IAAA,QAAA,SAAA,EA1wBP,IAAA,EAAA,EAAA,QAAA,gBA0wBO,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,OAAA,yBAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,IAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,EA9vBA,SAAS/C,IACVC,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAc3BiB,OAZHC,EAASlB,YAAcC,eACzBgB,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGXA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAUF,SAASmE,EAASnE,EAAKN,GAUrBM,OATPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,IACJM,EASF,SAASE,EAAMR,GAChBM,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAU3BiB,OATPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACJM,EAUF,SAASG,EAAKH,EAAKN,GAUjBM,OATPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACJM,EAiBF,SAASK,EAAWC,EAAKC,EAAK6D,EAAK5D,EAAKC,EAAK4D,EAAKC,EAAKC,EAAKC,GAC7DxE,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAU3BiB,OATPA,EAAI,GAAKM,EACTN,EAAI,GAAKO,EACTP,EAAI,GAAKoE,EACTpE,EAAI,GAAKQ,EACTR,EAAI,GAAKS,EACTT,EAAI,GAAKqE,EACTrE,EAAI,GAAKsE,EACTtE,EAAI,GAAKuE,EACTvE,EAAI,GAAKwE,EACFxE,EAkBF,SAASU,EAAIV,EAAKM,EAAKC,EAAK6D,EAAK5D,EAAKC,EAAK4D,EAAKC,EAAKC,EAAKC,GAUxDxE,OATPA,EAAI,GAAKM,EACTN,EAAI,GAAKO,EACTP,EAAI,GAAKoE,EACTpE,EAAI,GAAKQ,EACTR,EAAI,GAAKS,EACTT,EAAI,GAAKqE,EACTrE,EAAI,GAAKsE,EACTtE,EAAI,GAAKuE,EACTvE,EAAI,GAAKwE,EACFxE,EASF,SAASI,EAASJ,GAUhBA,OATPA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAUF,SAASW,EAAUX,EAAKN,GAEzBM,GAAAA,IAAQN,EAAG,CACT+E,IAAAA,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRiF,EAAMjF,EAAE,GACZM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKyE,EACTzE,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAK0E,EACT1E,EAAI,GAAK2E,OAET3E,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GAGNM,OAAAA,EAUF,SAASa,EAAOb,EAAKN,GACtBkF,IAAAA,EAAMlF,EAAE,GACR+E,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRmF,EAAMnF,EAAE,GACRoF,EAAMpF,EAAE,GACRiF,EAAMjF,EAAE,GACRqF,EAAMrF,EAAE,GACRsF,EAAMtF,EAAE,GACRuF,EAAMvF,EAAE,GACRwF,EAAMD,EAAMH,EAAMH,EAAMK,EACxBG,GAAOF,EAAMJ,EAAMF,EAAMI,EACzBK,EAAMJ,EAAMH,EAAMC,EAAMC,EAExB9D,EAAM2D,EAAMM,EAAMT,EAAMU,EAAMT,EAAMU,EAEpC,OAACnE,GAILA,EAAM,EAAMA,EACZjB,EAAI,GAAKkF,EAAMjE,EACfjB,EAAI,KAAOiF,EAAMR,EAAMC,EAAMM,GAAO/D,EACpCjB,EAAI,IAAM2E,EAAMF,EAAMC,EAAMI,GAAO7D,EACnCjB,EAAI,GAAKmF,EAAMlE,EACfjB,EAAI,IAAMiF,EAAML,EAAMF,EAAMK,GAAO9D,EACnCjB,EAAI,KAAO2E,EAAMC,EAAMF,EAAMG,GAAO5D,EACpCjB,EAAI,GAAKoF,EAAMnE,EACfjB,EAAI,KAAOgF,EAAMJ,EAAMH,EAAMM,GAAO9D,EACpCjB,EAAI,IAAM8E,EAAMF,EAAMH,EAAMI,GAAO5D,EAC5BjB,GAbE,KAuBJ,SAASkB,EAAQlB,EAAKN,GACvBkF,IAAAA,EAAMlF,EAAE,GACR+E,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRmF,EAAMnF,EAAE,GACRoF,EAAMpF,EAAE,GACRiF,EAAMjF,EAAE,GACRqF,EAAMrF,EAAE,GACRsF,EAAMtF,EAAE,GACRuF,EAAMvF,EAAE,GAULM,OATPA,EAAI,GAAK8E,EAAMG,EAAMN,EAAMK,EAC3BhF,EAAI,GAAK0E,EAAMM,EAAMP,EAAMQ,EAC3BjF,EAAI,GAAKyE,EAAME,EAAMD,EAAMI,EAC3B9E,EAAI,GAAK2E,EAAMI,EAAMF,EAAMI,EAC3BjF,EAAI,GAAK4E,EAAMK,EAAMP,EAAMK,EAC3B/E,EAAI,GAAK0E,EAAMG,EAAMD,EAAMD,EAC3B3E,EAAI,GAAK6E,EAAMG,EAAMF,EAAMC,EAC3B/E,EAAI,GAAKyE,EAAMM,EAAMH,EAAMI,EAC3BhF,EAAI,GAAK4E,EAAME,EAAML,EAAMI,EACpB7E,EASF,SAASmB,EAAYzB,GACtBkF,IAAAA,EAAMlF,EAAE,GACR+E,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRmF,EAAMnF,EAAE,GACRoF,EAAMpF,EAAE,GACRiF,EAAMjF,EAAE,GACRqF,EAAMrF,EAAE,GACRsF,EAAMtF,EAAE,GACRuF,EAAMvF,EAAE,GACLkF,OAAAA,GAAOK,EAAMH,EAAMH,EAAMK,GAAOP,IAAQQ,EAAMJ,EAAMF,EAAMI,GAAOL,GAAOM,EAAMH,EAAMC,EAAMC,GAW5F,SAAS3D,EAASpB,EAAKN,EAAGE,GAC3BgF,IAAAA,EAAMlF,EAAE,GACR+E,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRmF,EAAMnF,EAAE,GACRoF,EAAMpF,EAAE,GACRiF,EAAMjF,EAAE,GACRqF,EAAMrF,EAAE,GACRsF,EAAMtF,EAAE,GACRuF,EAAMvF,EAAE,GACR2F,EAAMzF,EAAE,GACRsF,EAAMtF,EAAE,GACR0F,EAAM1F,EAAE,GACR2F,EAAM3F,EAAE,GACRuF,EAAMvF,EAAE,GACR4F,EAAM5F,EAAE,GACR6F,EAAM7F,EAAE,GACRwF,EAAMxF,EAAE,GACR8F,EAAM9F,EAAE,GAULI,OATPA,EAAI,GAAKqF,EAAMT,EAAMM,EAAML,EAAMS,EAAMP,EACvC/E,EAAI,GAAKqF,EAAMZ,EAAMS,EAAMJ,EAAMQ,EAAMN,EACvChF,EAAI,GAAKqF,EAAMX,EAAMQ,EAAMP,EAAMW,EAAML,EACvCjF,EAAI,GAAKuF,EAAMX,EAAMO,EAAMN,EAAMW,EAAMT,EACvC/E,EAAI,GAAKuF,EAAMd,EAAMU,EAAML,EAAMU,EAAMR,EACvChF,EAAI,GAAKuF,EAAMb,EAAMS,EAAMR,EAAMa,EAAMP,EACvCjF,EAAI,GAAKyF,EAAMb,EAAMQ,EAAMP,EAAMa,EAAMX,EACvC/E,EAAI,GAAKyF,EAAMhB,EAAMW,EAAMN,EAAMY,EAAMV,EACvChF,EAAI,GAAKyF,EAAMf,EAAMU,EAAMT,EAAMe,EAAMT,EAChCjF,EAWF,SAASiE,EAAUjE,EAAKN,EAAGsC,GAC5B4C,IAAAA,EAAMlF,EAAE,GACR+E,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRmF,EAAMnF,EAAE,GACRoF,EAAMpF,EAAE,GACRiF,EAAMjF,EAAE,GACRqF,EAAMrF,EAAE,GACRsF,EAAMtF,EAAE,GACRuF,EAAMvF,EAAE,GACRiG,EAAI3D,EAAE,GACN4D,EAAI5D,EAAE,GAUHhC,OATPA,EAAI,GAAK4E,EACT5E,EAAI,GAAKyE,EACTzE,EAAI,GAAK0E,EACT1E,EAAI,GAAK6E,EACT7E,EAAI,GAAK8E,EACT9E,EAAI,GAAK2E,EACT3E,EAAI,GAAK2F,EAAIf,EAAMgB,EAAIf,EAAME,EAC7B/E,EAAI,GAAK2F,EAAIlB,EAAMmB,EAAId,EAAME,EAC7BhF,EAAI,GAAK2F,EAAIjB,EAAMkB,EAAIjB,EAAMM,EACtBjF,EAWF,SAASyB,EAAOzB,EAAKN,EAAGgC,GACzBkD,IAAAA,EAAMlF,EAAE,GACR+E,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRmF,EAAMnF,EAAE,GACRoF,EAAMpF,EAAE,GACRiF,EAAMjF,EAAE,GACRqF,EAAMrF,EAAE,GACRsF,EAAMtF,EAAE,GACRuF,EAAMvF,EAAE,GACRiC,EAAIxC,KAAKyC,IAAIF,GACbG,EAAI1C,KAAK2C,IAAIJ,GAUV1B,OATPA,EAAI,GAAK6B,EAAI+C,EAAMjD,EAAIkD,EACvB7E,EAAI,GAAK6B,EAAI4C,EAAM9C,EAAImD,EACvB9E,EAAI,GAAK6B,EAAI6C,EAAM/C,EAAIgD,EACvB3E,EAAI,GAAK6B,EAAIgD,EAAMlD,EAAIiD,EACvB5E,EAAI,GAAK6B,EAAIiD,EAAMnD,EAAI8C,EACvBzE,EAAI,GAAK6B,EAAI8C,EAAMhD,EAAI+C,EACvB1E,EAAI,GAAK+E,EACT/E,EAAI,GAAKgF,EACThF,EAAI,GAAKiF,EACFjF,EAYF,SAAS+B,EAAM/B,EAAKN,EAAGsC,GACxB2D,IAAAA,EAAI3D,EAAE,GACN4D,EAAI5D,EAAE,GAUHhC,OATPA,EAAI,GAAK2F,EAAIjG,EAAE,GACfM,EAAI,GAAK2F,EAAIjG,EAAE,GACfM,EAAI,GAAK2F,EAAIjG,EAAE,GACfM,EAAI,GAAK4F,EAAIlG,EAAE,GACfM,EAAI,GAAK4F,EAAIlG,EAAE,GACfM,EAAI,GAAK4F,EAAIlG,EAAE,GACfM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACJM,EAcF,SAASkE,EAAgBlE,EAAKgC,GAU5BhC,OATPA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAKgC,EAAE,GACXhC,EAAI,GAAKgC,EAAE,GACXhC,EAAI,GAAK,EACFA,EAcF,SAASmC,EAAanC,EAAK0B,GAC5BC,IAAAA,EAAIxC,KAAKyC,IAAIF,GACbG,EAAI1C,KAAK2C,IAAIJ,GAUV1B,OATPA,EAAI,GAAK6B,EACT7B,EAAI,GAAK2B,EACT3B,EAAI,GAAK,EACTA,EAAI,IAAM2B,EACV3B,EAAI,GAAK6B,EACT7B,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAcF,SAASoC,EAAYpC,EAAKgC,GAUxBhC,OATPA,EAAI,GAAKgC,EAAE,GACXhC,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAKgC,EAAE,GACXhC,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAUF,SAAS6F,EAAU7F,EAAKN,GAUtBM,OATPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAK,EACTA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAK,EACTA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAK,EACFA,EAWF,SAAS8F,EAAS9F,EAAK+F,GACxBJ,IAAAA,EAAII,EAAE,GACNH,EAAIG,EAAE,GACNC,EAAID,EAAE,GACNE,EAAIF,EAAE,GACNG,EAAKP,EAAIA,EACTQ,EAAKP,EAAIA,EACTQ,EAAKJ,EAAIA,EACTK,EAAKV,EAAIO,EACTI,EAAKV,EAAIM,EACTK,EAAKX,EAAIO,EACTK,EAAKR,EAAIE,EACTO,EAAKT,EAAIG,EACTO,EAAKV,EAAII,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EAUNpG,OATPA,EAAI,GAAK,EAAIuG,EAAKG,EAClB1G,EAAI,GAAKsG,EAAKO,EACd7G,EAAI,GAAKwG,EAAKI,EACd5G,EAAI,GAAKsG,EAAKO,EACd7G,EAAI,GAAK,EAAIqG,EAAKK,EAClB1G,EAAI,GAAKyG,EAAKE,EACd3G,EAAI,GAAKwG,EAAKI,EACd5G,EAAI,GAAKyG,EAAKE,EACd3G,EAAI,GAAK,EAAIqG,EAAKE,EACXvG,EAWF,SAAS8G,EAAe9G,EAAKN,GAC9BkF,IAAAA,EAAMlF,EAAE,GACR+E,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRqH,EAAMrH,EAAE,GACRmF,EAAMnF,EAAE,GACRoF,EAAMpF,EAAE,GACRiF,EAAMjF,EAAE,GACRsH,EAAMtH,EAAE,GACRqF,EAAMrF,EAAE,GACRsF,EAAMtF,EAAE,GACRuF,EAAMvF,EAAE,IACRuH,EAAMvH,EAAE,IACRwH,EAAMxH,EAAE,IACRyH,EAAMzH,EAAE,IACR0H,EAAM1H,EAAE,IACR2H,EAAM3H,EAAE,IACR2F,EAAMT,EAAME,EAAML,EAAMI,EACxBK,EAAMN,EAAMD,EAAMD,EAAMG,EACxBS,EAAMV,EAAMoC,EAAMD,EAAMlC,EACxByC,EAAM7C,EAAME,EAAMD,EAAMI,EACxByC,EAAM9C,EAAMuC,EAAMD,EAAMjC,EACxB0C,EAAM9C,EAAMsC,EAAMD,EAAMpC,EACxB8C,EAAM1C,EAAMoC,EAAMnC,EAAMkC,EACxBQ,EAAM3C,EAAMqC,EAAMnC,EAAMiC,EACxBS,EAAM5C,EAAMsC,EAAMJ,EAAMC,EACxBU,EAAM5C,EAAMoC,EAAMnC,EAAMkC,EACxB5B,EAAMP,EAAMqC,EAAMJ,EAAME,EACxBhC,EAAMF,EAAMoC,EAAMJ,EAAMG,EAExBnG,EAAMoE,EAAMF,EAAMD,EAAMK,EAAMD,EAAMsC,EAAMN,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAExE,OAACxG,GAILA,EAAM,EAAMA,EACZjB,EAAI,IAAM8E,EAAMK,EAAMR,EAAMY,EAAMyB,EAAMY,GAAO3G,EAC/CjB,EAAI,IAAM2E,EAAMgD,EAAM9C,EAAMM,EAAM6B,EAAMU,GAAOzG,EAC/CjB,EAAI,IAAM6E,EAAMU,EAAMT,EAAM6C,EAAMX,EAAMS,GAAOxG,EAC/CjB,EAAI,IAAM0E,EAAMa,EAAMd,EAAMU,EAAM4B,EAAMa,GAAO3G,EAC/CjB,EAAI,IAAM4E,EAAMO,EAAMT,EAAMiD,EAAMZ,EAAMW,GAAOzG,EAC/CjB,EAAI,IAAMyE,EAAMkD,EAAM/C,EAAMW,EAAMwB,EAAMU,GAAOxG,EAC/CjB,EAAI,IAAMmH,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,GAAOrG,EAC/CjB,EAAI,IAAMoH,EAAM9B,EAAM4B,EAAMM,EAAMH,EAAMnC,GAAOjE,EAC/CjB,EAAI,IAAMkH,EAAMK,EAAMJ,EAAM7B,EAAM+B,EAAMhC,GAAOpE,EACxCjB,GAbE,KAwBJ,SAAS6H,EAAW7H,EAAK8H,EAAOC,GAU9B/H,OATPA,EAAI,GAAK,EAAI8H,EACb9H,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EAAI+H,EACd/H,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EASF,SAASqC,EAAI3C,GACX,MAAA,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IASnI,SAAS4C,EAAK5C,GACZP,OAAAA,KAAKoD,KAAKpD,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,IAW3L,SAASmD,EAAI7C,EAAKN,EAAGE,GAUnBI,OATPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAWF,SAAS8C,EAAS9C,EAAKN,EAAGE,GAUxBI,OATPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAWF,SAASgD,EAAehD,EAAKN,EAAGE,GAU9BI,OATPA,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EACTI,EAYF,SAASiD,EAAqBjD,EAAKN,EAAGE,EAAGmC,GAUvC/B,OATPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EAChB/B,EAUF,SAAS+C,EAAYrD,EAAGE,GACtBF,OAAAA,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,GAUrJ,SAASD,EAAOD,EAAGE,GACpBkB,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACPqB,EAAKrB,EAAE,GACPsB,EAAKtB,EAAE,GACPmE,EAAKnE,EAAE,GACPoE,EAAKpE,EAAE,GACPsI,EAAKtI,EAAE,GACPuI,EAAKvI,EAAE,GACPwI,EAAKxI,EAAE,GACP2B,EAAKzB,EAAE,GACP0B,EAAK1B,EAAE,GACP2B,EAAK3B,EAAE,GACP4B,EAAK5B,EAAE,GACPmE,EAAKnE,EAAE,GACPoE,EAAKpE,EAAE,GACPuI,EAAKvI,EAAE,GACPwI,EAAKxI,EAAE,GACPyI,EAAKzI,EAAE,GACJT,OAAAA,KAAKU,IAAIiB,EAAKO,IAAOpB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIiB,GAAK3B,KAAKU,IAAIwB,KAAQlC,KAAKU,IAAIe,EAAKU,IAAOrB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIe,GAAKzB,KAAKU,IAAIyB,KAAQnC,KAAKU,IAAIkB,EAAKQ,IAAOtB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIkB,GAAK5B,KAAKU,IAAI0B,KAAQpC,KAAKU,IAAImB,EAAKQ,IAAOvB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImB,GAAK7B,KAAKU,IAAI2B,KAAQrC,KAAKU,IAAIgE,EAAKE,IAAO9D,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIgE,GAAK1E,KAAKU,IAAIkE,KAAQ5E,KAAKU,IAAIiE,EAAKE,IAAO/D,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIiE,GAAK3E,KAAKU,IAAImE,KAAQ7E,KAAKU,IAAImI,EAAKG,IAAOlI,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImI,GAAK7I,KAAKU,IAAIsI,KAAQhJ,KAAKU,IAAIoI,EAAKG,IAAOnI,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIoI,GAAK9I,KAAKU,IAAIuI,KAAQjJ,KAAKU,IAAIqI,EAAKG,IAAOpI,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIqI,GAAK/I,KAAKU,IAAIwI,IAOvvB,IAAInF,EAAM9B,EAMV,QAAA,IAAA,EAAA,IAAI+B,EAAML,EAAV,QAAA,IAAA;;AC+/BA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,WAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,UAAA,EAAA,QAAA,OAAA,EAAA,QAAA,QAAA,EAAA,QAAA,YAAA,EAAA,QAAA,SAAA,EAAA,QAAA,UAAA,EAAA,QAAA,MAAA,EAAA,QAAA,OAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,YAAA,EAAA,QAAA,aAAA,EAAA,QAAA,cAAA,EAAA,QAAA,cAAA,EAAA,QAAA,cAAA,EAAA,QAAA,wBAAA,EAAA,QAAA,UAAA,EAAA,QAAA,eAAA,EAAA,QAAA,WAAA,EAAA,QAAA,YAAA,EAAA,QAAA,6BAAA,EAAA,QAAA,mCAAA,EAAA,QAAA,SAAA,EAAA,QAAA,QAAA,EAAA,QAAA,YAAA,EAAA,QAAA,2BAAA,EAAA,QAAA,MAAA,EAAA,QAAA,OAAA,EAAA,QAAA,SAAA,EAAA,QAAA,IAAA,EAAA,QAAA,KAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,eAAA,EAAA,QAAA,qBAAA,EAAA,QAAA,YAAA,EAAA,QAAA,OAAA,EAAA,QAAA,IAAA,QAAA,SAAA,EAzwDP,IAAA,EAAA,EAAA,QAAA,gBAywDO,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,OAAA,yBAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,IAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,EA7vDA,SAAS/C,IACVC,IAAAA,EAAM,IAAIC,EAASlB,WAAW,IAqB3BiB,OAnBHC,EAASlB,YAAcC,eACzBgB,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,GAGZA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EASF,SAASE,EAAMR,GAChBM,IAAAA,EAAM,IAAIC,EAASlB,WAAW,IAiB3BiB,OAhBPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACLM,EAUF,SAASG,EAAKH,EAAKN,GAiBjBM,OAhBPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACLM,EAwBF,SAASK,EAAWC,EAAKC,EAAK6D,EAAKkE,EAAK9H,EAAKC,EAAK4D,EAAKkE,EAAKjE,EAAKC,EAAKC,EAAKgE,EAAKC,EAAKC,EAAKC,EAAKC,GAChG5I,IAAAA,EAAM,IAAIC,EAASlB,WAAW,IAiB3BiB,OAhBPA,EAAI,GAAKM,EACTN,EAAI,GAAKO,EACTP,EAAI,GAAKoE,EACTpE,EAAI,GAAKsI,EACTtI,EAAI,GAAKQ,EACTR,EAAI,GAAKS,EACTT,EAAI,GAAKqE,EACTrE,EAAI,GAAKuI,EACTvI,EAAI,GAAKsE,EACTtE,EAAI,GAAKuE,EACTvE,EAAI,IAAMwE,EACVxE,EAAI,IAAMwI,EACVxI,EAAI,IAAMyI,EACVzI,EAAI,IAAM0I,EACV1I,EAAI,IAAM2I,EACV3I,EAAI,IAAM4I,EACH5I,EAyBF,SAASU,EAAIV,EAAKM,EAAKC,EAAK6D,EAAKkE,EAAK9H,EAAKC,EAAK4D,EAAKkE,EAAKjE,EAAKC,EAAKC,EAAKgE,EAAKC,EAAKC,EAAKC,EAAKC,GAiB3F5I,OAhBPA,EAAI,GAAKM,EACTN,EAAI,GAAKO,EACTP,EAAI,GAAKoE,EACTpE,EAAI,GAAKsI,EACTtI,EAAI,GAAKQ,EACTR,EAAI,GAAKS,EACTT,EAAI,GAAKqE,EACTrE,EAAI,GAAKuI,EACTvI,EAAI,GAAKsE,EACTtE,EAAI,GAAKuE,EACTvE,EAAI,IAAMwE,EACVxE,EAAI,IAAMwI,EACVxI,EAAI,IAAMyI,EACVzI,EAAI,IAAM0I,EACV1I,EAAI,IAAM2I,EACV3I,EAAI,IAAM4I,EACH5I,EASF,SAASI,EAASJ,GAiBhBA,OAhBPA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAUF,SAASW,EAAUX,EAAKN,GAEzBM,GAAAA,IAAQN,EAAG,CACT+E,IAAAA,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRqH,EAAMrH,EAAE,GACRiF,EAAMjF,EAAE,GACRsH,EAAMtH,EAAE,GACRuH,EAAMvH,EAAE,IACZM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,IACXM,EAAI,GAAKyE,EACTzE,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,IACXM,EAAI,GAAK0E,EACT1E,EAAI,GAAK2E,EACT3E,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAM+G,EACV/G,EAAI,IAAMgH,EACVhH,EAAI,IAAMiH,OAEVjH,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,IACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,IACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,GACZM,EAAI,IAAMN,EAAE,GACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IAGPM,OAAAA,EAUF,SAASa,EAAOb,EAAKN,GACtBkF,IAAAA,EAAMlF,EAAE,GACR+E,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRqH,EAAMrH,EAAE,GACRmF,EAAMnF,EAAE,GACRoF,EAAMpF,EAAE,GACRiF,EAAMjF,EAAE,GACRsH,EAAMtH,EAAE,GACRqF,EAAMrF,EAAE,GACRsF,EAAMtF,EAAE,GACRuF,EAAMvF,EAAE,IACRuH,EAAMvH,EAAE,IACRwH,EAAMxH,EAAE,IACRyH,EAAMzH,EAAE,IACR0H,EAAM1H,EAAE,IACR2H,EAAM3H,EAAE,IACR2F,EAAMT,EAAME,EAAML,EAAMI,EACxBK,EAAMN,EAAMD,EAAMD,EAAMG,EACxBS,EAAMV,EAAMoC,EAAMD,EAAMlC,EACxByC,EAAM7C,EAAME,EAAMD,EAAMI,EACxByC,EAAM9C,EAAMuC,EAAMD,EAAMjC,EACxB0C,EAAM9C,EAAMsC,EAAMD,EAAMpC,EACxB8C,EAAM1C,EAAMoC,EAAMnC,EAAMkC,EACxBQ,EAAM3C,EAAMqC,EAAMnC,EAAMiC,EACxBS,EAAM5C,EAAMsC,EAAMJ,EAAMC,EACxBU,EAAM5C,EAAMoC,EAAMnC,EAAMkC,EACxB5B,EAAMP,EAAMqC,EAAMJ,EAAME,EACxBhC,EAAMF,EAAMoC,EAAMJ,EAAMG,EAExBnG,EAAMoE,EAAMF,EAAMD,EAAMK,EAAMD,EAAMsC,EAAMN,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAExE,OAACxG,GAILA,EAAM,EAAMA,EACZjB,EAAI,IAAM8E,EAAMK,EAAMR,EAAMY,EAAMyB,EAAMY,GAAO3G,EAC/CjB,EAAI,IAAM0E,EAAMa,EAAMd,EAAMU,EAAM4B,EAAMa,GAAO3G,EAC/CjB,EAAI,IAAMmH,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,GAAOrG,EAC/CjB,EAAI,IAAMiF,EAAMsC,EAAMvC,EAAMwC,EAAMP,EAAMK,GAAOrG,EAC/CjB,EAAI,IAAM2E,EAAMgD,EAAM9C,EAAMM,EAAM6B,EAAMU,GAAOzG,EAC/CjB,EAAI,IAAM4E,EAAMO,EAAMT,EAAMiD,EAAMZ,EAAMW,GAAOzG,EAC/CjB,EAAI,IAAMoH,EAAM9B,EAAM4B,EAAMM,EAAMH,EAAMnC,GAAOjE,EAC/CjB,EAAI,IAAM+E,EAAMyC,EAAMvC,EAAMK,EAAM2B,EAAM/B,GAAOjE,EAC/CjB,EAAI,IAAM6E,EAAMU,EAAMT,EAAM6C,EAAMX,EAAMS,GAAOxG,EAC/CjB,EAAI,IAAMyE,EAAMkD,EAAM/C,EAAMW,EAAMwB,EAAMU,GAAOxG,EAC/CjB,EAAI,KAAOkH,EAAMK,EAAMJ,EAAM7B,EAAM+B,EAAMhC,GAAOpE,EAChDjB,EAAI,KAAOgF,EAAMM,EAAMP,EAAMwC,EAAMN,EAAM5B,GAAOpE,EAChDjB,EAAI,KAAO8E,EAAM4C,EAAM7C,EAAM+C,EAAMjD,EAAM8C,GAAOxG,EAChDjB,EAAI,KAAO4E,EAAMgD,EAAMnD,EAAMiD,EAAMhD,EAAM+C,GAAOxG,EAChDjB,EAAI,KAAOmH,EAAMjC,EAAMgC,EAAMI,EAAMF,EAAM/B,GAAOpE,EAChDjB,EAAI,KAAO+E,EAAMuC,EAAMtC,EAAME,EAAMD,EAAMI,GAAOpE,EACzCjB,GApBE,KA8BJ,SAASkB,EAAQlB,EAAKN,GACvBkF,IAAAA,EAAMlF,EAAE,GACR+E,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRqH,EAAMrH,EAAE,GACRmF,EAAMnF,EAAE,GACRoF,EAAMpF,EAAE,GACRiF,EAAMjF,EAAE,GACRsH,EAAMtH,EAAE,GACRqF,EAAMrF,EAAE,GACRsF,EAAMtF,EAAE,GACRuF,EAAMvF,EAAE,IACRuH,EAAMvH,EAAE,IACRwH,EAAMxH,EAAE,IACRyH,EAAMzH,EAAE,IACR0H,EAAM1H,EAAE,IACR2H,EAAM3H,EAAE,IAiBLM,OAhBPA,EAAI,GAAK8E,GAAOG,EAAMoC,EAAMJ,EAAMG,GAAOpC,GAAOL,EAAM0C,EAAML,EAAMI,GAAOD,GAAOxC,EAAMsC,EAAMD,EAAM/B,GAClGjF,EAAI,KAAOyE,GAAOQ,EAAMoC,EAAMJ,EAAMG,GAAOpC,GAAON,EAAM2C,EAAMN,EAAMK,GAAOD,GAAOzC,EAAMuC,EAAMF,EAAM9B,IACpGjF,EAAI,GAAKyE,GAAOE,EAAM0C,EAAML,EAAMI,GAAOtC,GAAOJ,EAAM2C,EAAMN,EAAMK,GAAOD,GAAOzC,EAAMsC,EAAMD,EAAMpC,GAClG3E,EAAI,KAAOyE,GAAOE,EAAMsC,EAAMD,EAAM/B,GAAOH,GAAOJ,EAAMuC,EAAMF,EAAM9B,GAAOD,GAAON,EAAMsC,EAAMD,EAAMpC,IACpG3E,EAAI,KAAO6E,GAAOI,EAAMoC,EAAMJ,EAAMG,GAAOrC,GAAOJ,EAAM0C,EAAML,EAAMI,GAAOF,GAAOvC,EAAMsC,EAAMD,EAAM/B,IACpGjF,EAAI,GAAK4E,GAAOK,EAAMoC,EAAMJ,EAAMG,GAAOrC,GAAOL,EAAM2C,EAAMN,EAAMK,GAAOF,GAAOxC,EAAMuC,EAAMF,EAAM9B,GAClGjF,EAAI,KAAO4E,GAAOD,EAAM0C,EAAML,EAAMI,GAAOvC,GAAOH,EAAM2C,EAAMN,EAAMK,GAAOF,GAAOxC,EAAMsC,EAAMD,EAAMpC,IACpG3E,EAAI,GAAK4E,GAAOD,EAAMsC,EAAMD,EAAM/B,GAAOJ,GAAOH,EAAMuC,EAAMF,EAAM9B,GAAOF,GAAOL,EAAMsC,EAAMD,EAAMpC,GAClG3E,EAAI,GAAK6E,GAAOG,EAAMqC,EAAMJ,EAAME,GAAOpC,GAAOD,EAAMuC,EAAML,EAAMG,GAAOD,GAAOpC,EAAMmC,EAAMD,EAAMhC,GAClGhF,EAAI,KAAO4E,GAAOI,EAAMqC,EAAMJ,EAAME,GAAOpC,GAAON,EAAM4C,EAAMN,EAAMI,GAAOD,GAAOzC,EAAMwC,EAAMF,EAAM/B,IACpGhF,EAAI,IAAM4E,GAAOE,EAAMuC,EAAML,EAAMG,GAAOtC,GAAOJ,EAAM4C,EAAMN,EAAMI,GAAOD,GAAOzC,EAAMuC,EAAMD,EAAMjC,GACnG9E,EAAI,MAAQ4E,GAAOE,EAAMmC,EAAMD,EAAMhC,GAAOH,GAAOJ,EAAMwC,EAAMF,EAAM/B,GAAOD,GAAON,EAAMuC,EAAMD,EAAMjC,IACrG9E,EAAI,MAAQ6E,GAAOG,EAAMoC,EAAMnC,EAAMkC,GAAOpC,GAAOD,EAAMsC,EAAMzC,EAAMwC,GAAOD,GAAOpC,EAAMG,EAAMN,EAAMK,IACrGhF,EAAI,IAAM4E,GAAOI,EAAMoC,EAAMnC,EAAMkC,GAAOpC,GAAON,EAAM2C,EAAM1C,EAAMyC,GAAOD,GAAOzC,EAAMQ,EAAMP,EAAMM,GACnGhF,EAAI,MAAQ4E,GAAOE,EAAMsC,EAAMzC,EAAMwC,GAAOtC,GAAOJ,EAAM2C,EAAM1C,EAAMyC,GAAOD,GAAOzC,EAAME,EAAMD,EAAMI,IACrG9E,EAAI,IAAM4E,GAAOE,EAAMG,EAAMN,EAAMK,GAAOH,GAAOJ,EAAMQ,EAAMP,EAAMM,GAAOD,GAAON,EAAME,EAAMD,EAAMI,GAC5F9E,EASF,SAASmB,EAAYzB,GACtBkF,IAAAA,EAAMlF,EAAE,GACR+E,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRqH,EAAMrH,EAAE,GACRmF,EAAMnF,EAAE,GACRoF,EAAMpF,EAAE,GACRiF,EAAMjF,EAAE,GACRsH,EAAMtH,EAAE,GACRqF,EAAMrF,EAAE,GACRsF,EAAMtF,EAAE,GACRuF,EAAMvF,EAAE,IACRuH,EAAMvH,EAAE,IACRwH,EAAMxH,EAAE,IACRyH,EAAMzH,EAAE,IACR0H,EAAM1H,EAAE,IACR2H,EAAM3H,EAAE,IAcL2F,OAbGT,EAAME,EAAML,EAAMI,IAWlBI,EAAMoC,EAAMJ,EAAMG,IAVlBxC,EAAMD,EAAMD,EAAMG,IASlBG,EAAMqC,EAAMJ,EAAME,IARlBvC,EAAMoC,EAAMD,EAAMlC,IAOlBG,EAAMoC,EAAMnC,EAAMkC,IANlB1C,EAAME,EAAMD,EAAMI,IAKlBC,EAAMsC,EAAMJ,EAAMC,IAJlBzC,EAAMuC,EAAMD,EAAMjC,IAGlBC,EAAMqC,EAAMnC,EAAMiC,IAFlBxC,EAAMsC,EAAMD,EAAMpC,IAClBI,EAAMoC,EAAMnC,EAAMkC,GAkBvB,SAAS9F,EAASpB,EAAKN,EAAGE,GAC3BgF,IAAAA,EAAMlF,EAAE,GACR+E,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRqH,EAAMrH,EAAE,GACRmF,EAAMnF,EAAE,GACRoF,EAAMpF,EAAE,GACRiF,EAAMjF,EAAE,GACRsH,EAAMtH,EAAE,GACRqF,EAAMrF,EAAE,GACRsF,EAAMtF,EAAE,GACRuF,EAAMvF,EAAE,IACRuH,EAAMvH,EAAE,IACRwH,EAAMxH,EAAE,IACRyH,EAAMzH,EAAE,IACR0H,EAAM1H,EAAE,IACR2H,EAAM3H,EAAE,IAER2B,EAAKzB,EAAE,GACP0B,EAAK1B,EAAE,GACP2B,EAAK3B,EAAE,GACP4B,EAAK5B,EAAE,GA6BJI,OA5BPA,EAAI,GAAKqB,EAAKuD,EAAMtD,EAAKuD,EAAMtD,EAAKwD,EAAMvD,EAAK0F,EAC/ClH,EAAI,GAAKqB,EAAKoD,EAAMnD,EAAKwD,EAAMvD,EAAKyD,EAAMxD,EAAK2F,EAC/CnH,EAAI,GAAKqB,EAAKqD,EAAMpD,EAAKqD,EAAMpD,EAAK0D,EAAMzD,EAAK4F,EAC/CpH,EAAI,GAAKqB,EAAK0F,EAAMzF,EAAK0F,EAAMzF,EAAK0F,EAAMzF,EAAK6F,EAC/ChG,EAAKzB,EAAE,GACP0B,EAAK1B,EAAE,GACP2B,EAAK3B,EAAE,GACP4B,EAAK5B,EAAE,GACPI,EAAI,GAAKqB,EAAKuD,EAAMtD,EAAKuD,EAAMtD,EAAKwD,EAAMvD,EAAK0F,EAC/ClH,EAAI,GAAKqB,EAAKoD,EAAMnD,EAAKwD,EAAMvD,EAAKyD,EAAMxD,EAAK2F,EAC/CnH,EAAI,GAAKqB,EAAKqD,EAAMpD,EAAKqD,EAAMpD,EAAK0D,EAAMzD,EAAK4F,EAC/CpH,EAAI,GAAKqB,EAAK0F,EAAMzF,EAAK0F,EAAMzF,EAAK0F,EAAMzF,EAAK6F,EAC/ChG,EAAKzB,EAAE,GACP0B,EAAK1B,EAAE,GACP2B,EAAK3B,EAAE,IACP4B,EAAK5B,EAAE,IACPI,EAAI,GAAKqB,EAAKuD,EAAMtD,EAAKuD,EAAMtD,EAAKwD,EAAMvD,EAAK0F,EAC/ClH,EAAI,GAAKqB,EAAKoD,EAAMnD,EAAKwD,EAAMvD,EAAKyD,EAAMxD,EAAK2F,EAC/CnH,EAAI,IAAMqB,EAAKqD,EAAMpD,EAAKqD,EAAMpD,EAAK0D,EAAMzD,EAAK4F,EAChDpH,EAAI,IAAMqB,EAAK0F,EAAMzF,EAAK0F,EAAMzF,EAAK0F,EAAMzF,EAAK6F,EAChDhG,EAAKzB,EAAE,IACP0B,EAAK1B,EAAE,IACP2B,EAAK3B,EAAE,IACP4B,EAAK5B,EAAE,IACPI,EAAI,IAAMqB,EAAKuD,EAAMtD,EAAKuD,EAAMtD,EAAKwD,EAAMvD,EAAK0F,EAChDlH,EAAI,IAAMqB,EAAKoD,EAAMnD,EAAKwD,EAAMvD,EAAKyD,EAAMxD,EAAK2F,EAChDnH,EAAI,IAAMqB,EAAKqD,EAAMpD,EAAKqD,EAAMpD,EAAK0D,EAAMzD,EAAK4F,EAChDpH,EAAI,IAAMqB,EAAK0F,EAAMzF,EAAK0F,EAAMzF,EAAK0F,EAAMzF,EAAK6F,EACzCrH,EAWF,SAASiE,EAAUjE,EAAKN,EAAGsC,GAC5B2D,IAGAf,EAAKH,EAAKC,EAAKqC,EACflC,EAAKC,EAAKH,EAAKqC,EACfjC,EAAKC,EAAKC,EAAKgC,EALftB,EAAI3D,EAAE,GACN4D,EAAI5D,EAAE,GACNgE,EAAIhE,EAAE,GAyCHhC,OApCHN,IAAMM,GACRA,EAAI,IAAMN,EAAE,GAAKiG,EAAIjG,EAAE,GAAKkG,EAAIlG,EAAE,GAAKsG,EAAItG,EAAE,IAC7CM,EAAI,IAAMN,EAAE,GAAKiG,EAAIjG,EAAE,GAAKkG,EAAIlG,EAAE,GAAKsG,EAAItG,EAAE,IAC7CM,EAAI,IAAMN,EAAE,GAAKiG,EAAIjG,EAAE,GAAKkG,EAAIlG,EAAE,IAAMsG,EAAItG,EAAE,IAC9CM,EAAI,IAAMN,EAAE,GAAKiG,EAAIjG,EAAE,GAAKkG,EAAIlG,EAAE,IAAMsG,EAAItG,EAAE,MAE9CkF,EAAMlF,EAAE,GACR+E,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRqH,EAAMrH,EAAE,GACRmF,EAAMnF,EAAE,GACRoF,EAAMpF,EAAE,GACRiF,EAAMjF,EAAE,GACRsH,EAAMtH,EAAE,GACRqF,EAAMrF,EAAE,GACRsF,EAAMtF,EAAE,GACRuF,EAAMvF,EAAE,IACRuH,EAAMvH,EAAE,IACRM,EAAI,GAAK4E,EACT5E,EAAI,GAAKyE,EACTzE,EAAI,GAAK0E,EACT1E,EAAI,GAAK+G,EACT/G,EAAI,GAAK6E,EACT7E,EAAI,GAAK8E,EACT9E,EAAI,GAAK2E,EACT3E,EAAI,GAAKgH,EACThH,EAAI,GAAK+E,EACT/E,EAAI,GAAKgF,EACThF,EAAI,IAAMiF,EACVjF,EAAI,IAAMiH,EACVjH,EAAI,IAAM4E,EAAMe,EAAId,EAAMe,EAAIb,EAAMiB,EAAItG,EAAE,IAC1CM,EAAI,IAAMyE,EAAMkB,EAAIb,EAAMc,EAAIZ,EAAMgB,EAAItG,EAAE,IAC1CM,EAAI,IAAM0E,EAAMiB,EAAIhB,EAAMiB,EAAIX,EAAMe,EAAItG,EAAE,IAC1CM,EAAI,IAAM+G,EAAMpB,EAAIqB,EAAMpB,EAAIqB,EAAMjB,EAAItG,EAAE,KAGrCM,EAWF,SAAS+B,EAAM/B,EAAKN,EAAGsC,GACxB2D,IAAAA,EAAI3D,EAAE,GACN4D,EAAI5D,EAAE,GACNgE,EAAIhE,EAAE,GAiBHhC,OAhBPA,EAAI,GAAKN,EAAE,GAAKiG,EAChB3F,EAAI,GAAKN,EAAE,GAAKiG,EAChB3F,EAAI,GAAKN,EAAE,GAAKiG,EAChB3F,EAAI,GAAKN,EAAE,GAAKiG,EAChB3F,EAAI,GAAKN,EAAE,GAAKkG,EAChB5F,EAAI,GAAKN,EAAE,GAAKkG,EAChB5F,EAAI,GAAKN,EAAE,GAAKkG,EAChB5F,EAAI,GAAKN,EAAE,GAAKkG,EAChB5F,EAAI,GAAKN,EAAE,GAAKsG,EAChBhG,EAAI,GAAKN,EAAE,GAAKsG,EAChBhG,EAAI,IAAMN,EAAE,IAAMsG,EAClBhG,EAAI,IAAMN,EAAE,IAAMsG,EAClBhG,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACLM,EAYF,SAASyB,EAAOzB,EAAKN,EAAGgC,EAAKmH,GAC9BlD,IAIAhE,EAAGE,EAAGiH,EACNlE,EAAKH,EAAKC,EAAKqC,EACflC,EAAKC,EAAKH,EAAKqC,EACfjC,EAAKC,EAAKC,EAAKgC,EACf5B,EAAKH,EAAKI,EACVC,EAAKJ,EAAKK,EACVC,EAAKL,EAAKM,EAVVC,EAAIkD,EAAK,GACTjD,EAAIiD,EAAK,GACT7C,EAAI6C,EAAK,GACTE,EAAM5J,KAAKoD,KAAKoD,EAAIA,EAAIC,EAAIA,EAAII,EAAIA,GASpC+C,OAAAA,EAAM9I,EAASnB,QACV,MAIT6G,GADAoD,EAAM,EAAIA,EAEVnD,GAAKmD,EACL/C,GAAK+C,EACLpH,EAAIxC,KAAKyC,IAAIF,GAEboH,EAAI,GADJjH,EAAI1C,KAAK2C,IAAIJ,IAEbkD,EAAMlF,EAAE,GACR+E,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRqH,EAAMrH,EAAE,GACRmF,EAAMnF,EAAE,GACRoF,EAAMpF,EAAE,GACRiF,EAAMjF,EAAE,GACRsH,EAAMtH,EAAE,GACRqF,EAAMrF,EAAE,GACRsF,EAAMtF,EAAE,GACRuF,EAAMvF,EAAE,IACRuH,EAAMvH,EAAE,IAER2F,EAAMM,EAAIA,EAAImD,EAAIjH,EAClBqD,EAAMU,EAAID,EAAImD,EAAI9C,EAAIrE,EACtB2D,EAAMU,EAAIL,EAAImD,EAAIlD,EAAIjE,EACtB4D,EAAMI,EAAIC,EAAIkD,EAAI9C,EAAIrE,EACtBwD,EAAMS,EAAIA,EAAIkD,EAAIjH,EAClB2D,EAAMQ,EAAIJ,EAAIkD,EAAInD,EAAIhE,EACtB8D,EAAME,EAAIK,EAAI8C,EAAIlD,EAAIjE,EACtByD,EAAMQ,EAAII,EAAI8C,EAAInD,EAAIhE,EACtB+D,EAAMM,EAAIA,EAAI8C,EAAIjH,EAElB7B,EAAI,GAAK4E,EAAMS,EAAMR,EAAMK,EAAMH,EAAMO,EACvCtF,EAAI,GAAKyE,EAAMY,EAAMP,EAAMI,EAAMF,EAAMM,EACvCtF,EAAI,GAAK0E,EAAMW,EAAMV,EAAMO,EAAMD,EAAMK,EACvCtF,EAAI,GAAK+G,EAAM1B,EAAM2B,EAAM9B,EAAM+B,EAAM3B,EACvCtF,EAAI,GAAK4E,EAAMW,EAAMV,EAAMM,EAAMJ,EAAMS,EACvCxF,EAAI,GAAKyE,EAAMc,EAAMT,EAAMK,EAAMH,EAAMQ,EACvCxF,EAAI,GAAK0E,EAAMa,EAAMZ,EAAMQ,EAAMF,EAAMO,EACvCxF,EAAI,GAAK+G,EAAMxB,EAAMyB,EAAM7B,EAAM8B,EAAMzB,EACvCxF,EAAI,GAAK4E,EAAMa,EAAMZ,EAAMO,EAAML,EAAMW,EACvC1F,EAAI,GAAKyE,EAAMgB,EAAMX,EAAMM,EAAMJ,EAAMU,EACvC1F,EAAI,IAAM0E,EAAMe,EAAMd,EAAMS,EAAMH,EAAMS,EACxC1F,EAAI,IAAM+G,EAAMtB,EAAMuB,EAAM5B,EAAM6B,EAAMvB,EAEpChG,IAAMM,IAERA,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,KAGPM,GAWF,SAASgJ,EAAQhJ,EAAKN,EAAGgC,GAC1BC,IAAAA,EAAIxC,KAAKyC,IAAIF,GACbG,EAAI1C,KAAK2C,IAAIJ,GACbmD,EAAMnF,EAAE,GACRoF,EAAMpF,EAAE,GACRiF,EAAMjF,EAAE,GACRsH,EAAMtH,EAAE,GACRqF,EAAMrF,EAAE,GACRsF,EAAMtF,EAAE,GACRuF,EAAMvF,EAAE,IACRuH,EAAMvH,EAAE,IAuBLM,OArBHN,IAAMM,IAERA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,KAIdM,EAAI,GAAK6E,EAAMhD,EAAIkD,EAAMpD,EACzB3B,EAAI,GAAK8E,EAAMjD,EAAImD,EAAMrD,EACzB3B,EAAI,GAAK2E,EAAM9C,EAAIoD,EAAMtD,EACzB3B,EAAI,GAAKgH,EAAMnF,EAAIoF,EAAMtF,EACzB3B,EAAI,GAAK+E,EAAMlD,EAAIgD,EAAMlD,EACzB3B,EAAI,GAAKgF,EAAMnD,EAAIiD,EAAMnD,EACzB3B,EAAI,IAAMiF,EAAMpD,EAAI8C,EAAMhD,EAC1B3B,EAAI,IAAMiH,EAAMpF,EAAImF,EAAMrF,EACnB3B,EAWF,SAASiJ,EAAQjJ,EAAKN,EAAGgC,GAC1BC,IAAAA,EAAIxC,KAAKyC,IAAIF,GACbG,EAAI1C,KAAK2C,IAAIJ,GACbkD,EAAMlF,EAAE,GACR+E,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRqH,EAAMrH,EAAE,GACRqF,EAAMrF,EAAE,GACRsF,EAAMtF,EAAE,GACRuF,EAAMvF,EAAE,IACRuH,EAAMvH,EAAE,IAuBLM,OArBHN,IAAMM,IAERA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,KAIdM,EAAI,GAAK4E,EAAM/C,EAAIkD,EAAMpD,EACzB3B,EAAI,GAAKyE,EAAM5C,EAAImD,EAAMrD,EACzB3B,EAAI,GAAK0E,EAAM7C,EAAIoD,EAAMtD,EACzB3B,EAAI,GAAK+G,EAAMlF,EAAIoF,EAAMtF,EACzB3B,EAAI,GAAK4E,EAAMjD,EAAIoD,EAAMlD,EACzB7B,EAAI,GAAKyE,EAAM9C,EAAIqD,EAAMnD,EACzB7B,EAAI,IAAM0E,EAAM/C,EAAIsD,EAAMpD,EAC1B7B,EAAI,IAAM+G,EAAMpF,EAAIsF,EAAMpF,EACnB7B,EAWF,SAASkJ,EAAQlJ,EAAKN,EAAGgC,GAC1BC,IAAAA,EAAIxC,KAAKyC,IAAIF,GACbG,EAAI1C,KAAK2C,IAAIJ,GACbkD,EAAMlF,EAAE,GACR+E,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRqH,EAAMrH,EAAE,GACRmF,EAAMnF,EAAE,GACRoF,EAAMpF,EAAE,GACRiF,EAAMjF,EAAE,GACRsH,EAAMtH,EAAE,GAuBLM,OArBHN,IAAMM,IAERA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,IACZM,EAAI,IAAMN,EAAE,KAIdM,EAAI,GAAK4E,EAAM/C,EAAIgD,EAAMlD,EACzB3B,EAAI,GAAKyE,EAAM5C,EAAIiD,EAAMnD,EACzB3B,EAAI,GAAK0E,EAAM7C,EAAI8C,EAAMhD,EACzB3B,EAAI,GAAK+G,EAAMlF,EAAImF,EAAMrF,EACzB3B,EAAI,GAAK6E,EAAMhD,EAAI+C,EAAMjD,EACzB3B,EAAI,GAAK8E,EAAMjD,EAAI4C,EAAM9C,EACzB3B,EAAI,GAAK2E,EAAM9C,EAAI6C,EAAM/C,EACzB3B,EAAI,GAAKgH,EAAMnF,EAAIkF,EAAMpF,EAClB3B,EAcF,SAASkE,EAAgBlE,EAAKgC,GAiB5BhC,OAhBPA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAMgC,EAAE,GACZhC,EAAI,IAAMgC,EAAE,GACZhC,EAAI,IAAMgC,EAAE,GACZhC,EAAI,IAAM,EACHA,EAcF,SAASoC,EAAYpC,EAAKgC,GAiBxBhC,OAhBPA,EAAI,GAAKgC,EAAE,GACXhC,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAKgC,EAAE,GACXhC,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAMgC,EAAE,GACZhC,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAeF,SAASmC,EAAanC,EAAK0B,EAAKmH,GACjClD,IAIAhE,EAAGE,EAAGiH,EAJNnD,EAAIkD,EAAK,GACTjD,EAAIiD,EAAK,GACT7C,EAAI6C,EAAK,GACTE,EAAM5J,KAAKoD,KAAKoD,EAAIA,EAAIC,EAAIA,EAAII,EAAIA,GAGpC+C,OAAAA,EAAM9I,EAASnB,QACV,MAIT6G,GADAoD,EAAM,EAAIA,EAEVnD,GAAKmD,EACL/C,GAAK+C,EACLpH,EAAIxC,KAAKyC,IAAIF,GAEboH,EAAI,GADJjH,EAAI1C,KAAK2C,IAAIJ,IAGb1B,EAAI,GAAK2F,EAAIA,EAAImD,EAAIjH,EACrB7B,EAAI,GAAK4F,EAAID,EAAImD,EAAI9C,EAAIrE,EACzB3B,EAAI,GAAKgG,EAAIL,EAAImD,EAAIlD,EAAIjE,EACzB3B,EAAI,GAAK,EACTA,EAAI,GAAK2F,EAAIC,EAAIkD,EAAI9C,EAAIrE,EACzB3B,EAAI,GAAK4F,EAAIA,EAAIkD,EAAIjH,EACrB7B,EAAI,GAAKgG,EAAIJ,EAAIkD,EAAInD,EAAIhE,EACzB3B,EAAI,GAAK,EACTA,EAAI,GAAK2F,EAAIK,EAAI8C,EAAIlD,EAAIjE,EACzB3B,EAAI,GAAK4F,EAAII,EAAI8C,EAAInD,EAAIhE,EACzB3B,EAAI,IAAMgG,EAAIA,EAAI8C,EAAIjH,EACtB7B,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,GAcF,SAASmJ,EAAcnJ,EAAK0B,GAC7BC,IAAAA,EAAIxC,KAAKyC,IAAIF,GACbG,EAAI1C,KAAK2C,IAAIJ,GAkBV1B,OAhBPA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK6B,EACT7B,EAAI,GAAK2B,EACT3B,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM2B,EACV3B,EAAI,IAAM6B,EACV7B,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAcF,SAASoJ,EAAcpJ,EAAK0B,GAC7BC,IAAAA,EAAIxC,KAAKyC,IAAIF,GACbG,EAAI1C,KAAK2C,IAAIJ,GAkBV1B,OAhBPA,EAAI,GAAK6B,EACT7B,EAAI,GAAK,EACTA,EAAI,IAAM2B,EACV3B,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK2B,EACT3B,EAAI,GAAK,EACTA,EAAI,IAAM6B,EACV7B,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAcF,SAASqJ,EAAcrJ,EAAK0B,GAC7BC,IAAAA,EAAIxC,KAAKyC,IAAIF,GACbG,EAAI1C,KAAK2C,IAAIJ,GAkBV1B,OAhBPA,EAAI,GAAK6B,EACT7B,EAAI,GAAK2B,EACT3B,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM2B,EACV3B,EAAI,GAAK6B,EACT7B,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAkBF,SAASsJ,EAAwBtJ,EAAK+F,EAAG/D,GAE1C2D,IAAAA,EAAII,EAAE,GACNH,EAAIG,EAAE,GACNC,EAAID,EAAE,GACNE,EAAIF,EAAE,GACNG,EAAKP,EAAIA,EACTQ,EAAKP,EAAIA,EACTQ,EAAKJ,EAAIA,EACTK,EAAKV,EAAIO,EACTqD,EAAK5D,EAAIQ,EACTqD,EAAK7D,EAAIS,EACTG,EAAKX,EAAIO,EACTsD,EAAK7D,EAAIQ,EACTM,EAAKV,EAAII,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EAiBNpG,OAhBPA,EAAI,GAAK,GAAKuG,EAAKG,GACnB1G,EAAI,GAAKuJ,EAAK1C,EACd7G,EAAI,GAAKwJ,EAAK5C,EACd5G,EAAI,GAAK,EACTA,EAAI,GAAKuJ,EAAK1C,EACd7G,EAAI,GAAK,GAAKqG,EAAKK,GACnB1G,EAAI,GAAKyJ,EAAK9C,EACd3G,EAAI,GAAK,EACTA,EAAI,GAAKwJ,EAAK5C,EACd5G,EAAI,GAAKyJ,EAAK9C,EACd3G,EAAI,IAAM,GAAKqG,EAAKE,GACpBvG,EAAI,IAAM,EACVA,EAAI,IAAMgC,EAAE,GACZhC,EAAI,IAAMgC,EAAE,GACZhC,EAAI,IAAMgC,EAAE,GACZhC,EAAI,IAAM,EACHA,EAUF,SAAS0J,EAAU1J,EAAKN,GACzBiK,IAAAA,EAAc,IAAI1J,EAASlB,WAAW,GACtC6K,GAAMlK,EAAE,GACRmK,GAAMnK,EAAE,GACRoK,GAAMpK,EAAE,GACRqK,EAAKrK,EAAE,GACPsK,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GACPwK,EAAKxK,EAAE,GACPyK,EAAKzK,EAAE,GACP0K,EAAYR,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAa5C/J,OAXHoK,EAAY,GACdT,EAAY,GAA+C,GAAzCK,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,GAAUO,EAC/DT,EAAY,GAA+C,GAAzCM,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,GAAUM,EAC/DT,EAAY,GAA+C,GAAzCO,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,GAAUQ,IAE/DT,EAAY,GAA+C,GAAzCK,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,GACrDF,EAAY,GAA+C,GAAzCM,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,GACrDH,EAAY,GAA+C,GAAzCO,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,IAGvDN,EAAwBtJ,EAAKN,EAAGiK,GACzB3J,EAYF,SAASqK,EAAerK,EAAKsK,GAI3BtK,OAHPA,EAAI,GAAKsK,EAAI,IACbtK,EAAI,GAAKsK,EAAI,IACbtK,EAAI,GAAKsK,EAAI,IACNtK,EAaF,SAASuK,EAAWvK,EAAKsK,GAC1B7J,IAAAA,EAAM6J,EAAI,GACVjG,EAAMiG,EAAI,GACV/B,EAAM+B,EAAI,GACV/F,EAAM+F,EAAI,GACV9F,EAAM8F,EAAI,GACV9B,EAAM8B,EAAI,GACV5B,EAAM4B,EAAI,GACV3B,EAAM2B,EAAI,GACV1B,EAAM0B,EAAI,IAIPtK,OAHPA,EAAI,GAAKb,KAAKoD,KAAK9B,EAAMA,EAAM4D,EAAMA,EAAMkE,EAAMA,GACjDvI,EAAI,GAAKb,KAAKoD,KAAKgC,EAAMA,EAAMC,EAAMA,EAAMgE,EAAMA,GACjDxI,EAAI,GAAKb,KAAKoD,KAAKmG,EAAMA,EAAMC,EAAMA,EAAMC,EAAMA,GAC1C5I,EAYF,SAASwK,EAAYxK,EAAKsK,GAE3BG,IAAAA,EAAQH,EAAI,GAAKA,EAAI,GAAKA,EAAI,IAC9BI,EAAI,EA4BD1K,OA1BHyK,EAAQ,GACVC,EAA6B,EAAzBvL,KAAKoD,KAAKkI,EAAQ,GACtBzK,EAAI,GAAK,IAAO0K,EAChB1K,EAAI,IAAMsK,EAAI,GAAKA,EAAI,IAAMI,EAC7B1K,EAAI,IAAMsK,EAAI,GAAKA,EAAI,IAAMI,EAC7B1K,EAAI,IAAMsK,EAAI,GAAKA,EAAI,IAAMI,GACpBJ,EAAI,GAAKA,EAAI,IAAMA,EAAI,GAAKA,EAAI,KACzCI,EAAiD,EAA7CvL,KAAKoD,KAAK,EAAM+H,EAAI,GAAKA,EAAI,GAAKA,EAAI,KAC1CtK,EAAI,IAAMsK,EAAI,GAAKA,EAAI,IAAMI,EAC7B1K,EAAI,GAAK,IAAO0K,EAChB1K,EAAI,IAAMsK,EAAI,GAAKA,EAAI,IAAMI,EAC7B1K,EAAI,IAAMsK,EAAI,GAAKA,EAAI,IAAMI,GACpBJ,EAAI,GAAKA,EAAI,KACtBI,EAAiD,EAA7CvL,KAAKoD,KAAK,EAAM+H,EAAI,GAAKA,EAAI,GAAKA,EAAI,KAC1CtK,EAAI,IAAMsK,EAAI,GAAKA,EAAI,IAAMI,EAC7B1K,EAAI,IAAMsK,EAAI,GAAKA,EAAI,IAAMI,EAC7B1K,EAAI,GAAK,IAAO0K,EAChB1K,EAAI,IAAMsK,EAAI,GAAKA,EAAI,IAAMI,IAE7BA,EAAiD,EAA7CvL,KAAKoD,KAAK,EAAM+H,EAAI,IAAMA,EAAI,GAAKA,EAAI,IAC3CtK,EAAI,IAAMsK,EAAI,GAAKA,EAAI,IAAMI,EAC7B1K,EAAI,IAAMsK,EAAI,GAAKA,EAAI,IAAMI,EAC7B1K,EAAI,IAAMsK,EAAI,GAAKA,EAAI,IAAMI,EAC7B1K,EAAI,GAAK,IAAO0K,GAGX1K,EAoBF,SAAS2K,EAA6B3K,EAAK+F,EAAG/D,EAAGL,GAElDgE,IAAAA,EAAII,EAAE,GACNH,EAAIG,EAAE,GACNC,EAAID,EAAE,GACNE,EAAIF,EAAE,GACNG,EAAKP,EAAIA,EACTQ,EAAKP,EAAIA,EACTQ,EAAKJ,EAAIA,EACTK,EAAKV,EAAIO,EACTqD,EAAK5D,EAAIQ,EACTqD,EAAK7D,EAAIS,EACTG,EAAKX,EAAIO,EACTsD,EAAK7D,EAAIQ,EACTM,EAAKV,EAAII,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EACTwE,EAAKjJ,EAAE,GACPkJ,EAAKlJ,EAAE,GACPmJ,EAAKnJ,EAAE,GAiBJ3B,OAhBPA,EAAI,IAAM,GAAKuG,EAAKG,IAAOkE,EAC3B5K,EAAI,IAAMuJ,EAAK1C,GAAM+D,EACrB5K,EAAI,IAAMwJ,EAAK5C,GAAMgE,EACrB5K,EAAI,GAAK,EACTA,EAAI,IAAMuJ,EAAK1C,GAAMgE,EACrB7K,EAAI,IAAM,GAAKqG,EAAKK,IAAOmE,EAC3B7K,EAAI,IAAMyJ,EAAK9C,GAAMkE,EACrB7K,EAAI,GAAK,EACTA,EAAI,IAAMwJ,EAAK5C,GAAMkE,EACrB9K,EAAI,IAAMyJ,EAAK9C,GAAMmE,EACrB9K,EAAI,KAAO,GAAKqG,EAAKE,IAAOuE,EAC5B9K,EAAI,IAAM,EACVA,EAAI,IAAMgC,EAAE,GACZhC,EAAI,IAAMgC,EAAE,GACZhC,EAAI,IAAMgC,EAAE,GACZhC,EAAI,IAAM,EACHA,EAuBF,SAAS+K,EAAmC/K,EAAK+F,EAAG/D,EAAGL,EAAGqJ,GAE3DrF,IAAAA,EAAII,EAAE,GACNH,EAAIG,EAAE,GACNC,EAAID,EAAE,GACNE,EAAIF,EAAE,GACNG,EAAKP,EAAIA,EACTQ,EAAKP,EAAIA,EACTQ,EAAKJ,EAAIA,EACTK,EAAKV,EAAIO,EACTqD,EAAK5D,EAAIQ,EACTqD,EAAK7D,EAAIS,EACTG,EAAKX,EAAIO,EACTsD,EAAK7D,EAAIQ,EACTM,EAAKV,EAAII,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EACTwE,EAAKjJ,EAAE,GACPkJ,EAAKlJ,EAAE,GACPmJ,EAAKnJ,EAAE,GACPsJ,EAAKD,EAAE,GACPE,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPI,GAAQ,GAAK7E,EAAKG,IAAOkE,EACzBS,GAAQ9B,EAAK1C,GAAM+D,EACnBU,GAAQ9B,EAAK5C,GAAMgE,EACnBW,GAAQhC,EAAK1C,GAAMgE,EACnBW,GAAQ,GAAKnF,EAAKK,IAAOmE,EACzBY,GAAQhC,EAAK9C,GAAMkE,EACnBa,GAAQlC,EAAK5C,GAAMkE,EACnBa,GAAQlC,EAAK9C,GAAMmE,EACnBc,GAAS,GAAKvF,EAAKE,IAAOuE,EAiBvB9K,OAhBPA,EAAI,GAAKoL,EACTpL,EAAI,GAAKqL,EACTrL,EAAI,GAAKsL,EACTtL,EAAI,GAAK,EACTA,EAAI,GAAKuL,EACTvL,EAAI,GAAKwL,EACTxL,EAAI,GAAKyL,EACTzL,EAAI,GAAK,EACTA,EAAI,GAAK0L,EACT1L,EAAI,GAAK2L,EACT3L,EAAI,IAAM4L,EACV5L,EAAI,IAAM,EACVA,EAAI,IAAMgC,EAAE,GAAKiJ,GAAMG,EAAOH,EAAKM,EAAOL,EAAKQ,EAAOP,GACtDnL,EAAI,IAAMgC,EAAE,GAAKkJ,GAAMG,EAAOJ,EAAKO,EAAON,EAAKS,EAAOR,GACtDnL,EAAI,IAAMgC,EAAE,GAAKmJ,GAAMG,EAAOL,EAAKQ,EAAOP,EAAKU,EAAQT,GACvDnL,EAAI,IAAM,EACHA,EAWF,SAAS8F,EAAS9F,EAAK+F,GACxBJ,IAAAA,EAAII,EAAE,GACNH,EAAIG,EAAE,GACNC,EAAID,EAAE,GACNE,EAAIF,EAAE,GACNG,EAAKP,EAAIA,EACTQ,EAAKP,EAAIA,EACTQ,EAAKJ,EAAIA,EACTK,EAAKV,EAAIO,EACTI,EAAKV,EAAIM,EACTK,EAAKX,EAAIO,EACTK,EAAKR,EAAIE,EACTO,EAAKT,EAAIG,EACTO,EAAKV,EAAII,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EAiBNpG,OAhBPA,EAAI,GAAK,EAAIuG,EAAKG,EAClB1G,EAAI,GAAKsG,EAAKO,EACd7G,EAAI,GAAKwG,EAAKI,EACd5G,EAAI,GAAK,EACTA,EAAI,GAAKsG,EAAKO,EACd7G,EAAI,GAAK,EAAIqG,EAAKK,EAClB1G,EAAI,GAAKyG,EAAKE,EACd3G,EAAI,GAAK,EACTA,EAAI,GAAKwG,EAAKI,EACd5G,EAAI,GAAKyG,EAAKE,EACd3G,EAAI,IAAM,EAAIqG,EAAKE,EACnBvG,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAeF,SAAS6L,EAAQ7L,EAAK8L,EAAMC,EAAOC,EAAQC,EAAKC,EAAMC,GACvDC,IAAAA,EAAK,GAAKL,EAAQD,GAClBO,EAAK,GAAKJ,EAAMD,GAChBM,EAAK,GAAKJ,EAAOC,GAiBdnM,OAhBPA,EAAI,GAAY,EAAPkM,EAAWE,EACpBpM,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAY,EAAPkM,EAAWG,EACpBrM,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM+L,EAAQD,GAAQM,EAC1BpM,EAAI,IAAMiM,EAAMD,GAAUK,EAC1BrM,EAAI,KAAOmM,EAAMD,GAAQI,EACzBtM,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAMmM,EAAMD,EAAO,EAAII,EAC3BtM,EAAI,IAAM,EACHA,EAcF,SAASuM,EAAYvM,EAAKwM,EAAMC,EAAQP,EAAMC,GAC/CO,IACAJ,EADAI,EAAI,EAAMvN,KAAKwN,IAAIH,EAAO,GA0BvBxM,OAxBPA,EAAI,GAAK0M,EAAID,EACbzM,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK0M,EACT1M,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EAEC,MAAPmM,GAAeA,IAAQS,EAAAA,GACzBN,EAAK,GAAKJ,EAAOC,GACjBnM,EAAI,KAAOmM,EAAMD,GAAQI,EACzBtM,EAAI,IAAM,EAAImM,EAAMD,EAAOI,IAE3BtM,EAAI,KAAO,EACXA,EAAI,KAAO,EAAIkM,GAGVlM,EAcF,SAAS6M,EAA2B7M,EAAK8M,EAAKZ,EAAMC,GACrDY,IAAAA,EAAQ5N,KAAKwN,IAAIG,EAAIE,UAAY7N,KAAKK,GAAK,KAC3CyN,EAAU9N,KAAKwN,IAAIG,EAAII,YAAc/N,KAAKK,GAAK,KAC/C2N,EAAUhO,KAAKwN,IAAIG,EAAIM,YAAcjO,KAAKK,GAAK,KAC/C6N,EAAWlO,KAAKwN,IAAIG,EAAIQ,aAAenO,KAAKK,GAAK,KACjD+N,EAAS,GAAOJ,EAAUE,GAC1BG,EAAS,GAAOT,EAAQE,GAiBrBjN,OAhBPA,EAAI,GAAKuN,EACTvN,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAKwN,EACTxN,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,KAAQmN,EAAUE,GAAYE,EAAS,GAC3CvN,EAAI,IAAM+M,EAAQE,GAAWO,EAAS,GACtCxN,EAAI,IAAMmM,GAAOD,EAAOC,GACxBnM,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAMmM,EAAMD,GAAQA,EAAOC,GAC/BnM,EAAI,IAAM,EACHA,EAeF,SAASyN,EAAMzN,EAAK8L,EAAMC,EAAOC,EAAQC,EAAKC,EAAMC,GACrDuB,IAAAA,EAAK,GAAK5B,EAAOC,GACjB4B,EAAK,GAAK3B,EAASC,GACnBK,EAAK,GAAKJ,EAAOC,GAiBdnM,OAhBPA,EAAI,IAAM,EAAI0N,EACd1N,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EAAI2N,EACd3N,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EAAIsM,EACdtM,EAAI,IAAM,EACVA,EAAI,KAAO8L,EAAOC,GAAS2B,EAC3B1N,EAAI,KAAOiM,EAAMD,GAAU2B,EAC3B3N,EAAI,KAAOmM,EAAMD,GAAQI,EACzBtM,EAAI,IAAM,EACHA,EAaF,SAAS4N,EAAO5N,EAAK6N,EAAKC,EAAQC,GACnCC,IAAAA,EAAIC,EAAI/H,EAAIgI,EAAIC,EAAIhI,EAAIiI,EAAIC,EAAIjI,EAAI2C,EACpCuF,EAAOT,EAAI,GACXU,EAAOV,EAAI,GACXW,EAAOX,EAAI,GACXY,EAAMV,EAAG,GACTW,EAAMX,EAAG,GACTY,EAAMZ,EAAG,GACTa,EAAUd,EAAO,GACjBe,EAAUf,EAAO,GACjBgB,EAAUhB,EAAO,GAEjB3O,OAAAA,KAAKU,IAAIyO,EAAOM,GAAW3O,EAASnB,SAAWK,KAAKU,IAAI0O,EAAOM,GAAW5O,EAASnB,SAAWK,KAAKU,IAAI2O,EAAOM,GAAW7O,EAASnB,QAC7HsB,EAASJ,IAGlBoO,EAAKE,EAAOM,EACZP,EAAKE,EAAOM,EACZzI,EAAKoI,EAAOM,EAKZd,EAAKU,GADLtI,GAHA2C,EAAM,EAAI5J,KAAKoD,KAAK6L,EAAKA,EAAKC,EAAKA,EAAKjI,EAAKA,IAI7BuI,GAFhBN,GAAMtF,GAGNkF,EAAKU,GAJLP,GAAMrF,GAIU0F,EAAMrI,EACtBF,EAAKuI,EAAMJ,EAAKK,EAAMN,GACtBrF,EAAM5J,KAAKoD,KAAKyL,EAAKA,EAAKC,EAAKA,EAAK/H,EAAKA,KAQvC8H,GADAjF,EAAM,EAAIA,EAEVkF,GAAMlF,EACN7C,GAAM6C,IAPNiF,EAAK,EACLC,EAAK,EACL/H,EAAK,GAQPgI,EAAKG,EAAKnI,EAAKE,EAAK6H,EACpBE,EAAK/H,EAAK4H,EAAKI,EAAKlI,EACpBC,EAAKiI,EAAKH,EAAKI,EAAKL,GACpBjF,EAAM5J,KAAKoD,KAAK2L,EAAKA,EAAKC,EAAKA,EAAKhI,EAAKA,KAQvC+H,GADAnF,EAAM,EAAIA,EAEVoF,GAAMpF,EACN5C,GAAM4C,IAPNmF,EAAK,EACLC,EAAK,EACLhI,EAAK,GAQPnG,EAAI,GAAKgO,EACThO,EAAI,GAAKkO,EACTlO,EAAI,GAAKoO,EACTpO,EAAI,GAAK,EACTA,EAAI,GAAKiO,EACTjO,EAAI,GAAKmO,EACTnO,EAAI,GAAKqO,EACTrO,EAAI,GAAK,EACTA,EAAI,GAAKkG,EACTlG,EAAI,GAAKmG,EACTnG,EAAI,IAAMoG,EACVpG,EAAI,IAAM,EACVA,EAAI,MAAQgO,EAAKM,EAAOL,EAAKM,EAAOrI,EAAKsI,GACzCxO,EAAI,MAAQkO,EAAKI,EAAOH,EAAKI,EAAOpI,EAAKqI,GACzCxO,EAAI,MAAQoO,EAAKE,EAAOD,EAAKE,EAAOnI,EAAKoI,GACzCxO,EAAI,IAAM,EACHA,GAYF,SAAS+O,EAAS/O,EAAK6N,EAAKmB,EAAQjB,GACrCO,IAAAA,EAAOT,EAAI,GACXU,EAAOV,EAAI,GACXW,EAAOX,EAAI,GACXY,EAAMV,EAAG,GACTW,EAAMX,EAAG,GACTY,EAAMZ,EAAG,GACTK,EAAKE,EAAOU,EAAO,GACnBX,EAAKE,EAAOS,EAAO,GACnB5I,EAAKoI,EAAOQ,EAAO,GACnBjG,EAAMqF,EAAKA,EAAKC,EAAKA,EAAKjI,EAAKA,EAE/B2C,EAAM,IAERqF,GADArF,EAAM,EAAI5J,KAAKoD,KAAKwG,GAEpBsF,GAAMtF,EACN3C,GAAM2C,GAGJiF,IAAAA,EAAKU,EAAMtI,EAAKuI,EAAMN,EACtBJ,EAAKU,EAAMP,EAAKK,EAAMrI,EACtBF,EAAKuI,EAAMJ,EAAKK,EAAMN,EA0BnBpO,OAzBP+I,EAAMiF,EAAKA,EAAKC,EAAKA,EAAK/H,EAAKA,GAErB,IAER8H,GADAjF,EAAM,EAAI5J,KAAKoD,KAAKwG,GAEpBkF,GAAMlF,EACN7C,GAAM6C,GAGR/I,EAAI,GAAKgO,EACThO,EAAI,GAAKiO,EACTjO,EAAI,GAAKkG,EACTlG,EAAI,GAAK,EACTA,EAAI,GAAKqO,EAAKnI,EAAKE,EAAK6H,EACxBjO,EAAI,GAAKoG,EAAK4H,EAAKI,EAAKlI,EACxBlG,EAAI,GAAKoO,EAAKH,EAAKI,EAAKL,EACxBhO,EAAI,GAAK,EACTA,EAAI,GAAKoO,EACTpO,EAAI,GAAKqO,EACTrO,EAAI,IAAMoG,EACVpG,EAAI,IAAM,EACVA,EAAI,IAAMsO,EACVtO,EAAI,IAAMuO,EACVvO,EAAI,IAAMwO,EACVxO,EAAI,IAAM,EACHA,EAUF,SAASqC,EAAI3C,GACX,MAAA,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,IAAM,KAAOA,EAAE,IAAM,KAAOA,EAAE,IAAM,KAAOA,EAAE,IAAM,KAAOA,EAAE,IAAM,KAAOA,EAAE,IAAM,IAS3O,SAAS4C,EAAK5C,GACZP,OAAAA,KAAKoD,KAAKpD,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,GAAI,GAAKP,KAAKqD,IAAI9C,EAAE,IAAK,GAAKP,KAAKqD,IAAI9C,EAAE,IAAK,GAAKP,KAAKqD,IAAI9C,EAAE,IAAK,GAAKP,KAAKqD,IAAI9C,EAAE,IAAK,GAAKP,KAAKqD,IAAI9C,EAAE,IAAK,GAAKP,KAAKqD,IAAI9C,EAAE,IAAK,IAW7U,SAASmD,EAAI7C,EAAKN,EAAGE,GAiBnBI,OAhBPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,IAAMN,EAAE,IAAME,EAAE,IACpBI,EAAI,IAAMN,EAAE,IAAME,EAAE,IACpBI,EAAI,IAAMN,EAAE,IAAME,EAAE,IACpBI,EAAI,IAAMN,EAAE,IAAME,EAAE,IACpBI,EAAI,IAAMN,EAAE,IAAME,EAAE,IACpBI,EAAI,IAAMN,EAAE,IAAME,EAAE,IACbI,EAWF,SAAS8C,EAAS9C,EAAKN,EAAGE,GAiBxBI,OAhBPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,IAAMN,EAAE,IAAME,EAAE,IACpBI,EAAI,IAAMN,EAAE,IAAME,EAAE,IACpBI,EAAI,IAAMN,EAAE,IAAME,EAAE,IACpBI,EAAI,IAAMN,EAAE,IAAME,EAAE,IACpBI,EAAI,IAAMN,EAAE,IAAME,EAAE,IACpBI,EAAI,IAAMN,EAAE,IAAME,EAAE,IACbI,EAWF,SAASgD,EAAehD,EAAKN,EAAGE,GAiB9BI,OAhBPA,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,IAAMN,EAAE,IAAME,EAClBI,EAAI,IAAMN,EAAE,IAAME,EAClBI,EAAI,IAAMN,EAAE,IAAME,EAClBI,EAAI,IAAMN,EAAE,IAAME,EAClBI,EAAI,IAAMN,EAAE,IAAME,EAClBI,EAAI,IAAMN,EAAE,IAAME,EACXI,EAYF,SAASiD,EAAqBjD,EAAKN,EAAGE,EAAGmC,GAiBvC/B,OAhBPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,IAAMN,EAAE,IAAME,EAAE,IAAMmC,EAC1B/B,EAAI,IAAMN,EAAE,IAAME,EAAE,IAAMmC,EAC1B/B,EAAI,IAAMN,EAAE,IAAME,EAAE,IAAMmC,EAC1B/B,EAAI,IAAMN,EAAE,IAAME,EAAE,IAAMmC,EAC1B/B,EAAI,IAAMN,EAAE,IAAME,EAAE,IAAMmC,EAC1B/B,EAAI,IAAMN,EAAE,IAAME,EAAE,IAAMmC,EACnB/B,EAUF,SAAS+C,EAAYrD,EAAGE,GACtBF,OAAAA,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,MAAQE,EAAE,KAAOF,EAAE,MAAQE,EAAE,KAAOF,EAAE,MAAQE,EAAE,KAAOF,EAAE,MAAQE,EAAE,KAAOF,EAAE,MAAQE,EAAE,KAAOF,EAAE,MAAQE,EAAE,IAUvR,SAASD,EAAOD,EAAGE,GACpBkB,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACPqB,EAAKrB,EAAE,GACPsB,EAAKtB,EAAE,GACPmE,EAAKnE,EAAE,GACPoE,EAAKpE,EAAE,GACPsI,EAAKtI,EAAE,GACPuI,EAAKvI,EAAE,GACPwI,EAAKxI,EAAE,GACPuP,EAAKvP,EAAE,GACPmF,EAAMnF,EAAE,IACRoF,EAAMpF,EAAE,IACRiF,EAAMjF,EAAE,IACRsH,EAAMtH,EAAE,IACRwP,EAAMxP,EAAE,IACRyP,EAAMzP,EAAE,IACR2B,EAAKzB,EAAE,GACP0B,EAAK1B,EAAE,GACP2B,EAAK3B,EAAE,GACP4B,EAAK5B,EAAE,GACPmE,EAAKnE,EAAE,GACPoE,EAAKpE,EAAE,GACPuI,EAAKvI,EAAE,GACPwI,EAAKxI,EAAE,GACPyI,EAAKzI,EAAE,GACPwP,EAAKxP,EAAE,GACP2F,EAAM3F,EAAE,IACRuF,EAAMvF,EAAE,IACR4F,EAAM5F,EAAE,IACRyP,EAAMzP,EAAE,IACR0P,EAAM1P,EAAE,IACR2P,EAAM3P,EAAE,IACLT,OAAAA,KAAKU,IAAIiB,EAAKO,IAAOpB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIiB,GAAK3B,KAAKU,IAAIwB,KAAQlC,KAAKU,IAAIe,EAAKU,IAAOrB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIe,GAAKzB,KAAKU,IAAIyB,KAAQnC,KAAKU,IAAIkB,EAAKQ,IAAOtB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIkB,GAAK5B,KAAKU,IAAI0B,KAAQpC,KAAKU,IAAImB,EAAKQ,IAAOvB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImB,GAAK7B,KAAKU,IAAI2B,KAAQrC,KAAKU,IAAIgE,EAAKE,IAAO9D,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIgE,GAAK1E,KAAKU,IAAIkE,KAAQ5E,KAAKU,IAAIiE,EAAKE,IAAO/D,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIiE,GAAK3E,KAAKU,IAAImE,KAAQ7E,KAAKU,IAAImI,EAAKG,IAAOlI,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImI,GAAK7I,KAAKU,IAAIsI,KAAQhJ,KAAKU,IAAIoI,EAAKG,IAAOnI,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIoI,GAAK9I,KAAKU,IAAIuI,KAAQjJ,KAAKU,IAAIqI,EAAKG,IAAOpI,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIqI,GAAK/I,KAAKU,IAAIwI,KAAQlJ,KAAKU,IAAIoP,EAAKG,IAAOnP,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIoP,GAAK9P,KAAKU,IAAIuP,KAAQjQ,KAAKU,IAAIgF,EAAMU,IAAQtF,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIgF,GAAM1F,KAAKU,IAAI0F,KAASpG,KAAKU,IAAIiF,EAAMK,IAAQlF,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIiF,GAAM3F,KAAKU,IAAIsF,KAAShG,KAAKU,IAAI8E,EAAMa,IAAQvF,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI8E,GAAMxF,KAAKU,IAAI2F,KAASrG,KAAKU,IAAImH,EAAMqI,IAAQpP,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImH,GAAM7H,KAAKU,IAAIwP,KAASlQ,KAAKU,IAAIqP,EAAMI,IAAQrP,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIqP,GAAM/P,KAAKU,IAAIyP,KAASnQ,KAAKU,IAAIsP,EAAMI,IAAQtP,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIsP,GAAMhQ,KAAKU,IAAI0P,IAOj2C,IAAIrM,EAAM9B,EAMV,QAAA,IAAA,EAAA,IAAI+B,EAAML,EAAV,QAAA,IAAA;;ACphCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,OAAA,EAAA,QAAA,WAAA,EAAA,QAAA,KAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,KAAA,EAAA,QAAA,MAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,MAAA,EAAA,QAAA,MAAA,EAAA,QAAA,YAAA,EAAA,QAAA,SAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,cAAA,EAAA,QAAA,OAAA,EAAA,QAAA,QAAA,EAAA,QAAA,UAAA,EAAA,QAAA,IAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,QAAA,EAAA,QAAA,OAAA,EAAA,QAAA,OAAA,EAAA,QAAA,cAAA,EAAA,QAAA,cAAA,EAAA,QAAA,cAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,IAAA,EAAA,QAAA,YAAA,EAAA,QAAA,OAAA,EAAA,QAAA,QAAA,QAAA,OAAA,QAAA,IAAA,QAAA,QAAA,QAAA,KAAA,QAAA,IAAA,QAAA,IAAA,QAAA,SAAA,EArvBP,IAAA,EAAA,EAAA,QAAA,gBAqvBO,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,OAAA,yBAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,IAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,EAzuBA,SAAS/C,IACVC,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAQ3BiB,OANHC,EAASlB,YAAcC,eACzBgB,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGJA,EASF,SAASE,EAAMR,GAChBM,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAI3BiB,OAHPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACJM,EASF,SAASwP,EAAO9P,GACjBiG,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GACNsG,EAAItG,EAAE,GACHP,OAAAA,KAAKoD,KAAKoD,EAAIA,EAAIC,EAAIA,EAAII,EAAIA,GAWhC,SAAS3F,EAAWsF,EAAGC,EAAGI,GAC3BhG,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAI3BiB,OAHPA,EAAI,GAAK2F,EACT3F,EAAI,GAAK4F,EACT5F,EAAI,GAAKgG,EACFhG,EAUF,SAASG,EAAKH,EAAKN,GAIjBM,OAHPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACJM,EAYF,SAASU,EAAIV,EAAK2F,EAAGC,EAAGI,GAItBhG,OAHPA,EAAI,GAAK2F,EACT3F,EAAI,GAAK4F,EACT5F,EAAI,GAAKgG,EACFhG,EAWF,SAAS6C,EAAI7C,EAAKN,EAAGE,GAInBI,OAHPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAWF,SAAS8C,EAAS9C,EAAKN,EAAGE,GAIxBI,OAHPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAWF,SAASoB,EAASpB,EAAKN,EAAGE,GAIxBI,OAHPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAWF,SAASyP,EAAOzP,EAAKN,EAAGE,GAItBI,OAHPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAUF,SAAS0P,EAAK1P,EAAKN,GAIjBM,OAHPA,EAAI,GAAKb,KAAKuQ,KAAKhQ,EAAE,IACrBM,EAAI,GAAKb,KAAKuQ,KAAKhQ,EAAE,IACrBM,EAAI,GAAKb,KAAKuQ,KAAKhQ,EAAE,IACdM,EAUF,SAAS2P,EAAM3P,EAAKN,GAIlBM,OAHPA,EAAI,GAAKb,KAAKwQ,MAAMjQ,EAAE,IACtBM,EAAI,GAAKb,KAAKwQ,MAAMjQ,EAAE,IACtBM,EAAI,GAAKb,KAAKwQ,MAAMjQ,EAAE,IACfM,EAWF,SAAS4P,EAAI5P,EAAKN,EAAGE,GAInBI,OAHPA,EAAI,GAAKb,KAAKyQ,IAAIlQ,EAAE,GAAIE,EAAE,IAC1BI,EAAI,GAAKb,KAAKyQ,IAAIlQ,EAAE,GAAIE,EAAE,IAC1BI,EAAI,GAAKb,KAAKyQ,IAAIlQ,EAAE,GAAIE,EAAE,IACnBI,EAWF,SAASF,EAAIE,EAAKN,EAAGE,GAInBI,OAHPA,EAAI,GAAKb,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IAC1BI,EAAI,GAAKb,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IAC1BI,EAAI,GAAKb,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IACnBI,EAUF,SAAS6P,EAAM7P,EAAKN,GAIlBM,OAHPA,EAAI,GAAKb,KAAK0Q,MAAMnQ,EAAE,IACtBM,EAAI,GAAKb,KAAK0Q,MAAMnQ,EAAE,IACtBM,EAAI,GAAKb,KAAK0Q,MAAMnQ,EAAE,IACfM,EAWF,SAAS+B,EAAM/B,EAAKN,EAAGE,GAIrBI,OAHPA,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EACTI,EAYF,SAAS8P,EAAY9P,EAAKN,EAAGE,EAAGmC,GAI9B/B,OAHPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EAChB/B,EAUF,SAAS+P,EAASrQ,EAAGE,GACtB+F,IAAAA,EAAI/F,EAAE,GAAKF,EAAE,GACbkG,EAAIhG,EAAE,GAAKF,EAAE,GACbsG,EAAIpG,EAAE,GAAKF,EAAE,GACVP,OAAAA,KAAKoD,KAAKoD,EAAIA,EAAIC,EAAIA,EAAII,EAAIA,GAUhC,SAASgK,EAAgBtQ,EAAGE,GAC7B+F,IAAAA,EAAI/F,EAAE,GAAKF,EAAE,GACbkG,EAAIhG,EAAE,GAAKF,EAAE,GACbsG,EAAIpG,EAAE,GAAKF,EAAE,GACViG,OAAAA,EAAIA,EAAIC,EAAIA,EAAII,EAAIA,EAStB,SAASiK,EAAcvQ,GACxBiG,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GACNsG,EAAItG,EAAE,GACHiG,OAAAA,EAAIA,EAAIC,EAAIA,EAAII,EAAIA,EAUtB,SAASkK,EAAOlQ,EAAKN,GAInBM,OAHPA,EAAI,IAAMN,EAAE,GACZM,EAAI,IAAMN,EAAE,GACZM,EAAI,IAAMN,EAAE,GACLM,EAUF,SAASmQ,EAAQnQ,EAAKN,GAIpBM,OAHPA,EAAI,GAAK,EAAMN,EAAE,GACjBM,EAAI,GAAK,EAAMN,EAAE,GACjBM,EAAI,GAAK,EAAMN,EAAE,GACVM,EAUF,SAASoQ,EAAUpQ,EAAKN,GACzBiG,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GACNsG,EAAItG,EAAE,GACNqJ,EAAMpD,EAAIA,EAAIC,EAAIA,EAAII,EAAIA,EAUvBhG,OARH+I,EAAM,IAERA,EAAM,EAAI5J,KAAKoD,KAAKwG,IAGtB/I,EAAI,GAAKN,EAAE,GAAKqJ,EAChB/I,EAAI,GAAKN,EAAE,GAAKqJ,EAChB/I,EAAI,GAAKN,EAAE,GAAKqJ,EACT/I,EAUF,SAASqQ,EAAI3Q,EAAGE,GACdF,OAAAA,EAAE,GAAKE,EAAE,GAAKF,EAAE,GAAKE,EAAE,GAAKF,EAAE,GAAKE,EAAE,GAWvC,SAAS0Q,EAAMtQ,EAAKN,EAAGE,GACxBoK,IAAAA,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GACPwK,EAAKxK,EAAE,GACPkK,EAAKhK,EAAE,GACPiK,EAAKjK,EAAE,GACPkK,EAAKlK,EAAE,GAIJI,OAHPA,EAAI,GAAKiK,EAAKH,EAAKI,EAAKL,EACxB7J,EAAI,GAAKkK,EAAKN,EAAKI,EAAKF,EACxB9J,EAAI,GAAKgK,EAAKH,EAAKI,EAAKL,EACjB5J,EAYF,SAASuQ,EAAKvQ,EAAKN,EAAGE,EAAGkJ,GAC1BkB,IAAAA,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GACPwK,EAAKxK,EAAE,GAIJM,OAHPA,EAAI,GAAKgK,EAAKlB,GAAKlJ,EAAE,GAAKoK,GAC1BhK,EAAI,GAAKiK,EAAKnB,GAAKlJ,EAAE,GAAKqK,GAC1BjK,EAAI,GAAKkK,EAAKpB,GAAKlJ,EAAE,GAAKsK,GACnBlK,EAcF,SAASwQ,EAAQxQ,EAAKN,EAAGE,EAAGiC,EAAGuB,EAAG0F,GACnC2H,IAAAA,EAAe3H,EAAIA,EACnB4H,EAAUD,GAAgB,EAAI3H,EAAI,GAAK,EACvC6H,EAAUF,GAAgB3H,EAAI,GAAKA,EACnC8H,EAAUH,GAAgB3H,EAAI,GAC9B+H,EAAUJ,GAAgB,EAAI,EAAI3H,GAI/B9I,OAHPA,EAAI,GAAKN,EAAE,GAAKgR,EAAU9Q,EAAE,GAAK+Q,EAAU9O,EAAE,GAAK+O,EAAUxN,EAAE,GAAKyN,EACnE7Q,EAAI,GAAKN,EAAE,GAAKgR,EAAU9Q,EAAE,GAAK+Q,EAAU9O,EAAE,GAAK+O,EAAUxN,EAAE,GAAKyN,EACnE7Q,EAAI,GAAKN,EAAE,GAAKgR,EAAU9Q,EAAE,GAAK+Q,EAAU9O,EAAE,GAAK+O,EAAUxN,EAAE,GAAKyN,EAC5D7Q,EAcF,SAAS8Q,EAAO9Q,EAAKN,EAAGE,EAAGiC,EAAGuB,EAAG0F,GAClCiI,IAAAA,EAAgB,EAAIjI,EACpBkI,EAAwBD,EAAgBA,EACxCN,EAAe3H,EAAIA,EACnB4H,EAAUM,EAAwBD,EAClCJ,EAAU,EAAI7H,EAAIkI,EAClBJ,EAAU,EAAIH,EAAeM,EAC7BF,EAAUJ,EAAe3H,EAItB9I,OAHPA,EAAI,GAAKN,EAAE,GAAKgR,EAAU9Q,EAAE,GAAK+Q,EAAU9O,EAAE,GAAK+O,EAAUxN,EAAE,GAAKyN,EACnE7Q,EAAI,GAAKN,EAAE,GAAKgR,EAAU9Q,EAAE,GAAK+Q,EAAU9O,EAAE,GAAK+O,EAAUxN,EAAE,GAAKyN,EACnE7Q,EAAI,GAAKN,EAAE,GAAKgR,EAAU9Q,EAAE,GAAK+Q,EAAU9O,EAAE,GAAK+O,EAAUxN,EAAE,GAAKyN,EAC5D7Q,EAUF,SAASZ,EAAOY,EAAK+B,GAC1BA,EAAQA,GAAS,EACbkP,IAAAA,EAAwB,EAApBhR,EAASf,SAAiBC,KAAKK,GACnCwG,EAAwB,EAApB/F,EAASf,SAAiB,EAC9BgS,EAAS/R,KAAKoD,KAAK,EAAMyD,EAAIA,GAAKjE,EAI/B/B,OAHPA,EAAI,GAAKb,KAAK2C,IAAImP,GAAKC,EACvBlR,EAAI,GAAKb,KAAKyC,IAAIqP,GAAKC,EACvBlR,EAAI,GAAKgG,EAAIjE,EACN/B,EAYF,SAASmR,EAAcnR,EAAKN,EAAG0R,GAChCzL,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GACNsG,EAAItG,EAAE,GACNuG,EAAImL,EAAE,GAAKzL,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,IAAMpL,EAAIoL,EAAE,IAKrCpR,OAJPiG,EAAIA,GAAK,EACTjG,EAAI,IAAMoR,EAAE,GAAKzL,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,GAAKpL,EAAIoL,EAAE,KAAOnL,EACpDjG,EAAI,IAAMoR,EAAE,GAAKzL,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,GAAKpL,EAAIoL,EAAE,KAAOnL,EACpDjG,EAAI,IAAMoR,EAAE,GAAKzL,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,IAAMpL,EAAIoL,EAAE,KAAOnL,EAC9CjG,EAWF,SAASqR,EAAcrR,EAAKN,EAAG0R,GAChCzL,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GACNsG,EAAItG,EAAE,GAIHM,OAHPA,EAAI,GAAK2F,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,GAAKpL,EAAIoL,EAAE,GACrCpR,EAAI,GAAK2F,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,GAAKpL,EAAIoL,EAAE,GACrCpR,EAAI,GAAK2F,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,GAAKpL,EAAIoL,EAAE,GAC9BpR,EAYF,SAASsR,EAActR,EAAKN,EAAGqG,GAEhCwL,IAAAA,EAAKxL,EAAE,GACPyL,EAAKzL,EAAE,GACP0L,EAAK1L,EAAE,GACP2L,EAAK3L,EAAE,GACPJ,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GACNsG,EAAItG,EAAE,GAGNiS,EAAMH,EAAKxL,EAAIyL,EAAK7L,EACpBgM,EAAMH,EAAK9L,EAAI4L,EAAKvL,EACpB6L,EAAMN,EAAK3L,EAAI4L,EAAK7L,EAEpBmM,EAAON,EAAKK,EAAMJ,EAAKG,EACvBG,EAAON,EAAKE,EAAMJ,EAAKM,EACvBG,EAAOT,EAAKK,EAAMJ,EAAKG,EAEvBM,EAAU,EAALP,EAYF1R,OAXP2R,GAAOM,EACPL,GAAOK,EACPJ,GAAOI,EAEPH,GAAQ,EACRC,GAAQ,EACRC,GAAQ,EAERhS,EAAI,GAAK2F,EAAIgM,EAAMG,EACnB9R,EAAI,GAAK4F,EAAIgM,EAAMG,EACnB/R,EAAI,GAAKgG,EAAI6L,EAAMG,EACZhS,EAWF,SAASgJ,EAAQhJ,EAAKN,EAAGE,EAAGiC,GAC7BqQ,IAAAA,EAAI,GACJjB,EAAI,GAaDjR,OAXPkS,EAAE,GAAKxS,EAAE,GAAKE,EAAE,GAChBsS,EAAE,GAAKxS,EAAE,GAAKE,EAAE,GAChBsS,EAAE,GAAKxS,EAAE,GAAKE,EAAE,GAEhBqR,EAAE,GAAKiB,EAAE,GACTjB,EAAE,GAAKiB,EAAE,GAAK/S,KAAK2C,IAAID,GAAKqQ,EAAE,GAAK/S,KAAKyC,IAAIC,GAC5CoP,EAAE,GAAKiB,EAAE,GAAK/S,KAAKyC,IAAIC,GAAKqQ,EAAE,GAAK/S,KAAK2C,IAAID,GAE5C7B,EAAI,GAAKiR,EAAE,GAAKrR,EAAE,GAClBI,EAAI,GAAKiR,EAAE,GAAKrR,EAAE,GAClBI,EAAI,GAAKiR,EAAE,GAAKrR,EAAE,GACXI,EAWF,SAASiJ,EAAQjJ,EAAKN,EAAGE,EAAGiC,GAC7BqQ,IAAAA,EAAI,GACJjB,EAAI,GAaDjR,OAXPkS,EAAE,GAAKxS,EAAE,GAAKE,EAAE,GAChBsS,EAAE,GAAKxS,EAAE,GAAKE,EAAE,GAChBsS,EAAE,GAAKxS,EAAE,GAAKE,EAAE,GAEhBqR,EAAE,GAAKiB,EAAE,GAAK/S,KAAKyC,IAAIC,GAAKqQ,EAAE,GAAK/S,KAAK2C,IAAID,GAC5CoP,EAAE,GAAKiB,EAAE,GACTjB,EAAE,GAAKiB,EAAE,GAAK/S,KAAK2C,IAAID,GAAKqQ,EAAE,GAAK/S,KAAKyC,IAAIC,GAE5C7B,EAAI,GAAKiR,EAAE,GAAKrR,EAAE,GAClBI,EAAI,GAAKiR,EAAE,GAAKrR,EAAE,GAClBI,EAAI,GAAKiR,EAAE,GAAKrR,EAAE,GACXI,EAWF,SAASkJ,EAAQlJ,EAAKN,EAAGE,EAAGiC,GAC7BqQ,IAAAA,EAAI,GACJjB,EAAI,GAaDjR,OAXPkS,EAAE,GAAKxS,EAAE,GAAKE,EAAE,GAChBsS,EAAE,GAAKxS,EAAE,GAAKE,EAAE,GAChBsS,EAAE,GAAKxS,EAAE,GAAKE,EAAE,GAEhBqR,EAAE,GAAKiB,EAAE,GAAK/S,KAAK2C,IAAID,GAAKqQ,EAAE,GAAK/S,KAAKyC,IAAIC,GAC5CoP,EAAE,GAAKiB,EAAE,GAAK/S,KAAKyC,IAAIC,GAAKqQ,EAAE,GAAK/S,KAAK2C,IAAID,GAC5CoP,EAAE,GAAKiB,EAAE,GAETlS,EAAI,GAAKiR,EAAE,GAAKrR,EAAE,GAClBI,EAAI,GAAKiR,EAAE,GAAKrR,EAAE,GAClBI,EAAI,GAAKiR,EAAE,GAAKrR,EAAE,GACXI,EASF,SAASmS,EAAMzS,EAAGE,GACnBwS,IAAAA,EAAQ/R,EAAWX,EAAE,GAAIA,EAAE,GAAIA,EAAE,IACjC2S,EAAQhS,EAAWT,EAAE,GAAIA,EAAE,GAAIA,EAAE,IACrCwQ,EAAUgC,EAAOA,GACjBhC,EAAUiC,EAAOA,GACbC,IAAAA,EAASjC,EAAI+B,EAAOC,GAEpBC,OAAAA,EAAS,EACJ,EACEA,GAAU,EACZnT,KAAKK,GAELL,KAAKoT,KAAKD,GAUd,SAASE,EAAKxS,GAIZA,OAHPA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EASF,SAASqC,EAAI3C,GACX,MAAA,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAU/C,SAASqD,EAAYrD,EAAGE,GACtBF,OAAAA,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,GAU/C,SAASD,EAAOD,EAAGE,GACpBkB,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACPqB,EAAKrB,EAAE,GACP2B,EAAKzB,EAAE,GACP0B,EAAK1B,EAAE,GACP2B,EAAK3B,EAAE,GACJT,OAAAA,KAAKU,IAAIiB,EAAKO,IAAOpB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIiB,GAAK3B,KAAKU,IAAIwB,KAAQlC,KAAKU,IAAIe,EAAKU,IAAOrB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIe,GAAKzB,KAAKU,IAAIyB,KAAQnC,KAAKU,IAAIkB,EAAKQ,IAAOtB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIkB,GAAK5B,KAAKU,IAAI0B,IAOzP,IAAI4B,EAAML,EAkDV,QAAA,IAAA,EA5CA,IAAII,EAAM9B,EA4CV,QAAA,IAAA,EAtCA,IAAIqR,EAAMhD,EAsCV,QAAA,IAAA,EAhCA,IAAIiD,EAAO3C,EAgCX,QAAA,KAAA,EA1BA,IAAI4C,EAAU3C,EA0Bd,QAAA,QAAA,EApBA,IAAIjH,EAAMyG,EAoBV,QAAA,IAAA,EAdA,IAAIoD,EAAS3C,EAcb,QAAA,OAAA,EAAA,IAAI4C,EAAU,WACfC,IAAAA,EAAM/S,IACH,OAAA,SAAUL,EAAGqT,EAAQC,EAAQC,EAAOC,EAAIC,GACzCC,IAAAA,EAAGC,EAgBFD,IAdAL,IACHA,EAAS,GAGNC,IACHA,EAAS,GAITK,EADEJ,EACE9T,KAAKyQ,IAAIqD,EAAQF,EAASC,EAAQtT,EAAE8P,QAEpC9P,EAAE8P,OAGH4D,EAAIJ,EAAQI,EAAIC,EAAGD,GAAKL,EAC3BD,EAAI,GAAKpT,EAAE0T,GACXN,EAAI,GAAKpT,EAAE0T,EAAI,GACfN,EAAI,GAAKpT,EAAE0T,EAAI,GACfF,EAAGJ,EAAKA,EAAKK,GACbzT,EAAE0T,GAAKN,EAAI,GACXpT,EAAE0T,EAAI,GAAKN,EAAI,GACfpT,EAAE0T,EAAI,GAAKN,EAAI,GAGVpT,OAAAA,GA7BU,GAAd,QAAA,QAAA;;AC/HA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,WAAA,EAAA,QAAA,KAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,KAAA,EAAA,QAAA,MAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,MAAA,EAAA,QAAA,MAAA,EAAA,QAAA,YAAA,EAAA,QAAA,SAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,OAAA,EAAA,QAAA,cAAA,EAAA,QAAA,OAAA,EAAA,QAAA,QAAA,EAAA,QAAA,UAAA,EAAA,QAAA,IAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,OAAA,EAAA,QAAA,cAAA,EAAA,QAAA,cAAA,EAAA,QAAA,KAAA,EAAA,QAAA,IAAA,EAAA,QAAA,YAAA,EAAA,QAAA,OAAA,EAAA,QAAA,QAAA,QAAA,OAAA,QAAA,IAAA,QAAA,QAAA,QAAA,KAAA,QAAA,IAAA,QAAA,IAAA,QAAA,SAAA,EAtnBP,IAAA,EAAA,EAAA,QAAA,gBAsnBO,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,OAAA,yBAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,IAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,EA1mBA,SAASK,IACVC,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAS3BiB,OAPHC,EAASlB,YAAcC,eACzBgB,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGJA,EASF,SAASE,EAAMR,GAChBM,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAK3BiB,OAJPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACJM,EAYF,SAASK,EAAWsF,EAAGC,EAAGI,EAAGC,GAC9BjG,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAK3BiB,OAJPA,EAAI,GAAK2F,EACT3F,EAAI,GAAK4F,EACT5F,EAAI,GAAKgG,EACThG,EAAI,GAAKiG,EACFjG,EAUF,SAASG,EAAKH,EAAKN,GAKjBM,OAJPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACJM,EAaF,SAASU,EAAIV,EAAK2F,EAAGC,EAAGI,EAAGC,GAKzBjG,OAJPA,EAAI,GAAK2F,EACT3F,EAAI,GAAK4F,EACT5F,EAAI,GAAKgG,EACThG,EAAI,GAAKiG,EACFjG,EAWF,SAAS6C,EAAI7C,EAAKN,EAAGE,GAKnBI,OAJPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAWF,SAAS8C,EAAS9C,EAAKN,EAAGE,GAKxBI,OAJPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAWF,SAASoB,EAASpB,EAAKN,EAAGE,GAKxBI,OAJPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAWF,SAASyP,EAAOzP,EAAKN,EAAGE,GAKtBI,OAJPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAUF,SAAS0P,EAAK1P,EAAKN,GAKjBM,OAJPA,EAAI,GAAKb,KAAKuQ,KAAKhQ,EAAE,IACrBM,EAAI,GAAKb,KAAKuQ,KAAKhQ,EAAE,IACrBM,EAAI,GAAKb,KAAKuQ,KAAKhQ,EAAE,IACrBM,EAAI,GAAKb,KAAKuQ,KAAKhQ,EAAE,IACdM,EAUF,SAAS2P,EAAM3P,EAAKN,GAKlBM,OAJPA,EAAI,GAAKb,KAAKwQ,MAAMjQ,EAAE,IACtBM,EAAI,GAAKb,KAAKwQ,MAAMjQ,EAAE,IACtBM,EAAI,GAAKb,KAAKwQ,MAAMjQ,EAAE,IACtBM,EAAI,GAAKb,KAAKwQ,MAAMjQ,EAAE,IACfM,EAWF,SAAS4P,EAAI5P,EAAKN,EAAGE,GAKnBI,OAJPA,EAAI,GAAKb,KAAKyQ,IAAIlQ,EAAE,GAAIE,EAAE,IAC1BI,EAAI,GAAKb,KAAKyQ,IAAIlQ,EAAE,GAAIE,EAAE,IAC1BI,EAAI,GAAKb,KAAKyQ,IAAIlQ,EAAE,GAAIE,EAAE,IAC1BI,EAAI,GAAKb,KAAKyQ,IAAIlQ,EAAE,GAAIE,EAAE,IACnBI,EAWF,SAASF,EAAIE,EAAKN,EAAGE,GAKnBI,OAJPA,EAAI,GAAKb,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IAC1BI,EAAI,GAAKb,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IAC1BI,EAAI,GAAKb,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IAC1BI,EAAI,GAAKb,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IACnBI,EAUF,SAAS6P,EAAM7P,EAAKN,GAKlBM,OAJPA,EAAI,GAAKb,KAAK0Q,MAAMnQ,EAAE,IACtBM,EAAI,GAAKb,KAAK0Q,MAAMnQ,EAAE,IACtBM,EAAI,GAAKb,KAAK0Q,MAAMnQ,EAAE,IACtBM,EAAI,GAAKb,KAAK0Q,MAAMnQ,EAAE,IACfM,EAWF,SAAS+B,EAAM/B,EAAKN,EAAGE,GAKrBI,OAJPA,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EACTI,EAYF,SAAS8P,EAAY9P,EAAKN,EAAGE,EAAGmC,GAK9B/B,OAJPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EAChB/B,EAUF,SAAS+P,EAASrQ,EAAGE,GACtB+F,IAAAA,EAAI/F,EAAE,GAAKF,EAAE,GACbkG,EAAIhG,EAAE,GAAKF,EAAE,GACbsG,EAAIpG,EAAE,GAAKF,EAAE,GACbuG,EAAIrG,EAAE,GAAKF,EAAE,GACVP,OAAAA,KAAKoD,KAAKoD,EAAIA,EAAIC,EAAIA,EAAII,EAAIA,EAAIC,EAAIA,GAUxC,SAAS+J,EAAgBtQ,EAAGE,GAC7B+F,IAAAA,EAAI/F,EAAE,GAAKF,EAAE,GACbkG,EAAIhG,EAAE,GAAKF,EAAE,GACbsG,EAAIpG,EAAE,GAAKF,EAAE,GACbuG,EAAIrG,EAAE,GAAKF,EAAE,GACViG,OAAAA,EAAIA,EAAIC,EAAIA,EAAII,EAAIA,EAAIC,EAAIA,EAS9B,SAASuJ,EAAO9P,GACjBiG,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GACNsG,EAAItG,EAAE,GACNuG,EAAIvG,EAAE,GACHP,OAAAA,KAAKoD,KAAKoD,EAAIA,EAAIC,EAAIA,EAAII,EAAIA,EAAIC,EAAIA,GASxC,SAASgK,EAAcvQ,GACxBiG,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GACNsG,EAAItG,EAAE,GACNuG,EAAIvG,EAAE,GACHiG,OAAAA,EAAIA,EAAIC,EAAIA,EAAII,EAAIA,EAAIC,EAAIA,EAU9B,SAASiK,EAAOlQ,EAAKN,GAKnBM,OAJPA,EAAI,IAAMN,EAAE,GACZM,EAAI,IAAMN,EAAE,GACZM,EAAI,IAAMN,EAAE,GACZM,EAAI,IAAMN,EAAE,GACLM,EAUF,SAASmQ,EAAQnQ,EAAKN,GAKpBM,OAJPA,EAAI,GAAK,EAAMN,EAAE,GACjBM,EAAI,GAAK,EAAMN,EAAE,GACjBM,EAAI,GAAK,EAAMN,EAAE,GACjBM,EAAI,GAAK,EAAMN,EAAE,GACVM,EAUF,SAASoQ,EAAUpQ,EAAKN,GACzBiG,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GACNsG,EAAItG,EAAE,GACNuG,EAAIvG,EAAE,GACNqJ,EAAMpD,EAAIA,EAAIC,EAAIA,EAAII,EAAIA,EAAIC,EAAIA,EAU/BjG,OARH+I,EAAM,IACRA,EAAM,EAAI5J,KAAKoD,KAAKwG,IAGtB/I,EAAI,GAAK2F,EAAIoD,EACb/I,EAAI,GAAK4F,EAAImD,EACb/I,EAAI,GAAKgG,EAAI+C,EACb/I,EAAI,GAAKiG,EAAI8C,EACN/I,EAUF,SAASqQ,EAAI3Q,EAAGE,GACdF,OAAAA,EAAE,GAAKE,EAAE,GAAKF,EAAE,GAAKE,EAAE,GAAKF,EAAE,GAAKE,EAAE,GAAKF,EAAE,GAAKE,EAAE,GAYrD,SAAS0Q,EAAMtQ,EAAKsT,EAAGtR,EAAGiE,GAC3BsN,IAAAA,EAAIvR,EAAE,GAAKiE,EAAE,GAAKjE,EAAE,GAAKiE,EAAE,GAC3BuN,EAAIxR,EAAE,GAAKiE,EAAE,GAAKjE,EAAE,GAAKiE,EAAE,GAC3BwN,EAAIzR,EAAE,GAAKiE,EAAE,GAAKjE,EAAE,GAAKiE,EAAE,GAC3BtD,EAAIX,EAAE,GAAKiE,EAAE,GAAKjE,EAAE,GAAKiE,EAAE,GAC3ByN,EAAI1R,EAAE,GAAKiE,EAAE,GAAKjE,EAAE,GAAKiE,EAAE,GAC3B0N,EAAI3R,EAAE,GAAKiE,EAAE,GAAKjE,EAAE,GAAKiE,EAAE,GAC3B2N,EAAIN,EAAE,GACNO,EAAIP,EAAE,GACNQ,EAAIR,EAAE,GACNS,EAAIT,EAAE,GAKHtT,OAJPA,EAAI,GAAK6T,EAAIF,EAAIG,EAAIJ,EAAIK,EAAIpR,EAC7B3C,EAAI,IAAO4T,EAAID,EAAKG,EAAIL,EAAIM,EAAIP,EAChCxT,EAAI,GAAK4T,EAAIF,EAAIG,EAAIJ,EAAIM,EAAIR,EAC7BvT,EAAI,IAAO4T,EAAIjR,EAAKkR,EAAIL,EAAIM,EAAIP,EACzBvT,EAaF,SAASuQ,EAAKvQ,EAAKN,EAAGE,EAAGkJ,GAC1BkB,IAAAA,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GACPwK,EAAKxK,EAAE,GACPyK,EAAKzK,EAAE,GAKJM,OAJPA,EAAI,GAAKgK,EAAKlB,GAAKlJ,EAAE,GAAKoK,GAC1BhK,EAAI,GAAKiK,EAAKnB,GAAKlJ,EAAE,GAAKqK,GAC1BjK,EAAI,GAAKkK,EAAKpB,GAAKlJ,EAAE,GAAKsK,GAC1BlK,EAAI,GAAKmK,EAAKrB,GAAKlJ,EAAE,GAAKuK,GACnBnK,EAUF,SAASZ,EAAOY,EAAK+B,GAKtBG,IAAAA,EAAI8R,EAAIC,EAAIC,EACZC,EAAIC,EALRrS,EAAQA,GAAS,EAOd,GAGDoS,GAFAjS,EAAyB,EAApBjC,EAASf,SAAe,GAEnBgD,GADV8R,EAAyB,EAApB/T,EAASf,SAAe,GACT8U,QACbG,GAAM,GAEZ,GAGDC,GAFAH,EAAyB,EAApBhU,EAASf,SAAe,GAEnB+U,GADVC,EAAyB,EAApBjU,EAASf,SAAe,GACTgV,QACbE,GAAM,GAEXhR,IAAAA,EAAIjE,KAAKoD,MAAM,EAAI4R,GAAMC,GAKtBpU,OAJPA,EAAI,GAAK+B,EAAQG,EACjBlC,EAAI,GAAK+B,EAAQiS,EACjBhU,EAAI,GAAK+B,EAAQkS,EAAK7Q,EACtBpD,EAAI,GAAK+B,EAAQmS,EAAK9Q,EACfpD,EAWF,SAASmR,EAAcnR,EAAKN,EAAG0R,GAChCzL,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GACNsG,EAAItG,EAAE,GACNuG,EAAIvG,EAAE,GAKHM,OAJPA,EAAI,GAAKoR,EAAE,GAAKzL,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,GAAKpL,EAAIoL,EAAE,IAAMnL,EAClDjG,EAAI,GAAKoR,EAAE,GAAKzL,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,GAAKpL,EAAIoL,EAAE,IAAMnL,EAClDjG,EAAI,GAAKoR,EAAE,GAAKzL,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,IAAMpL,EAAIoL,EAAE,IAAMnL,EACnDjG,EAAI,GAAKoR,EAAE,GAAKzL,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,IAAMpL,EAAIoL,EAAE,IAAMnL,EAC5CjG,EAWF,SAASsR,EAActR,EAAKN,EAAGqG,GAChCJ,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GACNsG,EAAItG,EAAE,GACN6R,EAAKxL,EAAE,GACPyL,EAAKzL,EAAE,GACP0L,EAAK1L,EAAE,GACP2L,EAAK3L,EAAE,GAEPsO,EAAK3C,EAAK/L,EAAI6L,EAAKxL,EAAIyL,EAAK7L,EAC5B0O,EAAK5C,EAAK9L,EAAI6L,EAAK9L,EAAI4L,EAAKvL,EAC5BuO,EAAK7C,EAAK1L,EAAIuL,EAAK3L,EAAI4L,EAAK7L,EAC5B6O,GAAMjD,EAAK5L,EAAI6L,EAAK5L,EAAI6L,EAAKzL,EAM1BhG,OAJPA,EAAI,GAAKqU,EAAK3C,EAAK8C,GAAMjD,EAAK+C,GAAM7C,EAAK8C,GAAM/C,EAC/CxR,EAAI,GAAKsU,EAAK5C,EAAK8C,GAAMhD,EAAK+C,GAAMhD,EAAK8C,GAAM5C,EAC/CzR,EAAI,GAAKuU,EAAK7C,EAAK8C,GAAM/C,EAAK4C,GAAM7C,EAAK8C,GAAM/C,EAC/CvR,EAAI,GAAKN,EAAE,GACJM,EASF,SAASwS,EAAKxS,GAKZA,OAJPA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EASF,SAASqC,EAAI3C,GACX,MAAA,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAU7D,SAASqD,EAAYrD,EAAGE,GACtBF,OAAAA,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,GAUhE,SAASD,EAAOD,EAAGE,GACpBkB,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACPqB,EAAKrB,EAAE,GACPsB,EAAKtB,EAAE,GACP2B,EAAKzB,EAAE,GACP0B,EAAK1B,EAAE,GACP2B,EAAK3B,EAAE,GACP4B,EAAK5B,EAAE,GACJT,OAAAA,KAAKU,IAAIiB,EAAKO,IAAOpB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIiB,GAAK3B,KAAKU,IAAIwB,KAAQlC,KAAKU,IAAIe,EAAKU,IAAOrB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIe,GAAKzB,KAAKU,IAAIyB,KAAQnC,KAAKU,IAAIkB,EAAKQ,IAAOtB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIkB,GAAK5B,KAAKU,IAAI0B,KAAQpC,KAAKU,IAAImB,EAAKQ,IAAOvB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImB,GAAK7B,KAAKU,IAAI2B,IAO9U,IAAI2B,EAAML,EAkDV,QAAA,IAAA,EA5CA,IAAII,EAAM9B,EA4CV,QAAA,IAAA,EAtCA,IAAIqR,EAAMhD,EAsCV,QAAA,IAAA,EAhCA,IAAIiD,EAAO3C,EAgCX,QAAA,KAAA,EA1BA,IAAI4C,EAAU3C,EA0Bd,QAAA,QAAA,EApBA,IAAIjH,EAAMyG,EAoBV,QAAA,IAAA,EAdA,IAAIoD,EAAS3C,EAcb,QAAA,OAAA,EAAA,IAAI4C,EAAU,WACfC,IAAAA,EAAM/S,IACH,OAAA,SAAUL,EAAGqT,EAAQC,EAAQC,EAAOC,EAAIC,GACzCC,IAAAA,EAAGC,EAgBFD,IAdAL,IACHA,EAAS,GAGNC,IACHA,EAAS,GAITK,EADEJ,EACE9T,KAAKyQ,IAAIqD,EAAQF,EAASC,EAAQtT,EAAE8P,QAEpC9P,EAAE8P,OAGH4D,EAAIJ,EAAQI,EAAIC,EAAGD,GAAKL,EAC3BD,EAAI,GAAKpT,EAAE0T,GACXN,EAAI,GAAKpT,EAAE0T,EAAI,GACfN,EAAI,GAAKpT,EAAE0T,EAAI,GACfN,EAAI,GAAKpT,EAAE0T,EAAI,GACfF,EAAGJ,EAAKA,EAAKK,GACbzT,EAAE0T,GAAKN,EAAI,GACXpT,EAAE0T,EAAI,GAAKN,EAAI,GACfpT,EAAE0T,EAAI,GAAKN,EAAI,GACfpT,EAAE0T,EAAI,GAAKN,EAAI,GAGVpT,OAAAA,GA/BU,GAAd,QAAA,QAAA;;ACLA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,EAAA,QAAA,SAAA,EAAA,QAAA,aAAA,EAAA,QAAA,aAAA,EAAA,QAAA,SAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,WAAA,EAAA,QAAA,MAAA,EAAA,QAAA,OAAA,EAAA,QAAA,OAAA,EAAA,QAAA,UAAA,EAAA,QAAA,SAAA,EAAA,QAAA,UAAA,EAAA,QAAA,IAAA,EAAA,QAAA,QAAA,QAAA,OAAA,QAAA,WAAA,QAAA,OAAA,QAAA,YAAA,QAAA,UAAA,QAAA,OAAA,QAAA,cAAA,QAAA,IAAA,QAAA,OAAA,QAAA,KAAA,QAAA,IAAA,QAAA,MAAA,QAAA,IAAA,QAAA,IAAA,QAAA,IAAA,QAAA,KAAA,QAAA,WAAA,QAAA,WAAA,EAjnBP,IAAA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,cACA,EAAA,EAAA,QAAA,cACA,EAAA,EAAA,QAAA,cA8mBO,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,OAAA,yBAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,IAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,EAlmBA,SAASK,IACVC,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAS3BiB,OAPHC,EAASlB,YAAcC,eACzBgB,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGXA,EAAI,GAAK,EACFA,EASF,SAASI,EAASJ,GAKhBA,OAJPA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAYF,SAASyU,EAAazU,EAAK6I,EAAMnH,GACtCA,GAAY,GACRC,IAAAA,EAAIxC,KAAKyC,IAAIF,GAKV1B,OAJPA,EAAI,GAAK2B,EAAIkH,EAAK,GAClB7I,EAAI,GAAK2B,EAAIkH,EAAK,GAClB7I,EAAI,GAAK2B,EAAIkH,EAAK,GAClB7I,EAAI,GAAKb,KAAK2C,IAAIJ,GACX1B,EAgBF,SAAS0U,EAAaC,EAAU5O,GACjCrE,IAAAA,EAAwB,EAAlBvC,KAAKoT,KAAKxM,EAAE,IAClBpE,EAAIxC,KAAKyC,IAAIF,EAAM,GAahBA,OAXHC,EAAI1B,EAASnB,SACf6V,EAAS,GAAK5O,EAAE,GAAKpE,EACrBgT,EAAS,GAAK5O,EAAE,GAAKpE,EACrBgT,EAAS,GAAK5O,EAAE,GAAKpE,IAGrBgT,EAAS,GAAK,EACdA,EAAS,GAAK,EACdA,EAAS,GAAK,GAGTjT,EAWF,SAASN,EAASpB,EAAKN,EAAGE,GAC3BoK,IAAAA,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GACPwK,EAAKxK,EAAE,GACPyK,EAAKzK,EAAE,GACPkK,EAAKhK,EAAE,GACPiK,EAAKjK,EAAE,GACPkK,EAAKlK,EAAE,GACPmK,EAAKnK,EAAE,GAKJI,OAJPA,EAAI,GAAKgK,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,EAC5C7J,EAAI,GAAKiK,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,EAC5C9J,EAAI,GAAKkK,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,EAC5C5J,EAAI,GAAKmK,EAAKJ,EAAKC,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,EACrC9J,EAWF,SAASgJ,EAAQhJ,EAAKN,EAAGgC,GAC9BA,GAAO,GACHsI,IAAAA,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GACPwK,EAAKxK,EAAE,GACPyK,EAAKzK,EAAE,GACPkK,EAAKzK,KAAKyC,IAAIF,GACdqI,EAAK5K,KAAK2C,IAAIJ,GAKX1B,OAJPA,EAAI,GAAKgK,EAAKD,EAAKI,EAAKP,EACxB5J,EAAI,GAAKiK,EAAKF,EAAKG,EAAKN,EACxB5J,EAAI,GAAKkK,EAAKH,EAAKE,EAAKL,EACxB5J,EAAI,GAAKmK,EAAKJ,EAAKC,EAAKJ,EACjB5J,EAWF,SAASiJ,EAAQjJ,EAAKN,EAAGgC,GAC9BA,GAAO,GACHsI,IAAAA,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GACPwK,EAAKxK,EAAE,GACPyK,EAAKzK,EAAE,GACPmK,EAAK1K,KAAKyC,IAAIF,GACdqI,EAAK5K,KAAK2C,IAAIJ,GAKX1B,OAJPA,EAAI,GAAKgK,EAAKD,EAAKG,EAAKL,EACxB7J,EAAI,GAAKiK,EAAKF,EAAKI,EAAKN,EACxB7J,EAAI,GAAKkK,EAAKH,EAAKC,EAAKH,EACxB7J,EAAI,GAAKmK,EAAKJ,EAAKE,EAAKJ,EACjB7J,EAWF,SAASkJ,EAAQlJ,EAAKN,EAAGgC,GAC9BA,GAAO,GACHsI,IAAAA,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GACPwK,EAAKxK,EAAE,GACPyK,EAAKzK,EAAE,GACPoK,EAAK3K,KAAKyC,IAAIF,GACdqI,EAAK5K,KAAK2C,IAAIJ,GAKX1B,OAJPA,EAAI,GAAKgK,EAAKD,EAAKE,EAAKH,EACxB9J,EAAI,GAAKiK,EAAKF,EAAKC,EAAKF,EACxB9J,EAAI,GAAKkK,EAAKH,EAAKI,EAAKL,EACxB9J,EAAI,GAAKmK,EAAKJ,EAAKG,EAAKJ,EACjB9J,EAYF,SAAS4U,EAAW5U,EAAKN,GAC1BiG,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GACNsG,EAAItG,EAAE,GAKHM,OAJPA,EAAI,GAAK2F,EACT3F,EAAI,GAAK4F,EACT5F,EAAI,GAAKgG,EACThG,EAAI,GAAKb,KAAKoD,KAAKpD,KAAKU,IAAI,EAAM8F,EAAIA,EAAIC,EAAIA,EAAII,EAAIA,IAC/ChG,EAYF,SAAS6U,EAAM7U,EAAKN,EAAGE,EAAGkJ,GAG3BkB,IAQA8K,EAAOC,EAAOC,EAAOC,EAAQC,EAR7BlL,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GACPwK,EAAKxK,EAAE,GACPyK,EAAKzK,EAAE,GACPkK,EAAKhK,EAAE,GACPiK,EAAKjK,EAAE,GACPkK,EAAKlK,EAAE,GACPmK,EAAKnK,EAAE,GAgCJI,OA7BP+U,EAAQ/K,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,GAE/B,IACVgL,GAASA,EACTnL,GAAMA,EACNC,GAAMA,EACNC,GAAMA,EACNC,GAAMA,GAIJ,EAAMgL,EAAQ9U,EAASnB,SAEzBgW,EAAQ3V,KAAKoT,KAAKwC,GAClBC,EAAQ7V,KAAKyC,IAAIkT,GACjBG,EAAS9V,KAAKyC,KAAK,EAAMkH,GAAKgM,GAASE,EACvCE,EAAS/V,KAAKyC,IAAIkH,EAAIgM,GAASE,IAI/BC,EAAS,EAAMnM,EACfoM,EAASpM,GAIX9I,EAAI,GAAKiV,EAASjL,EAAKkL,EAAStL,EAChC5J,EAAI,GAAKiV,EAAShL,EAAKiL,EAASrL,EAChC7J,EAAI,GAAKiV,EAAS/K,EAAKgL,EAASpL,EAChC9J,EAAI,GAAKiV,EAAS9K,EAAK+K,EAASnL,EACzB/J,EASF,SAASZ,EAAOY,GAGjBmV,IAAAA,EAAKlV,EAASf,SACdkW,EAAKnV,EAASf,SACdmW,EAAKpV,EAASf,SACdoW,EAAenW,KAAKoD,KAAK,EAAI4S,GAC7BI,EAASpW,KAAKoD,KAAK4S,GAKhBnV,OAJPA,EAAI,GAAKsV,EAAenW,KAAKyC,IAAI,EAAMzC,KAAKK,GAAK4V,GACjDpV,EAAI,GAAKsV,EAAenW,KAAK2C,IAAI,EAAM3C,KAAKK,GAAK4V,GACjDpV,EAAI,GAAKuV,EAASpW,KAAKyC,IAAI,EAAMzC,KAAKK,GAAK6V,GAC3CrV,EAAI,GAAKuV,EAASpW,KAAK2C,IAAI,EAAM3C,KAAKK,GAAK6V,GACpCrV,EAUF,SAASa,EAAOb,EAAKN,GACtBoB,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACPqB,EAAKrB,EAAE,GACPsB,EAAKtB,EAAE,GACP2Q,EAAMvP,EAAKA,EAAKF,EAAKA,EAAKG,EAAKA,EAAKC,EAAKA,EACzCwU,EAASnF,EAAM,EAAMA,EAAM,EAMxBrQ,OAJPA,EAAI,IAAMc,EAAK0U,EACfxV,EAAI,IAAMY,EAAK4U,EACfxV,EAAI,IAAMe,EAAKyU,EACfxV,EAAI,GAAKgB,EAAKwU,EACPxV,EAWF,SAASyV,EAAUzV,EAAKN,GAKtBM,OAJPA,EAAI,IAAMN,EAAE,GACZM,EAAI,IAAMN,EAAE,GACZM,EAAI,IAAMN,EAAE,GACZM,EAAI,GAAKN,EAAE,GACJM,EAcF,SAAS0V,EAAS1V,EAAKoR,GAGxBuE,IACAC,EADAD,EAASvE,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAGzBuE,GAAAA,EAAS,EAEXC,EAAQzW,KAAKoD,KAAKoT,EAAS,GAE3B3V,EAAI,GAAK,GAAM4V,EACfA,EAAQ,GAAMA,EAEd5V,EAAI,IAAMoR,EAAE,GAAKA,EAAE,IAAMwE,EACzB5V,EAAI,IAAMoR,EAAE,GAAKA,EAAE,IAAMwE,EACzB5V,EAAI,IAAMoR,EAAE,GAAKA,EAAE,IAAMwE,MACpB,CAEDxC,IAAAA,EAAI,EACJhC,EAAE,GAAKA,EAAE,KAAIgC,EAAI,GACjBhC,EAAE,GAAKA,EAAM,EAAJgC,EAAQA,KAAIA,EAAI,GACzByC,IAAAA,GAAKzC,EAAI,GAAK,EACd0C,GAAK1C,EAAI,GAAK,EAClBwC,EAAQzW,KAAKoD,KAAK6O,EAAM,EAAJgC,EAAQA,GAAKhC,EAAM,EAAJyE,EAAQA,GAAKzE,EAAM,EAAJ0E,EAAQA,GAAK,GAC/D9V,EAAIoT,GAAK,GAAMwC,EACfA,EAAQ,GAAMA,EACd5V,EAAI,IAAMoR,EAAM,EAAJyE,EAAQC,GAAK1E,EAAM,EAAJ0E,EAAQD,IAAMD,EACzC5V,EAAI6V,IAAMzE,EAAM,EAAJyE,EAAQzC,GAAKhC,EAAM,EAAJgC,EAAQyC,IAAMD,EACzC5V,EAAI8V,IAAM1E,EAAM,EAAJ0E,EAAQ1C,GAAKhC,EAAM,EAAJgC,EAAQ0C,IAAMF,EAGpC5V,OAAAA,EAaF,SAAS+V,EAAU/V,EAAK2F,EAAGC,EAAGI,GAC/BgQ,IAAAA,EAAY,GAAM7W,KAAKK,GAAK,IAChCmG,GAAKqQ,EACLpQ,GAAKoQ,EACLhQ,GAAKgQ,EACDpL,IAAAA,EAAKzL,KAAKyC,IAAI+D,GACdsQ,EAAK9W,KAAK2C,IAAI6D,GACdkF,EAAK1L,KAAKyC,IAAIgE,GACdsQ,EAAK/W,KAAK2C,IAAI8D,GACdkF,EAAK3L,KAAKyC,IAAIoE,GACdmQ,EAAKhX,KAAK2C,IAAIkE,GAKXhG,OAJPA,EAAI,GAAK4K,EAAKsL,EAAKC,EAAKF,EAAKpL,EAAKC,EAClC9K,EAAI,GAAKiW,EAAKpL,EAAKsL,EAAKvL,EAAKsL,EAAKpL,EAClC9K,EAAI,GAAKiW,EAAKC,EAAKpL,EAAKF,EAAKC,EAAKsL,EAClCnW,EAAI,GAAKiW,EAAKC,EAAKC,EAAKvL,EAAKC,EAAKC,EAC3B9K,EASF,SAASqC,EAAI3C,GACX,MAAA,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAU7D,IAAIQ,EAAQkW,EAAKlW,MAyNjB,QAAA,MAAA,EA7MA,IAAIG,EAAa+V,EAAK/V,WA6MtB,QAAA,WAAA,EAnMA,IAAIF,EAAOiW,EAAKjW,KAmMhB,QAAA,KAAA,EAtLA,IAAIO,EAAM0V,EAAK1V,IAsLf,QAAA,IAAA,EA3KA,IAAImC,EAAMuT,EAAKvT,IA2Kf,QAAA,IAAA,EArKA,IAAIK,EAAM9B,EAqKV,QAAA,IAAA,EA1JA,IAAIW,EAAQqU,EAAKrU,MA0JjB,QAAA,MAAA,EAhJA,IAAIsO,EAAM+F,EAAK/F,IAgJf,QAAA,IAAA,EApIA,IAAIE,EAAO6F,EAAK7F,KAoIhB,QAAA,KAAA,EA5HA,IAAIf,EAAS4G,EAAK5G,OA4HlB,QAAA,OAAA,EAtHA,IAAIzG,EAAMyG,EAsHV,QAAA,IAAA,EA7GA,IAAIS,EAAgBmG,EAAKnG,cA6GzB,QAAA,cAAA,EAvGA,IAAI2C,EAAS3C,EAuGb,QAAA,OAAA,EA7FA,IAAIG,EAAYgG,EAAKhG,UA6FrB,QAAA,UAAA,EApFA,IAAIrN,EAAcqT,EAAKrT,YAoFvB,QAAA,YAAA,EA3EA,IAAIpD,EAASyW,EAAKzW,OA2ElB,QAAA,OAAA,EA9DA,IAAI0W,EAAa,WAClBC,IAAAA,EAAUC,EAAKxW,SACfyW,EAAYD,EAAKlW,WAAW,EAAG,EAAG,GAClCoW,EAAYF,EAAKlW,WAAW,EAAG,EAAG,GAC/B,OAAA,SAAUL,EAAKN,EAAGE,GACnByQ,IAAAA,EAAMkG,EAAKlG,IAAI3Q,EAAGE,GAElByQ,OAAAA,GAAO,SACTkG,EAAKjG,MAAMgG,EAASE,EAAW9W,GAC3B6W,EAAKxN,IAAIuN,GAAW,MAAUC,EAAKjG,MAAMgG,EAASG,EAAW/W,GACjE6W,EAAKnG,UAAUkG,EAASA,GACxB7B,EAAazU,EAAKsW,EAASnX,KAAKK,IACzBQ,GACEqQ,EAAM,SACfrQ,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,IAEPuW,EAAKjG,MAAMgG,EAAS5W,EAAGE,GACvBI,EAAI,GAAKsW,EAAQ,GACjBtW,EAAI,GAAKsW,EAAQ,GACjBtW,EAAI,GAAKsW,EAAQ,GACjBtW,EAAI,GAAK,EAAIqQ,EACND,EAAUpQ,EAAKA,KAzBJ,GA8DjB,QAAA,WAAA,EArBA,IAAI0W,EAAS,WACdC,IAAAA,EAAQ5W,IACR6W,EAAQ7W,IACL,OAAA,SAAUC,EAAKN,EAAGE,EAAGiC,EAAGuB,EAAG0F,GAIzB9I,OAHP6U,EAAM8B,EAAOjX,EAAG0D,EAAG0F,GACnB+L,EAAM+B,EAAOhX,EAAGiC,EAAGiH,GACnB+L,EAAM7U,EAAK2W,EAAOC,EAAO,EAAI9N,GAAK,EAAIA,IAC/B9I,GAPS,GAqBb,QAAA,OAAA,EAAA,IAAI6W,EAAU,WACfC,IAAAA,EAAOC,EAAKhX,SACT,OAAA,SAAUC,EAAKgX,EAAMjL,EAAOgC,GAU1BqC,OATP0G,EAAK,GAAK/K,EAAM,GAChB+K,EAAK,GAAK/K,EAAM,GAChB+K,EAAK,GAAK/K,EAAM,GAChB+K,EAAK,GAAK/I,EAAG,GACb+I,EAAK,GAAK/I,EAAG,GACb+I,EAAK,GAAK/I,EAAG,GACb+I,EAAK,IAAME,EAAK,GAChBF,EAAK,IAAME,EAAK,GAChBF,EAAK,IAAME,EAAK,GACT5G,EAAUpQ,EAAK0V,EAAS1V,EAAK8W,KAZnB,GAAd,QAAA,QAAA;;ACiNN,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,WAAA,EAAA,QAAA,8BAAA,EAAA,QAAA,wBAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,aAAA,EAAA,QAAA,SAAA,EAAA,QAAA,KAAA,EAAA,QAAA,SAAA,EAAA,QAAA,IAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,eAAA,EAAA,QAAA,UAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,mBAAA,EAAA,QAAA,oBAAA,EAAA,QAAA,iBAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,OAAA,EAAA,QAAA,UAAA,EAAA,QAAA,UAAA,EAAA,QAAA,IAAA,EAAA,QAAA,YAAA,EAAA,QAAA,OAAA,EAAA,QAAA,OAAA,QAAA,cAAA,QAAA,IAAA,QAAA,OAAA,QAAA,IAAA,QAAA,IAAA,QAAA,QAAA,QAAA,aAAA,EAl0BD,IAAA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,cACA,EAAA,EAAA,QAAA,cAg0BC,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,OAAA,yBAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,IAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,EAjzBM,SAAS/W,IACVkX,IAAAA,EAAK,IAAIhX,EAASlB,WAAW,GAa1BkY,OAXHhX,EAASlB,YAAcC,eACzBiY,EAAG,GAAK,EACRA,EAAG,GAAK,EACRA,EAAG,GAAK,EACRA,EAAG,GAAK,EACRA,EAAG,GAAK,EACRA,EAAG,GAAK,EACRA,EAAG,GAAK,GAGVA,EAAG,GAAK,EACDA,EAUF,SAAS/W,EAAMR,GAChBuX,IAAAA,EAAK,IAAIhX,EAASlB,WAAW,GAS1BkY,OARPA,EAAG,GAAKvX,EAAE,GACVuX,EAAG,GAAKvX,EAAE,GACVuX,EAAG,GAAKvX,EAAE,GACVuX,EAAG,GAAKvX,EAAE,GACVuX,EAAG,GAAKvX,EAAE,GACVuX,EAAG,GAAKvX,EAAE,GACVuX,EAAG,GAAKvX,EAAE,GACVuX,EAAG,GAAKvX,EAAE,GACHuX,EAiBF,SAAS5W,EAAW4N,EAAIE,EAAIE,EAAI6I,EAAIhR,EAAIC,EAAIC,EAAI6L,GACjDgF,IAAAA,EAAK,IAAIhX,EAASlB,WAAW,GAS1BkY,OARPA,EAAG,GAAKhJ,EACRgJ,EAAG,GAAK9I,EACR8I,EAAG,GAAK5I,EACR4I,EAAG,GAAKC,EACRD,EAAG,GAAK/Q,EACR+Q,EAAG,GAAK9Q,EACR8Q,EAAG,GAAK7Q,EACR6Q,EAAG,GAAKhF,EACDgF,EAgBF,SAASE,EAA8BlJ,EAAIE,EAAIE,EAAI6I,EAAIhR,EAAIC,EAAIC,GAChE6Q,IAAAA,EAAK,IAAIhX,EAASlB,WAAW,GACjCkY,EAAG,GAAKhJ,EACRgJ,EAAG,GAAK9I,EACR8I,EAAG,GAAK5I,EACR4I,EAAG,GAAKC,EACJlN,IAAAA,EAAU,GAAL9D,EACL+D,EAAU,GAAL9D,EACL+D,EAAU,GAAL9D,EAKF6Q,OAJPA,EAAG,GAAKjN,EAAKkN,EAAKjN,EAAKoE,EAAKnE,EAAKiE,EACjC8I,EAAG,GAAKhN,EAAKiN,EAAKhN,EAAK+D,EAAKjE,EAAKqE,EACjC4I,EAAG,GAAK/M,EAAKgN,EAAKlN,EAAKmE,EAAKlE,EAAKgE,EACjCgJ,EAAG,IAAMjN,EAAKiE,EAAKhE,EAAKkE,EAAKjE,EAAKmE,EAC3B4I,EAYF,SAAS3N,EAAwBtJ,EAAK+F,EAAG+C,GAC1CkB,IAAAA,EAAY,GAAPlB,EAAE,GACPmB,EAAY,GAAPnB,EAAE,GACPoB,EAAY,GAAPpB,EAAE,GACPc,EAAK7D,EAAE,GACP8D,EAAK9D,EAAE,GACP+D,EAAK/D,EAAE,GACPgE,EAAKhE,EAAE,GASJ/F,OARPA,EAAI,GAAK4J,EACT5J,EAAI,GAAK6J,EACT7J,EAAI,GAAK8J,EACT9J,EAAI,GAAK+J,EACT/J,EAAI,GAAKgK,EAAKD,EAAKE,EAAKH,EAAKI,EAAKL,EAClC7J,EAAI,GAAKiK,EAAKF,EAAKG,EAAKN,EAAKI,EAAKF,EAClC9J,EAAI,GAAKkK,EAAKH,EAAKC,EAAKH,EAAKI,EAAKL,EAClC5J,EAAI,IAAMgK,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,EAC5B9J,EAWF,SAASkE,EAAgBlE,EAAK8I,GAS5B9I,OARPA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAY,GAAP8I,EAAE,GACX9I,EAAI,GAAY,GAAP8I,EAAE,GACX9I,EAAI,GAAY,GAAP8I,EAAE,GACX9I,EAAI,GAAK,EACFA,EAWF,SAASmC,EAAanC,EAAK+F,GASzB/F,OARPA,EAAI,GAAK+F,EAAE,GACX/F,EAAI,GAAK+F,EAAE,GACX/F,EAAI,GAAK+F,EAAE,GACX/F,EAAI,GAAK+F,EAAE,GACX/F,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAWF,SAASmE,EAASnE,EAAKN,GAExB0X,IAAAA,EAAQC,EAAKtX,SACjBuX,EAAK9M,YAAY4M,EAAO1X,GACpBoJ,IAAAA,EAAI,IAAI7I,EAASlB,WAAW,GAGzBiB,OAFPsX,EAAKjN,eAAevB,EAAGpJ,GACvB4J,EAAwBtJ,EAAKoX,EAAOtO,GAC7B9I,EAWF,SAASG,EAAKH,EAAKN,GASjBM,OARPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACJM,EASF,SAASI,EAASJ,GAShBA,OARPA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAkBF,SAASU,EAAIV,EAAKiO,EAAIE,EAAIE,EAAI6I,EAAIhR,EAAIC,EAAIC,EAAI6L,GAS5CjS,OARPA,EAAI,GAAKiO,EACTjO,EAAI,GAAKmO,EACTnO,EAAI,GAAKqO,EACTrO,EAAI,GAAKkX,EACTlX,EAAI,GAAKkG,EACTlG,EAAI,GAAKmG,EACTnG,EAAI,GAAKoG,EACTpG,EAAI,GAAKiS,EACFjS,EASF,IAAIuX,EAAUF,EAAKlX,KAQnB,SAASqX,EAAQxX,EAAKN,GAKpBM,OAJPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACJM,EA0iBR,QAAA,QAAA,EA/hBM,IAAIyX,EAAUJ,EAAKlX,KAUnB,SAASuX,EAAQ1X,EAAK+F,GAKpB/F,OAJPA,EAAI,GAAK+F,EAAE,GACX/F,EAAI,GAAK+F,EAAE,GACX/F,EAAI,GAAK+F,EAAE,GACX/F,EAAI,GAAK+F,EAAE,GACJ/F,EASF,SAASqK,EAAerK,EAAKN,GAC9BsK,IAAAA,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GACPwK,EAAKxK,EAAE,GACPyK,EAAKzK,EAAE,GACPkK,GAAMlK,EAAE,GACRmK,GAAMnK,EAAE,GACRoK,GAAMpK,EAAE,GACRqK,EAAKrK,EAAE,GAIJM,OAHPA,EAAI,GAA+C,GAAzCgK,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,GAC7C7J,EAAI,GAA+C,GAAzCiK,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,GAC7C9J,EAAI,GAA+C,GAAzCkK,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,GACtC5J,EAWF,SAASiE,EAAUjE,EAAKN,EAAGsC,GAC5B2V,IAAAA,EAAMjY,EAAE,GACRkY,EAAMlY,EAAE,GACRmY,EAAMnY,EAAE,GACRoY,EAAMpY,EAAE,GACRqY,EAAa,GAAP/V,EAAE,GACRgW,EAAa,GAAPhW,EAAE,GACRiW,EAAa,GAAPjW,EAAE,GACRkW,EAAMxY,EAAE,GACRyY,EAAMzY,EAAE,GACR0Y,EAAM1Y,EAAE,GACR2Y,EAAM3Y,EAAE,GASLM,OARPA,EAAI,GAAK2X,EACT3X,EAAI,GAAK4X,EACT5X,EAAI,GAAK6X,EACT7X,EAAI,GAAK8X,EACT9X,EAAI,GAAK8X,EAAMC,EAAMH,EAAMK,EAAMJ,EAAMG,EAAME,EAC7ClY,EAAI,GAAK8X,EAAME,EAAMH,EAAME,EAAMJ,EAAMM,EAAME,EAC7CnY,EAAI,GAAK8X,EAAMG,EAAMN,EAAMK,EAAMJ,EAAMG,EAAMK,EAC7CpY,EAAI,IAAM2X,EAAMI,EAAMH,EAAMI,EAAMH,EAAMI,EAAMI,EACvCrY,EAWF,SAASgJ,EAAQhJ,EAAKN,EAAGgC,GAC1BkI,IAAAA,GAAMlK,EAAE,GACRmK,GAAMnK,EAAE,GACRoK,GAAMpK,EAAE,GACRqK,EAAKrK,EAAE,GACPsK,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GACPwK,EAAKxK,EAAE,GACPyK,EAAKzK,EAAE,GACPiY,EAAM3N,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,EACzC+N,EAAM3N,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,EACzC+N,EAAM3N,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,EACzCkO,EAAM3N,EAAKJ,EAAKC,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,EAUtC9J,OATPqX,EAAKrO,QAAQhJ,EAAKN,EAAGgC,GACrBkI,EAAK5J,EAAI,GACT6J,EAAK7J,EAAI,GACT8J,EAAK9J,EAAI,GACT+J,EAAK/J,EAAI,GACTA,EAAI,GAAK2X,EAAM5N,EAAK+N,EAAMlO,EAAKgO,EAAM9N,EAAK+N,EAAMhO,EAChD7J,EAAI,GAAK4X,EAAM7N,EAAK+N,EAAMjO,EAAKgO,EAAMjO,EAAK+N,EAAM7N,EAChD9J,EAAI,GAAK6X,EAAM9N,EAAK+N,EAAMhO,EAAK6N,EAAM9N,EAAK+N,EAAMhO,EAChD5J,EAAI,GAAK8X,EAAM/N,EAAK4N,EAAM/N,EAAKgO,EAAM/N,EAAKgO,EAAM/N,EACzC9J,EAWF,SAASiJ,EAAQjJ,EAAKN,EAAGgC,GAC1BkI,IAAAA,GAAMlK,EAAE,GACRmK,GAAMnK,EAAE,GACRoK,GAAMpK,EAAE,GACRqK,EAAKrK,EAAE,GACPsK,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GACPwK,EAAKxK,EAAE,GACPyK,EAAKzK,EAAE,GACPiY,EAAM3N,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,EACzC+N,EAAM3N,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,EACzC+N,EAAM3N,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,EACzCkO,EAAM3N,EAAKJ,EAAKC,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,EAUtC9J,OATPqX,EAAKpO,QAAQjJ,EAAKN,EAAGgC,GACrBkI,EAAK5J,EAAI,GACT6J,EAAK7J,EAAI,GACT8J,EAAK9J,EAAI,GACT+J,EAAK/J,EAAI,GACTA,EAAI,GAAK2X,EAAM5N,EAAK+N,EAAMlO,EAAKgO,EAAM9N,EAAK+N,EAAMhO,EAChD7J,EAAI,GAAK4X,EAAM7N,EAAK+N,EAAMjO,EAAKgO,EAAMjO,EAAK+N,EAAM7N,EAChD9J,EAAI,GAAK6X,EAAM9N,EAAK+N,EAAMhO,EAAK6N,EAAM9N,EAAK+N,EAAMhO,EAChD5J,EAAI,GAAK8X,EAAM/N,EAAK4N,EAAM/N,EAAKgO,EAAM/N,EAAKgO,EAAM/N,EACzC9J,EAWF,SAASkJ,EAAQlJ,EAAKN,EAAGgC,GAC1BkI,IAAAA,GAAMlK,EAAE,GACRmK,GAAMnK,EAAE,GACRoK,GAAMpK,EAAE,GACRqK,EAAKrK,EAAE,GACPsK,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GACPwK,EAAKxK,EAAE,GACPyK,EAAKzK,EAAE,GACPiY,EAAM3N,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,EACzC+N,EAAM3N,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,EACzC+N,EAAM3N,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,EACzCkO,EAAM3N,EAAKJ,EAAKC,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,EAUtC9J,OATPqX,EAAKnO,QAAQlJ,EAAKN,EAAGgC,GACrBkI,EAAK5J,EAAI,GACT6J,EAAK7J,EAAI,GACT8J,EAAK9J,EAAI,GACT+J,EAAK/J,EAAI,GACTA,EAAI,GAAK2X,EAAM5N,EAAK+N,EAAMlO,EAAKgO,EAAM9N,EAAK+N,EAAMhO,EAChD7J,EAAI,GAAK4X,EAAM7N,EAAK+N,EAAMjO,EAAKgO,EAAMjO,EAAK+N,EAAM7N,EAChD9J,EAAI,GAAK6X,EAAM9N,EAAK+N,EAAMhO,EAAK6N,EAAM9N,EAAK+N,EAAMhO,EAChD5J,EAAI,GAAK8X,EAAM/N,EAAK4N,EAAM/N,EAAKgO,EAAM/N,EAAKgO,EAAM/N,EACzC9J,EAWF,SAASsY,EAAmBtY,EAAKN,EAAGqG,GACrCwL,IAAAA,EAAKxL,EAAE,GACPyL,EAAKzL,EAAE,GACP0L,EAAK1L,EAAE,GACP2L,EAAK3L,EAAE,GACPiE,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GACPwK,EAAKxK,EAAE,GACPyK,EAAKzK,EAAE,GAaJM,OAZPA,EAAI,GAAKgK,EAAK0H,EAAKvH,EAAKoH,EAAKtH,EAAKwH,EAAKvH,EAAKsH,EAC5CxR,EAAI,GAAKiK,EAAKyH,EAAKvH,EAAKqH,EAAKtH,EAAKqH,EAAKvH,EAAKyH,EAC5CzR,EAAI,GAAKkK,EAAKwH,EAAKvH,EAAKsH,EAAKzH,EAAKwH,EAAKvH,EAAKsH,EAC5CvR,EAAI,GAAKmK,EAAKuH,EAAK1H,EAAKuH,EAAKtH,EAAKuH,EAAKtH,EAAKuH,EAC5CzH,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GACPwK,EAAKxK,EAAE,GACPyK,EAAKzK,EAAE,GACPM,EAAI,GAAKgK,EAAK0H,EAAKvH,EAAKoH,EAAKtH,EAAKwH,EAAKvH,EAAKsH,EAC5CxR,EAAI,GAAKiK,EAAKyH,EAAKvH,EAAKqH,EAAKtH,EAAKqH,EAAKvH,EAAKyH,EAC5CzR,EAAI,GAAKkK,EAAKwH,EAAKvH,EAAKsH,EAAKzH,EAAKwH,EAAKvH,EAAKsH,EAC5CvR,EAAI,GAAKmK,EAAKuH,EAAK1H,EAAKuH,EAAKtH,EAAKuH,EAAKtH,EAAKuH,EACrCzR,EAWF,SAASuY,EAAoBvY,EAAK+F,EAAGrG,GACtC6R,IAAAA,EAAKxL,EAAE,GACPyL,EAAKzL,EAAE,GACP0L,EAAK1L,EAAE,GACP2L,EAAK3L,EAAE,GACP6D,EAAKlK,EAAE,GACPmK,EAAKnK,EAAE,GACPoK,EAAKpK,EAAE,GACPqK,EAAKrK,EAAE,GAaJM,OAZPA,EAAI,GAAKuR,EAAKxH,EAAK2H,EAAK9H,EAAK4H,EAAK1H,EAAK2H,EAAK5H,EAC5C7J,EAAI,GAAKwR,EAAKzH,EAAK2H,EAAK7H,EAAK4H,EAAK7H,EAAK2H,EAAKzH,EAC5C9J,EAAI,GAAKyR,EAAK1H,EAAK2H,EAAK5H,EAAKyH,EAAK1H,EAAK2H,EAAK5H,EAC5C5J,EAAI,GAAK0R,EAAK3H,EAAKwH,EAAK3H,EAAK4H,EAAK3H,EAAK4H,EAAK3H,EAC5CF,EAAKlK,EAAE,GACPmK,EAAKnK,EAAE,GACPoK,EAAKpK,EAAE,GACPqK,EAAKrK,EAAE,GACPM,EAAI,GAAKuR,EAAKxH,EAAK2H,EAAK9H,EAAK4H,EAAK1H,EAAK2H,EAAK5H,EAC5C7J,EAAI,GAAKwR,EAAKzH,EAAK2H,EAAK7H,EAAK4H,EAAK7H,EAAK2H,EAAKzH,EAC5C9J,EAAI,GAAKyR,EAAK1H,EAAK2H,EAAK5H,EAAKyH,EAAK1H,EAAK2H,EAAK5H,EAC5C5J,EAAI,GAAK0R,EAAK3H,EAAKwH,EAAK3H,EAAK4H,EAAK3H,EAAK4H,EAAK3H,EACrC9J,EAYF,SAASwY,EAAiBxY,EAAKN,EAAGmJ,EAAMnH,GAEzCvC,GAAAA,KAAKU,IAAI6B,GAAOzB,EAASnB,QACpBqB,OAAAA,EAAKH,EAAKN,GAGf+Y,IAAAA,EAAatZ,KAAKoD,KAAKsG,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAKA,EAAK,IAClFnH,GAAY,GACRC,IAAAA,EAAIxC,KAAKyC,IAAIF,GACbkI,EAAKjI,EAAIkH,EAAK,GAAK4P,EACnB5O,EAAKlI,EAAIkH,EAAK,GAAK4P,EACnB3O,EAAKnI,EAAIkH,EAAK,GAAK4P,EACnB1O,EAAK5K,KAAK2C,IAAIJ,GACdiW,EAAMjY,EAAE,GACRkY,EAAMlY,EAAE,GACRmY,EAAMnY,EAAE,GACRoY,EAAMpY,EAAE,GACZM,EAAI,GAAK2X,EAAM5N,EAAK+N,EAAMlO,EAAKgO,EAAM9N,EAAK+N,EAAMhO,EAChD7J,EAAI,GAAK4X,EAAM7N,EAAK+N,EAAMjO,EAAKgO,EAAMjO,EAAK+N,EAAM7N,EAChD9J,EAAI,GAAK6X,EAAM9N,EAAK+N,EAAMhO,EAAK6N,EAAM9N,EAAK+N,EAAMhO,EAChD5J,EAAI,GAAK8X,EAAM/N,EAAK4N,EAAM/N,EAAKgO,EAAM/N,EAAKgO,EAAM/N,EAC5CE,IAAAA,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GACPwK,EAAKxK,EAAE,GACPyK,EAAKzK,EAAE,GAKJM,OAJPA,EAAI,GAAKgK,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,EAC5C7J,EAAI,GAAKiK,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,EAC5C9J,EAAI,GAAKkK,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,EAC5C5J,EAAI,GAAKmK,EAAKJ,EAAKC,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,EACrC9J,EAYF,SAAS6C,EAAI7C,EAAKN,EAAGE,GASnBI,OARPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAWF,SAASoB,EAASpB,EAAKN,EAAGE,GAC3B8Y,IAAAA,EAAMhZ,EAAE,GACRiZ,EAAMjZ,EAAE,GACRkZ,EAAMlZ,EAAE,GACRmZ,EAAMnZ,EAAE,GACRqY,EAAMnY,EAAE,GACRoY,EAAMpY,EAAE,GACRqY,EAAMrY,EAAE,GACRkZ,EAAMlZ,EAAE,GACR+X,EAAMjY,EAAE,GACRkY,EAAMlY,EAAE,GACRmY,EAAMnY,EAAE,GACRoY,EAAMpY,EAAE,GACRqZ,EAAMnZ,EAAE,GACRoZ,EAAMpZ,EAAE,GACRqZ,EAAMrZ,EAAE,GACRsZ,EAAMtZ,EAAE,GASLI,OARPA,EAAI,GAAK0Y,EAAMQ,EAAML,EAAME,EAAMJ,EAAMM,EAAML,EAAMI,EACnDhZ,EAAI,GAAK2Y,EAAMO,EAAML,EAAMG,EAAMJ,EAAMG,EAAML,EAAMO,EACnDjZ,EAAI,GAAK4Y,EAAMM,EAAML,EAAMI,EAAMP,EAAMM,EAAML,EAAMI,EACnD/Y,EAAI,GAAK6Y,EAAMK,EAAMR,EAAMK,EAAMJ,EAAMK,EAAMJ,EAAMK,EACnDjZ,EAAI,GAAK0Y,EAAMI,EAAMD,EAAMd,EAAMY,EAAMV,EAAMW,EAAMZ,EAAML,EAAMuB,EAAMpB,EAAMiB,EAAMnB,EAAMqB,EAAMpB,EAAMmB,EACnGhZ,EAAI,GAAK2Y,EAAMG,EAAMD,EAAMb,EAAMY,EAAMb,EAAMW,EAAMT,EAAML,EAAMsB,EAAMpB,EAAMkB,EAAMnB,EAAMkB,EAAMpB,EAAMsB,EACnGjZ,EAAI,GAAK4Y,EAAME,EAAMD,EAAMZ,EAAMS,EAAMV,EAAMW,EAAMZ,EAAMF,EAAMqB,EAAMpB,EAAMmB,EAAMtB,EAAMqB,EAAMpB,EAAMmB,EACnG/Y,EAAI,GAAK6Y,EAAMC,EAAMJ,EAAMX,EAAMY,EAAMX,EAAMY,EAAMX,EAAMH,EAAMoB,EAAMvB,EAAMoB,EAAMnB,EAAMoB,EAAMnB,EAAMoB,EAC5FjZ,EAuNR,QAAA,QAAA,EAhNM,IAAIkD,EAAM9B,EAWV,SAASW,EAAM/B,EAAKN,EAAGE,GASrBI,OARPA,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EACTI,EA4LR,QAAA,IAAA,EAjLM,IAAIqQ,EAAMgH,EAAKhH,IAYf,SAASE,EAAKvQ,EAAKN,EAAGE,EAAGkJ,GAC1BqQ,IAAAA,EAAK,EAAIrQ,EAUN9I,OATHqQ,EAAI3Q,EAAGE,GAAK,IAAGkJ,GAAKA,GACxB9I,EAAI,GAAKN,EAAE,GAAKyZ,EAAKvZ,EAAE,GAAKkJ,EAC5B9I,EAAI,GAAKN,EAAE,GAAKyZ,EAAKvZ,EAAE,GAAKkJ,EAC5B9I,EAAI,GAAKN,EAAE,GAAKyZ,EAAKvZ,EAAE,GAAKkJ,EAC5B9I,EAAI,GAAKN,EAAE,GAAKyZ,EAAKvZ,EAAE,GAAKkJ,EAC5B9I,EAAI,GAAKN,EAAE,GAAKyZ,EAAKvZ,EAAE,GAAKkJ,EAC5B9I,EAAI,GAAKN,EAAE,GAAKyZ,EAAKvZ,EAAE,GAAKkJ,EAC5B9I,EAAI,GAAKN,EAAE,GAAKyZ,EAAKvZ,EAAE,GAAKkJ,EAC5B9I,EAAI,GAAKN,EAAE,GAAKyZ,EAAKvZ,EAAE,GAAKkJ,EACrB9I,EAUF,SAASa,EAAOb,EAAKN,GACtB0Z,IAAAA,EAAQnJ,EAAcvQ,GASnBM,OARPA,EAAI,IAAMN,EAAE,GAAK0Z,EACjBpZ,EAAI,IAAMN,EAAE,GAAK0Z,EACjBpZ,EAAI,IAAMN,EAAE,GAAK0Z,EACjBpZ,EAAI,GAAKN,EAAE,GAAK0Z,EAChBpZ,EAAI,IAAMN,EAAE,GAAK0Z,EACjBpZ,EAAI,IAAMN,EAAE,GAAK0Z,EACjBpZ,EAAI,IAAMN,EAAE,GAAK0Z,EACjBpZ,EAAI,GAAKN,EAAE,GAAK0Z,EACTpZ,EAWF,SAASyV,EAAUzV,EAAKN,GAStBM,OARPA,EAAI,IAAMN,EAAE,GACZM,EAAI,IAAMN,EAAE,GACZM,EAAI,IAAMN,EAAE,GACZM,EAAI,GAAKN,EAAE,GACXM,EAAI,IAAMN,EAAE,GACZM,EAAI,IAAMN,EAAE,GACZM,EAAI,IAAMN,EAAE,GACZM,EAAI,GAAKN,EAAE,GACJM,EAkHR,QAAA,IAAA,EAxGM,IAAIwP,EAAS6H,EAAK7H,OAwGxB,QAAA,OAAA,EAlGM,IAAIzG,EAAMyG,EAkGhB,QAAA,IAAA,EAzFM,IAAIS,EAAgBoH,EAAKpH,cAyF/B,QAAA,cAAA,EAnFM,IAAI2C,EAAS3C,EAUb,SAASG,EAAUpQ,EAAKN,GACzB0K,IAAAA,EAAY6F,EAAcvQ,GAE1B0K,GAAAA,EAAY,EAAG,CACjBA,EAAYjL,KAAKoD,KAAK6H,GAClBtJ,IAAAA,EAAKpB,EAAE,GAAK0K,EACZxJ,EAAKlB,EAAE,GAAK0K,EACZrJ,EAAKrB,EAAE,GAAK0K,EACZpJ,EAAKtB,EAAE,GAAK0K,EACZ/I,EAAK3B,EAAE,GACP4B,EAAK5B,EAAE,GACP6B,EAAK7B,EAAE,GACP8B,EAAK9B,EAAE,GACP2Z,EAAUvY,EAAKO,EAAKT,EAAKU,EAAKP,EAAKQ,EAAKP,EAAKQ,EACjDxB,EAAI,GAAKc,EACTd,EAAI,GAAKY,EACTZ,EAAI,GAAKe,EACTf,EAAI,GAAKgB,EACThB,EAAI,IAAMqB,EAAKP,EAAKuY,GAAWjP,EAC/BpK,EAAI,IAAMsB,EAAKV,EAAKyY,GAAWjP,EAC/BpK,EAAI,IAAMuB,EAAKR,EAAKsY,GAAWjP,EAC/BpK,EAAI,IAAMwB,EAAKR,EAAKqY,GAAWjP,EAG1BpK,OAAAA,EASF,SAASqC,EAAI3C,GACX,MAAA,SAAWA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAUtH,SAASqD,EAAYrD,EAAGE,GACtBF,OAAAA,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,GAUpI,SAASD,EAAOD,EAAGE,GACpBkB,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACPqB,EAAKrB,EAAE,GACPsB,EAAKtB,EAAE,GACPmE,EAAKnE,EAAE,GACPoE,EAAKpE,EAAE,GACPsI,EAAKtI,EAAE,GACPuI,EAAKvI,EAAE,GACP2B,EAAKzB,EAAE,GACP0B,EAAK1B,EAAE,GACP2B,EAAK3B,EAAE,GACP4B,EAAK5B,EAAE,GACPmE,EAAKnE,EAAE,GACPoE,EAAKpE,EAAE,GACPuI,EAAKvI,EAAE,GACPwI,EAAKxI,EAAE,GACJT,OAAAA,KAAKU,IAAIiB,EAAKO,IAAOpB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIiB,GAAK3B,KAAKU,IAAIwB,KAAQlC,KAAKU,IAAIe,EAAKU,IAAOrB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIe,GAAKzB,KAAKU,IAAIyB,KAAQnC,KAAKU,IAAIkB,EAAKQ,IAAOtB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIkB,GAAK5B,KAAKU,IAAI0B,KAAQpC,KAAKU,IAAImB,EAAKQ,IAAOvB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImB,GAAK7B,KAAKU,IAAI2B,KAAQrC,KAAKU,IAAIgE,EAAKE,IAAO9D,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIgE,GAAK1E,KAAKU,IAAIkE,KAAQ5E,KAAKU,IAAIiE,EAAKE,IAAO/D,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIiE,GAAK3E,KAAKU,IAAImE,KAAQ7E,KAAKU,IAAImI,EAAKG,IAAOlI,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImI,GAAK7I,KAAKU,IAAIsI,KAAQhJ,KAAKU,IAAIoI,EAAKG,IAAOnI,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIoI,GAAK9I,KAAKU,IAAIuI,IACxqB,QAAA,OAAA;;AC/NM,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,WAAA,EAAA,QAAA,KAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,KAAA,EAAA,QAAA,MAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,MAAA,EAAA,QAAA,MAAA,EAAA,QAAA,YAAA,EAAA,QAAA,SAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,OAAA,EAAA,QAAA,cAAA,EAAA,QAAA,OAAA,EAAA,QAAA,QAAA,EAAA,QAAA,UAAA,EAAA,QAAA,IAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,OAAA,EAAA,QAAA,cAAA,EAAA,QAAA,eAAA,EAAA,QAAA,cAAA,EAAA,QAAA,cAAA,EAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,IAAA,EAAA,QAAA,YAAA,EAAA,QAAA,OAAA,EAAA,QAAA,QAAA,QAAA,OAAA,QAAA,QAAA,QAAA,KAAA,QAAA,IAAA,QAAA,IAAA,QAAA,IAAA,QAAA,SAAA,EAnmBP,IAAA,EAAA,EAAA,QAAA,gBAmmBO,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,OAAA,yBAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,IAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,EAvlBA,SAASrI,IACVC,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAO3BiB,OALHC,EAASlB,YAAcC,eACzBgB,EAAI,GAAK,EACTA,EAAI,GAAK,GAGJA,EASF,SAASE,EAAMR,GAChBM,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAG3BiB,OAFPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACJM,EAUF,SAASK,EAAWsF,EAAGC,GACxB5F,IAAAA,EAAM,IAAIC,EAASlB,WAAW,GAG3BiB,OAFPA,EAAI,GAAK2F,EACT3F,EAAI,GAAK4F,EACF5F,EAUF,SAASG,EAAKH,EAAKN,GAGjBM,OAFPA,EAAI,GAAKN,EAAE,GACXM,EAAI,GAAKN,EAAE,GACJM,EAWF,SAASU,EAAIV,EAAK2F,EAAGC,GAGnB5F,OAFPA,EAAI,GAAK2F,EACT3F,EAAI,GAAK4F,EACF5F,EAWF,SAAS6C,EAAI7C,EAAKN,EAAGE,GAGnBI,OAFPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAWF,SAAS8C,EAAS9C,EAAKN,EAAGE,GAGxBI,OAFPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAWF,SAASoB,EAASpB,EAAKN,EAAGE,GAGxBI,OAFPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAWF,SAASyP,EAAOzP,EAAKN,EAAGE,GAGtBI,OAFPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAClBI,EAAI,GAAKN,EAAE,GAAKE,EAAE,GACXI,EAUF,SAAS0P,EAAK1P,EAAKN,GAGjBM,OAFPA,EAAI,GAAKb,KAAKuQ,KAAKhQ,EAAE,IACrBM,EAAI,GAAKb,KAAKuQ,KAAKhQ,EAAE,IACdM,EAUF,SAAS2P,EAAM3P,EAAKN,GAGlBM,OAFPA,EAAI,GAAKb,KAAKwQ,MAAMjQ,EAAE,IACtBM,EAAI,GAAKb,KAAKwQ,MAAMjQ,EAAE,IACfM,EAWF,SAAS4P,EAAI5P,EAAKN,EAAGE,GAGnBI,OAFPA,EAAI,GAAKb,KAAKyQ,IAAIlQ,EAAE,GAAIE,EAAE,IAC1BI,EAAI,GAAKb,KAAKyQ,IAAIlQ,EAAE,GAAIE,EAAE,IACnBI,EAWF,SAASF,EAAIE,EAAKN,EAAGE,GAGnBI,OAFPA,EAAI,GAAKb,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IAC1BI,EAAI,GAAKb,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IACnBI,EAUF,SAAS6P,EAAM7P,EAAKN,GAGlBM,OAFPA,EAAI,GAAKb,KAAK0Q,MAAMnQ,EAAE,IACtBM,EAAI,GAAKb,KAAK0Q,MAAMnQ,EAAE,IACfM,EAWF,SAAS+B,EAAM/B,EAAKN,EAAGE,GAGrBI,OAFPA,EAAI,GAAKN,EAAE,GAAKE,EAChBI,EAAI,GAAKN,EAAE,GAAKE,EACTI,EAYF,SAAS8P,EAAY9P,EAAKN,EAAGE,EAAGmC,GAG9B/B,OAFPA,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EACvB/B,EAAI,GAAKN,EAAE,GAAKE,EAAE,GAAKmC,EAChB/B,EAUF,SAAS+P,EAASrQ,EAAGE,GACtB+F,IAAAA,EAAI/F,EAAE,GAAKF,EAAE,GACbkG,EAAIhG,EAAE,GAAKF,EAAE,GACVP,OAAAA,KAAKoD,KAAKoD,EAAIA,EAAIC,EAAIA,GAUxB,SAASoK,EAAgBtQ,EAAGE,GAC7B+F,IAAAA,EAAI/F,EAAE,GAAKF,EAAE,GACbkG,EAAIhG,EAAE,GAAKF,EAAE,GACViG,OAAAA,EAAIA,EAAIC,EAAIA,EASd,SAAS4J,EAAO9P,GACjBiG,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GACHP,OAAAA,KAAKoD,KAAKoD,EAAIA,EAAIC,EAAIA,GASxB,SAASqK,EAAcvQ,GACxBiG,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GACHiG,OAAAA,EAAIA,EAAIC,EAAIA,EAUd,SAASsK,EAAOlQ,EAAKN,GAGnBM,OAFPA,EAAI,IAAMN,EAAE,GACZM,EAAI,IAAMN,EAAE,GACLM,EAUF,SAASmQ,EAAQnQ,EAAKN,GAGpBM,OAFPA,EAAI,GAAK,EAAMN,EAAE,GACjBM,EAAI,GAAK,EAAMN,EAAE,GACVM,EAUF,SAASoQ,EAAUpQ,EAAKN,GACzBiG,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GACNqJ,EAAMpD,EAAIA,EAAIC,EAAIA,EASf5F,OAPH+I,EAAM,IAERA,EAAM,EAAI5J,KAAKoD,KAAKwG,IAGtB/I,EAAI,GAAKN,EAAE,GAAKqJ,EAChB/I,EAAI,GAAKN,EAAE,GAAKqJ,EACT/I,EAUF,SAASqQ,EAAI3Q,EAAGE,GACdF,OAAAA,EAAE,GAAKE,EAAE,GAAKF,EAAE,GAAKE,EAAE,GAYzB,SAAS0Q,EAAMtQ,EAAKN,EAAGE,GACxBoG,IAAAA,EAAItG,EAAE,GAAKE,EAAE,GAAKF,EAAE,GAAKE,EAAE,GAGxBI,OAFPA,EAAI,GAAKA,EAAI,GAAK,EAClBA,EAAI,GAAKgG,EACFhG,EAYF,SAASuQ,EAAKvQ,EAAKN,EAAGE,EAAGkJ,GAC1BkB,IAAAA,EAAKtK,EAAE,GACPuK,EAAKvK,EAAE,GAGJM,OAFPA,EAAI,GAAKgK,EAAKlB,GAAKlJ,EAAE,GAAKoK,GAC1BhK,EAAI,GAAKiK,EAAKnB,GAAKlJ,EAAE,GAAKqK,GACnBjK,EAUF,SAASZ,EAAOY,EAAK+B,GAC1BA,EAAQA,GAAS,EACbkP,IAAAA,EAAwB,EAApBhR,EAASf,SAAiBC,KAAKK,GAGhCQ,OAFPA,EAAI,GAAKb,KAAK2C,IAAImP,GAAKlP,EACvB/B,EAAI,GAAKb,KAAKyC,IAAIqP,GAAKlP,EAChB/B,EAWF,SAASsZ,EAActZ,EAAKN,EAAG0R,GAChCzL,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GAGHM,OAFPA,EAAI,GAAKoR,EAAE,GAAKzL,EAAIyL,EAAE,GAAKxL,EAC3B5F,EAAI,GAAKoR,EAAE,GAAKzL,EAAIyL,EAAE,GAAKxL,EACpB5F,EAWF,SAASuZ,EAAevZ,EAAKN,EAAG0R,GACjCzL,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GAGHM,OAFPA,EAAI,GAAKoR,EAAE,GAAKzL,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,GACjCpR,EAAI,GAAKoR,EAAE,GAAKzL,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,GAC1BpR,EAYF,SAASqR,EAAcrR,EAAKN,EAAG0R,GAChCzL,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GAGHM,OAFPA,EAAI,GAAKoR,EAAE,GAAKzL,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,GACjCpR,EAAI,GAAKoR,EAAE,GAAKzL,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,GAC1BpR,EAaF,SAASmR,EAAcnR,EAAKN,EAAG0R,GAChCzL,IAAAA,EAAIjG,EAAE,GACNkG,EAAIlG,EAAE,GAGHM,OAFPA,EAAI,GAAKoR,EAAE,GAAKzL,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,IACjCpR,EAAI,GAAKoR,EAAE,GAAKzL,EAAIyL,EAAE,GAAKxL,EAAIwL,EAAE,IAC1BpR,EAWF,SAASyB,EAAOzB,EAAKN,EAAGE,EAAGiC,GAE5B2X,IAAAA,EAAK9Z,EAAE,GAAKE,EAAE,GACd6Z,EAAK/Z,EAAE,GAAKE,EAAE,GACd8Z,EAAOva,KAAKyC,IAAIC,GAChB8X,EAAOxa,KAAK2C,IAAID,GAIb7B,OAFPA,EAAI,GAAKwZ,EAAKG,EAAOF,EAAKC,EAAO9Z,EAAE,GACnCI,EAAI,GAAKwZ,EAAKE,EAAOD,EAAKE,EAAO/Z,EAAE,GAC5BI,EASF,SAASmS,EAAMzS,EAAGE,GACnBqO,IAAAA,EAAKvO,EAAE,GACPyO,EAAKzO,EAAE,GACPwG,EAAKtG,EAAE,GACPuG,EAAKvG,EAAE,GACPga,EAAO3L,EAAKA,EAAKE,EAAKA,EAEtByL,EAAO,IAETA,EAAO,EAAIza,KAAKoD,KAAKqX,IAGnBC,IAAAA,EAAO3T,EAAKA,EAAKC,EAAKA,EAEtB0T,EAAO,IAETA,EAAO,EAAI1a,KAAKoD,KAAKsX,IAGnBvH,IAAAA,GAAUrE,EAAK/H,EAAKiI,EAAKhI,GAAMyT,EAAOC,EAEtCvH,OAAAA,EAAS,EACJ,EACEA,GAAU,EACZnT,KAAKK,GAELL,KAAKoT,KAAKD,GAUd,SAASE,EAAKxS,GAGZA,OAFPA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EASF,SAASqC,EAAI3C,GACX,MAAA,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAUjC,SAASqD,EAAYrD,EAAGE,GACtBF,OAAAA,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,GAU9B,SAASD,EAAOD,EAAGE,GACpBkB,IAAAA,EAAKpB,EAAE,GACPkB,EAAKlB,EAAE,GACP2B,EAAKzB,EAAE,GACP0B,EAAK1B,EAAE,GACJT,OAAAA,KAAKU,IAAIiB,EAAKO,IAAOpB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIiB,GAAK3B,KAAKU,IAAIwB,KAAQlC,KAAKU,IAAIe,EAAKU,IAAOrB,EAASnB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIe,GAAKzB,KAAKU,IAAIyB,IAOpK,IAAIyH,EAAMyG,EAkDV,QAAA,IAAA,EA5CA,IAAIrM,EAAML,EA4CV,QAAA,IAAA,EAtCA,IAAII,EAAM9B,EAsCV,QAAA,IAAA,EAhCA,IAAIqR,EAAMhD,EAgCV,QAAA,IAAA,EA1BA,IAAIiD,EAAO3C,EA0BX,QAAA,KAAA,EApBA,IAAI4C,EAAU3C,EAoBd,QAAA,QAAA,EAdA,IAAI4C,EAAS3C,EAcb,QAAA,OAAA,EAAA,IAAI4C,EAAU,WACfC,IAAAA,EAAM/S,IACH,OAAA,SAAUL,EAAGqT,EAAQC,EAAQC,EAAOC,EAAIC,GACzCC,IAAAA,EAAGC,EAgBFD,IAdAL,IACHA,EAAS,GAGNC,IACHA,EAAS,GAITK,EADEJ,EACE9T,KAAKyQ,IAAIqD,EAAQF,EAASC,EAAQtT,EAAE8P,QAEpC9P,EAAE8P,OAGH4D,EAAIJ,EAAQI,EAAIC,EAAGD,GAAKL,EAC3BD,EAAI,GAAKpT,EAAE0T,GACXN,EAAI,GAAKpT,EAAE0T,EAAI,GACfF,EAAGJ,EAAKA,EAAKK,GACbzT,EAAE0T,GAAKN,EAAI,GACXpT,EAAE0T,EAAI,GAAKN,EAAI,GAGVpT,OAAAA,GA3BU,GAAd,QAAA,QAAA;;AC1lBP,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA,QAAA,KAAA,QAAA,KAAA,QAAA,MAAA,QAAA,KAAA,QAAA,KAAA,QAAA,KAAA,QAAA,MAAA,QAAA,KAAA,QAAA,cAAA,EATA,IAAA,EAAA,EAAA,QAAA,gBASA,QAAA,SAAA,EARA,IAAA,EAAA,EAAA,QAAA,cAQA,QAAA,KAAA,EAPA,IAAA,EAAA,EAAA,QAAA,eAOA,QAAA,MAAA,EANA,IAAA,EAAA,EAAA,QAAA,cAMA,QAAA,KAAA,EALA,IAAA,EAAA,EAAA,QAAA,cAKA,QAAA,KAAA,EAJA,IAAA,EAAA,EAAA,QAAA,cAIA,QAAA,KAAA,EAHA,IAAA,EAAA,EAAA,QAAA,eAGA,QAAA,MAAA,EAFA,IAAA,EAAA,EAAA,QAAA,cAEA,QAAA,KAAA,EADA,IAAA,EAAA,EAAA,QAAA,cACA,QAAA,KAAA,EAAA,IAAA,EAAA,EAAA,QAAA,cAAA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,OAAA,yBAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,IAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,EAAA,QAAA,KAAA;;ACTA,aAEAoa,OAAOC,eAAeC,QAAS,aAAc,CAAEC,OAAO,IAkBtD,IAAIC,EAAgB,SAAS9W,EAAGxD,GAIrBsa,OAHPA,EAAgBJ,OAAOK,gBAClB,CAAEC,UAAW,cAAgBnb,OAAS,SAAUmE,EAAGxD,GAAKwD,EAAEgX,UAAYxa,IACvE,SAAUwD,EAAGxD,GAAU,IAAA,IAAIsS,KAAKtS,EAAOA,EAAEya,eAAenI,KAAI9O,EAAE8O,GAAKtS,EAAEsS,MACpD9O,EAAGxD,IAG5B,SAAS0a,EAAUlX,EAAGxD,GAET2a,SAAAA,IAAYC,KAAAA,YAAcpX,EADnC8W,EAAc9W,EAAGxD,GAEjBwD,EAAEqX,UAAkB,OAAN7a,EAAaka,OAAO/Z,OAAOH,IAAM2a,EAAGE,UAAY7a,EAAE6a,UAAW,IAAIF,GAGnF,IAAIG,EAA0B,WAOnBA,OANEA,WACAC,KAAAA,SAAW,GACXC,KAAAA,SAAW,GACXC,KAAAA,QAAU,GACVC,KAAAA,QAAU,IALO,GAU1BC,EAAuB,SAAUC,GAExBD,SAAAA,EAAME,GACPC,IAAAA,OAAY,IAAPD,EAAgB,GAAKA,EAAIE,EAAKD,EAAGpT,MAAOA,OAAe,IAAPqT,EAAgB,EAAIA,EAAIC,EAAKF,EAAGnT,OAAQA,OAAgB,IAAPqT,EAAgB,EAAIA,EAAIC,EAAKH,EAAGI,cAAeA,OAAuB,IAAPD,EAAgB,EAAIA,EAAIE,EAAKL,EAAGM,eAAgBA,OAAwB,IAAPD,EAAgB,EAAIA,EAC1PE,EAAQT,EAAOU,KAAK,OAAS,KAM1BD,OALPA,EAAM3T,MAAQA,EACd2T,EAAM1T,OAASA,EACf0T,EAAMH,cAAgBnc,KAAKwQ,MAAM2L,GACjCG,EAAMD,eAAiBrc,KAAKwQ,MAAM6L,GAClCC,EAAME,WACCF,EAkDJV,OA3DPT,EAAUS,EAAOC,GAWjBD,EAAMN,UAAUkB,SAAW,WACnBV,IAAAA,EAAKF,EAAMa,QAAQ,IAAK,IAAK,IAAK,GAAI,EAAG,KAAK9T,MAAO,KAAKC,OAAQ,EAAG,KAAKuT,cAAe,KAAKE,gBAAiBb,EAAWM,EAAGN,SAAUE,EAAUI,EAAGJ,QAASD,EAAWK,EAAGL,SAAUE,EAAUG,EAAGH,QACjMH,KAAAA,SAAWA,EACXE,KAAAA,QAAUA,EACVD,KAAAA,SAAWA,EACXE,KAAAA,QAAUA,GAEnBC,EAAMa,QAAU,SAAUtI,EAAGtR,EAAGiE,EAAG4V,EAAMC,EAAMhU,EAAOC,EAAQgU,EAAOC,EAAOC,GAQnE,IAPDtB,IAAAA,EAAW,GACXE,EAAU,GACVD,EAAW,GACXE,EAAU,GACVoB,EAAepU,EAAQkU,EACvBG,EAAgBpU,EAASkU,EACzB1F,EAAO,GACFnD,EAAI,EAAGA,GAAK6I,EAAO7I,IAEnB,IADDxN,IAAAA,EAAIwN,EAAI+I,EAAgBpU,EAAS,EAC5B8N,EAAI,EAAGA,GAAKmG,EAAOnG,IAAK,CACzBlQ,IAAAA,EAAIkQ,EAAIqG,EAAepU,EAAQ,EACnCyO,EAAKjD,GAAK3N,EAAIkW,EACdtF,EAAKvU,GAAK4D,EAAIkW,EACdvF,EAAKtQ,GAAK8V,EAAQ,EAClBpB,EAASyB,KAAK7F,EAAK5Q,EAAG4Q,EAAK3Q,EAAG2Q,EAAKvQ,GACnCuQ,EAAKjD,GAAK,EACViD,EAAKvU,GAAK,EACVuU,EAAKtQ,GAAK8V,EAAQ,EAAI,GAAK,EAC3BlB,EAAQuB,KAAK7F,EAAK5Q,EAAG4Q,EAAK3Q,EAAG2Q,EAAKvQ,GAClC4U,EAASwB,KAAKvG,EAAImG,GAClBpB,EAASwB,KAAK,EAAIhJ,EAAI6I,GAGzB,IAAI7I,EAAI,EAAGA,EAAI6I,EAAO7I,IAClB,IAAIyC,EAAI,EAAGA,EAAImG,EAAOnG,IAAK,CACxBnW,IAAAA,EAAImW,GAAKmG,EAAQ,GAAK5I,EACtBxT,EAAIiW,GAAKmG,EAAQ,IAAM5I,EAAI,GAC3BvR,EAAIgU,EAAI,GAAKmG,EAAQ,IAAM5I,EAAI,GAC/BhQ,EAAIyS,EAAI,GAAKmG,EAAQ,GAAK5I,EAC9B0H,EAAQsB,KAAK1c,EAAGE,EAAGwD,GACnB0X,EAAQsB,KAAKxc,EAAGiC,EAAGuB,GAGpB,MAAA,CACHuX,SAAUA,EACVE,QAASA,EACTD,SAAUA,EACVE,QAASA,IAGVC,EA5DgB,CA6DzBL,GAEE2B,EAA6B,SAAUrB,GAE9BqB,SAAAA,EAAYpB,GACbC,IAAAA,OAAY,IAAPD,EAAgB,GAAKA,EAAIE,EAAKD,EAAGpT,MAAOA,OAAe,IAAPqT,EAAgB,EAAIA,EAAIC,EAAKF,EAAGnT,OAAQA,OAAgB,IAAPqT,EAAgB,EAAIA,EAAIC,EAAKH,EAAGa,MAAOA,OAAe,IAAPV,EAAgB,EAAIA,EAAIE,EAAKL,EAAGI,cAAeA,OAAuB,IAAPC,EAAgB,EAAIA,EAAIe,EAAKpB,EAAGM,eAAgBA,OAAwB,IAAPc,EAAgB,EAAIA,EAAIC,EAAKrB,EAAGsB,cAAeA,OAAuB,IAAPD,EAAgB,EAAIA,EACxWd,EAAQT,EAAOU,KAAK,OAAS,KAS1BD,OARPA,EAAMgB,MAAQ,GACdhB,EAAM3T,MAAQA,EACd2T,EAAM1T,OAASA,EACf0T,EAAMM,MAAQA,EACdN,EAAMH,cAAgBnc,KAAKwQ,MAAM2L,GACjCG,EAAMD,eAAiBrc,KAAKwQ,MAAM6L,GAClCC,EAAMe,cAAgBrd,KAAKwQ,MAAM6M,GACjCf,EAAME,SAASF,EAAM3T,MAAO2T,EAAM1T,OAAQ0T,EAAMM,MAAON,EAAMH,cAAeG,EAAMD,eAAgBC,EAAMe,eACjGf,EAqBJY,OAjCP/B,EAAU+B,EAAarB,GAcvBqB,EAAY5B,UAAUkB,SAAW,SAAU7T,EAAOC,EAAQgU,EAAOT,EAAeE,EAAgBgB,GACxFf,IAAAA,EAAQ,KACPgB,KAAAA,MAAQ,GACRA,KAAAA,MAAM3Q,KAAOiP,EAAMa,QAAQ,IAAK,IAAK,KAAM,GAAI,EAAGG,EAAOhU,EAAQD,EAAO0U,EAAehB,GACvFiB,KAAAA,MAAM1Q,MAAQgP,EAAMa,QAAQ,IAAK,IAAK,IAAK,GAAI,EAAGG,EAAOhU,GAASD,EAAO0U,EAAehB,GACxFiB,KAAAA,MAAMxQ,IAAM8O,EAAMa,QAAQ,IAAK,IAAK,IAAK,EAAG,EAAG9T,EAAOiU,EAAOhU,EAAQuT,EAAekB,GACpFC,KAAAA,MAAMzQ,OAAS+O,EAAMa,QAAQ,IAAK,IAAK,IAAK,GAAI,EAAG9T,EAAOiU,GAAQhU,EAAQuT,EAAekB,GACzFC,KAAAA,MAAMC,MAAQ3B,EAAMa,QAAQ,IAAK,IAAK,KAAM,GAAI,EAAG9T,EAAOC,GAASgU,EAAOT,EAAeE,GACzFiB,KAAAA,MAAME,KAAO5B,EAAMa,QAAQ,IAAK,IAAK,IAAK,GAAI,EAAG9T,EAAOC,EAAQgU,EAAOT,EAAeE,GAC3F1B,OAAO8C,KAAK,KAAKH,OAAO5J,QAAQ,SAAUgK,EAAKzJ,GACvC0J,IAAAA,EAAOrB,EAAMgB,MAAMI,GACnBlC,EAAWmC,EAAKnC,SAAUE,EAAUiC,EAAKjC,QAASD,EAAWkC,EAAKlC,SAClEmC,EADsFD,EAAKhC,QACjEkC,IAAI,SAAUC,GAAiBA,OAAAA,EAAa,EAAJ7J,IACtEqI,EAAMd,SAAWc,EAAMd,SAASuC,OAAOvC,GACvCc,EAAMZ,QAAUY,EAAMZ,QAAQqC,OAAOrC,GACrCY,EAAMb,SAAWa,EAAMb,SAASsC,OAAOtC,GACvCa,EAAMX,QAAUW,EAAMX,QAAQoC,OAAOH,MAGtCV,EAlCsB,CAmC/B3B,GAEEyC,EAAgC,SAAUnC,GAEjCmC,SAAAA,EAAelC,GAChBC,IAAAA,OAAY,IAAPD,EAAgB,GAAKA,EAAIE,EAAKD,EAAGkC,OAAQA,OAAgB,IAAPjC,EAAgB,EAAIA,EAAIC,EAAKF,EAAGI,cAAeA,OAAuB,IAAPF,EAAgB,GAAKA,EAAIC,EAAKH,EAAGM,eAAgBA,OAAwB,IAAPH,EAAgB,GAAKA,EAC7MI,EAAQT,EAAOU,KAAK,OAAS,KAK1BD,OAJPA,EAAMH,cAAgBA,EACtBG,EAAMD,eAAiBA,EACvBC,EAAM2B,OAASA,EACf3B,EAAME,WACCF,EA6BJ0B,OArCP7C,EAAU6C,EAAgBnC,GAU1BmC,EAAe1C,UAAUkB,SAAW,WAC3B,IAAA,IAAI7T,EAAQ,EAAGA,GAAS,KAAKwT,cAAexT,IAIxC,IAHDuV,IAAAA,EAASvV,EAAQ3I,KAAKK,GAAM,KAAK8b,cACjCgC,EAAWne,KAAKyC,IAAIyb,GACpBE,EAAWpe,KAAK2C,IAAIub,GACftV,EAAS,EAAGA,GAAU,KAAKyT,eAAgBzT,IAAU,CACtDyV,IAAAA,EAAgB,EAATzV,EAAa5I,KAAKK,GAAM,KAAKgc,eACpCiC,EAASte,KAAKyC,IAAI4b,GAElB7X,EADSxG,KAAK2C,IAAI0b,GACLF,EACb1X,EAAI2X,EACJvX,EAAIyX,EAASH,EACbhK,EAAI,EAAIvL,EAAS,KAAKyT,eACtBxZ,EAAI,EAAI8F,EAAQ,KAAKwT,cACpBT,KAAAA,QAAQuB,KAAKzW,EAAGC,EAAGI,GACnB4U,KAAAA,SAASwB,KAAK9I,EAAGtR,GACjB2Y,KAAAA,SAASyB,KAAK,KAAKgB,OAASzX,EAAG,KAAKyX,OAASxX,EAAG,KAAKwX,OAASpX,GAGtE,IAAI8B,EAAQ,EAAGA,EAAQ,KAAKwT,cAAexT,IACvC,IAAIC,EAAS,EAAGA,EAAS,KAAKyT,eAAgBzT,IAAU,CACrD2V,IAAAA,EAAQ5V,GAAS,KAAK0T,eAAiB,GAAKzT,EAC5C4V,EAASD,EAAQ,KAAKlC,eAAiB,EACtCV,KAAAA,QAAQsB,KAAKuB,EAAQD,EAAOA,EAAQ,EAAGC,EAAS,EAAGA,EAAQD,EAAQ,KAI7EP,EAtCyB,CAuClCzC,GAEFV,QAAQ4D,IAAMvB,EACdrC,QAAQe,MAAQA,EAChBf,QAAQ6D,OAASV;;AC1LjBW,OAAO9D,QAAQ;;ACAf8D,OAAO9D,QAAQ;;ACwUf,aAxUA,IAAA,EAAA,QAAA,aACA,EAAA,QAAA,WAEA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,kBAoUA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,OAAA,KAAA,GAAA,mBAAA,OAAA,wBAAA,EAAA,EAAA,OAAA,OAAA,sBAAA,GAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,eAAA,EAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAlUM+D,IAAAA,EAkUN,WAjUgB,SAAA,IAAA,IAAA,EAAA,KAAA,EAAA,KAAA,GAqQA,EAAA,KAAA,cAAA,SAAAC,GACZA,EAAIA,EAAEC,QAAUD,EAAEC,QAAQ,GAAKD,EAC/B,EAAKE,MAAQC,EAAK9d,KAAAA,WAAW2d,EAAEI,QAASJ,EAAEK,SAC1C,EAAKC,cAAqB,EAAA,GAAA,EAAKnM,SAGnB,EAAA,KAAA,cAAA,SAAA6L,GACP,EAAKE,QACVF,EAAIA,EAAEC,QAAUD,EAAEC,QAAQ,GAAKD,EAE/B,EAAK7L,MAAMxM,EACT,EAAK2Y,cAAc3Y,GACjBqY,EAAEI,QAAU,EAAKF,MAAM,IAAM,EAAKK,OAAOzW,MAAS,IACtD,EAAKqK,MAAMnM,EACT,EAAKsY,cAActY,GACjBgY,EAAEK,QAAU,EAAKH,MAAM,IAAM,EAAKK,OAAOxW,OAAU,IAElDtG,EAAAA,KAAAA,OAAO,EAAK+c,UAAW,EAAKC,eAAgB,EAAKtM,MAAMxM,EAAG,CAAC,EAAG,EAAG,IACjElE,EAAAA,KAAAA,OAAO,EAAKid,UAAW,EAAKD,eAAgB,EAAKtM,MAAMnM,EAAG,CAAC,EAAG,EAAG,IACjE5E,EAAAA,KAAAA,SAAS,EAAKud,YAAa,EAAKD,UAAW,EAAKF,WACrD,EAAKI,GAAGC,iBACN,EAAKC,qBACL,EAAKF,GAAGG,MACR,EAAKJ,gBAIG,EAAA,KAAA,YAAA,WACV,EAAKT,MAAQ,OAGN,EAAA,KAAA,SAAA,WACP,EAAKc,IAAMC,OAAOC,sBAAsB,EAAKC,QAExC,EAAKjB,QACR,EAAK/L,MAAMxM,GAAK,IAChB,EAAKwM,MAAMnM,GAAK,KACXvE,EAAAA,KAAAA,OAAO,EAAK+c,UAAW,EAAKC,eAAgB,EAAKtM,MAAMxM,EAAG,CAAC,EAAG,EAAG,IACjElE,EAAAA,KAAAA,OAAO,EAAKid,UAAW,EAAKD,eAAgB,EAAKtM,MAAMnM,EAAG,CAAC,EAAG,EAAG,IACjE5E,EAAAA,KAAAA,SAAS,EAAKud,YAAa,EAAKD,UAAW,EAAKF,WACrD,EAAKI,GAAGC,iBACN,EAAKC,qBACL,EAAKF,GAAGG,MACR,EAAKJ,cAKT,EAAKC,GAAGQ,WAAW,GAAK,GAAK,GAAK,GAClC,EAAKR,GAAGS,MAAM,EAAKT,GAAGU,kBAEtB,EAAKV,GAAGW,aACN,EAAKX,GAAGY,UACR,EAAKC,IAAI3E,QAAQtL,OACjB,EAAKoP,GAAGc,eACR,KA3TGnB,KAAAA,OAASoB,SAASC,eAAe,UACjChB,KAAAA,GACH,KAAKL,OAAOsB,WAAW,UACvB,KAAKtB,OAAOsB,WAAW,sBAEpBjB,KAAAA,GAAK,KAAKkB,OAASC,QAAQC,IAAI,yBA2TxC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,uBAxTyB,MAAA,WAChBC,KAAAA,WACLhB,OAAOiB,qBAAqB,KAAKlB,KAC7B,IACFW,SAASQ,KAAKC,YAAY,KAAK7B,QAC/B,MAAOP,GACP+B,QAAQC,IAAIhC,MAkTlB,CAAA,IAAA,OA9SS,MAAA,WAEAqC,KAAAA,SAGA9B,KAAAA,OAAOzW,MAAQ,IACfyW,KAAAA,OAAOxW,OAAS,IAChB6W,KAAAA,GAAG0B,SAAS,EAAG,EAAG,KAAK/B,OAAOzW,MAAO,KAAKyW,OAAOxW,QAEjD6W,KAAAA,GAAG2B,OAAO,KAAK3B,GAAG4B,YAGlBC,KAAAA,QAAU,KAAKC,gBACf,KAAKD,UAGLE,KAAAA,QAAU,KAAKC,gBACf,KAAKD,UAGL/B,KAAAA,GAAGiC,WAAW,KAAKF,SAGnBlB,KAAAA,IAAM,IAAIpD,EAAJ,IACX0D,QAAQC,IAAI,KAAKP,KACZqB,KAAAA,YAGAC,KAAAA,iBAGA5O,KAAAA,MAAQ,CACXxM,EAAG,EACHK,EAAG,GAEAyY,KAAAA,eAAiBnH,EAAKvX,KAAAA,SACtBye,KAAAA,UAAYlH,EAAKvX,KAAAA,SACjB2e,KAAAA,UAAYpH,EAAKvX,KAAAA,SAGjBof,KAAAA,aAsQT,CAAA,IAAA,SAnQW,MAAA,WACFjB,KAAAA,MAAQ,KACRK,KAAAA,OAAOyC,iBAAiB,YAAa,KAAKC,aAC1C1C,KAAAA,OAAOyC,iBAAiB,aAAc,KAAKC,aAC3C1C,KAAAA,OAAOyC,iBAAiB,YAAa,KAAKE,aAC1C3C,KAAAA,OAAOyC,iBAAiB,YAAa,KAAKE,aAC/CjC,OAAO+B,iBAAiB,WAAY,KAAKG,WACzClC,OAAO+B,iBAAiB,aAAc,KAAKG,WAC3ClC,OAAO+B,iBAAiB,cAAe,KAAKG,WAC5ClC,OAAO+B,iBAAiB,UAAW,KAAKG,aA0P5C,CAAA,IAAA,WAvPa,MAAA,WACJ5C,KAAAA,OAAO6C,oBAAoB,YAAa,KAAKH,aAC7C1C,KAAAA,OAAO6C,oBAAoB,aAAc,KAAKH,aAC9C1C,KAAAA,OAAO6C,oBAAoB,YAAa,KAAKF,aAC7C3C,KAAAA,OAAO6C,oBAAoB,YAAa,KAAKF,aAClDjC,OAAOmC,oBAAoB,WAAY,KAAKD,WAC5ClC,OAAOmC,oBAAoB,aAAc,KAAKD,WAC9ClC,OAAOmC,oBAAoB,cAAe,KAAKD,WAC/ClC,OAAOmC,oBAAoB,UAAW,KAAKD,aA+O/C,CAAA,IAAA,gBA5OkB,MAAA,WAERE,IAAAA,EAAe,KAAKzC,GAAG0C,aAAa,KAAK1C,GAAG2C,eAC5CC,EAAiB,KAAK5C,GAAG0C,aAAa,KAAK1C,GAAG6C,iBAQhD,OALC7C,KAAAA,GAAG8C,aAAaL,EAAcM,EAAnC,SACK/C,KAAAA,GAAG8C,aAAaF,EAAgBI,EAArC,SAGKhD,KAAAA,GAAGiD,cAAcR,GACjB,KAAKzC,GAAGkD,mBAAmBT,EAAc,KAAKzC,GAAGmD,iBAOjDnD,KAAAA,GAAGiD,cAAcL,GACjB,KAAK5C,GAAGkD,mBAAmBN,EAAgB,KAAK5C,GAAGmD,gBAQjD,CACLV,aAAAA,EACAG,eAAAA,IATAzB,QAAQiC,MACN,2CACA,KAAKpD,GAAGqD,iBAAiBT,IAEpB,QAZPzB,QAAQiC,MACN,yCACA,KAAKpD,GAAGqD,iBAAiBZ,IAEpB,QA4Nb,CAAA,IAAA,gBA3MkB,MAAA,WAC2B,IAAA,EAAA,KAAKZ,QAAtCY,EAAAA,EAAAA,aAAcG,EAAAA,EAAAA,eAGhBb,EAAU,KAAK/B,GAAGgC,gBAMpB,OALChC,KAAAA,GAAGsD,aAAavB,EAASU,GACzBzC,KAAAA,GAAGsD,aAAavB,EAASa,GAGzB5C,KAAAA,GAAGuD,YAAYxB,GACf,KAAK/B,GAAGwD,oBAAoBzB,EAAS,KAAK/B,GAAGyD,cAS7CzD,KAAAA,GAAG0D,gBAAgB3B,GACnB,KAAK/B,GAAGwD,oBAAoBzB,EAAS,KAAK/B,GAAG2D,iBAQ3C5B,GAPLZ,QAAQiC,MACN,kCACA,KAAKpD,GAAG4D,kBAAkB7B,IAErB,QAdPZ,QAAQiC,MACN,4BACA,KAAKpD,GAAG4D,kBAAkB7B,IAErB,QA4Lb,CAAA,IAAA,YA5Kc,MAAA,WAC6B,IAAA,EAAA,KAAKlB,IAApC9E,EAAAA,EAAAA,SAAUG,EAAAA,EAAAA,QAASD,EAAAA,EAAAA,QAGrB4H,EAAgB,KAAK7D,GAAG8D,eACzB9D,KAAAA,GAAG+D,WAAW,KAAK/D,GAAGgE,qBAAsBH,GAC5C7D,KAAAA,GAAGiE,WACN,KAAKjE,GAAGgE,qBACR,IAAIE,YAAYhI,GAChB,KAAK8D,GAAGmE,aAIJC,IAAAA,EAAe,KAAKpE,GAAG8D,eACxB9D,KAAAA,GAAG+D,WAAW,KAAK/D,GAAGqE,aAAcD,GACpCpE,KAAAA,GAAGiE,WACN,KAAKjE,GAAGqE,aACR,IAAIjkB,aAAa2b,GACjB,KAAKiE,GAAGmE,aAIJG,IAAAA,EAAmB,KAAKtE,GAAGuE,kBAAkB,KAAKxC,QAAS,YAE5D/B,KAAAA,GAAGwE,oBACNF,EADF,EAGOtE,KAAAA,GAAGyE,MACHzE,KAAAA,GAAGG,MACJ/f,EAAAA,aAAaskB,kBALnB,GASK1E,KAAAA,GAAG2E,wBAAwBL,GAG1BM,IAAAA,EAAgB,KAAK5E,GAAG8D,eACzB9D,KAAAA,GAAG+D,WAAW,KAAK/D,GAAGqE,aAAcO,GACpC5E,KAAAA,GAAGiE,WACN,KAAKjE,GAAGqE,aACR,IAAIjkB,aAAa6b,GACjB,KAAK+D,GAAGmE,aAIJU,IAAAA,EAAiB,KAAK7E,GAAGuE,kBAAkB,KAAKxC,QAAS,UAE1D/B,KAAAA,GAAGwE,oBACNK,EADF,EAGO7E,KAAAA,GAAGyE,MACHzE,KAAAA,GAAGG,MACJ/f,EAAAA,aAAaskB,kBALnB,GASK1E,KAAAA,GAAG2E,wBAAwBE,KAoHpC,CAAA,IAAA,iBAjHmB,MAAA,WAEV3E,KAAAA,qBAAuB,KAAKF,GAAG8E,mBAClC,KAAK/C,QACL,WAEGgD,KAAAA,oBAAsB,KAAK/E,GAAG8E,mBACjC,KAAK/C,QACL,UAEGiD,KAAAA,0BAA4B,KAAKhF,GAAG8E,mBACvC,KAAK/C,QACL,gBAIGhC,KAAAA,YAAcrH,EAAKvX,KAAAA,SACnB8jB,KAAAA,WAAavM,EAAKvX,KAAAA,SAClB+jB,KAAAA,iBAAmBxM,EAAKvX,KAAAA,SAGxB6N,EAAAA,KAAAA,OACH,KAAKiW,WACL,CAAC,EAAG,GAAI,GACP,CAAA,EAAG,EAAG,GACN,CAAA,EAAG,EAAG,IAEJtX,EAAAA,KAAAA,YACH,KAAKuX,iBACL3kB,KAAKK,GAAK,EACL+e,KAAAA,OAAOzW,MAAQ,KAAKyW,OAAOxW,OAHlC,GAAA,KASK6W,KAAAA,GAAGC,iBACN,KAAKC,qBACL,KAAKF,GAAGG,MACR,KAAKJ,aAEFC,KAAAA,GAAGC,iBACN,KAAK8E,oBACL,KAAK/E,GAAGG,MACR,KAAK8E,YAEFjF,KAAAA,GAAGC,iBACN,KAAK+E,0BACL,KAAKhF,GAAGG,MACR,KAAK+E,sBAgEX,EAAA,GAAA,IAAI/F","file":"workspace.4abc33ec.js","sourceRoot":"../../workspace","sourcesContent":["/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty,\r\n *  0, 0, 1]\r\n * </pre>\r\n * The last row is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q quaternion\r\n * @param {vec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {vec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {mat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {quat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {quat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat} q quaternion to rotate by\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {vec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {quat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat2} a the first dual quaternion.\r\n * @param {quat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat2} a the first dual quat.\r\n * @param {quat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\nvar Geometry = /** @class */ (function () {\n    function Geometry() {\n        this.vertices = [];\n        this.textures = [];\n        this.normals = [];\n        this.indices = [];\n    }\n    return Geometry;\n}());\n\nvar Plane = /** @class */ (function (_super) {\n    __extends(Plane, _super);\n    function Plane(_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.width, width = _c === void 0 ? 1 : _c, _d = _b.height, height = _d === void 0 ? 1 : _d, _e = _b.widthSegments, widthSegments = _e === void 0 ? 1 : _e, _f = _b.heightSegments, heightSegments = _f === void 0 ? 1 : _f;\n        var _this = _super.call(this) || this;\n        _this.width = width;\n        _this.height = height;\n        _this.widthSegments = Math.floor(widthSegments);\n        _this.heightSegments = Math.floor(heightSegments);\n        _this.generate();\n        return _this;\n    }\n    Plane.prototype.generate = function () {\n        var _a = Plane.compute('x', 'y', 'z', 1, -1, this.width, this.height, 0, this.widthSegments, this.heightSegments), vertices = _a.vertices, normals = _a.normals, textures = _a.textures, indices = _a.indices;\n        this.vertices = vertices;\n        this.normals = normals;\n        this.textures = textures;\n        this.indices = indices;\n    };\n    Plane.compute = function (u, v, w, udir, vdir, width, height, depth, gridX, gridY) {\n        var vertices = [];\n        var normals = [];\n        var textures = [];\n        var indices = [];\n        var segmentWidth = width / gridX;\n        var segmentHeight = height / gridY;\n        var vec3 = {};\n        for (var i = 0; i <= gridY; i++) {\n            var y = i * segmentHeight - height / 2;\n            for (var j = 0; j <= gridX; j++) {\n                var x = j * segmentWidth - width / 2;\n                vec3[u] = x * udir;\n                vec3[v] = y * vdir;\n                vec3[w] = depth / 2;\n                vertices.push(vec3.x, vec3.y, vec3.z);\n                vec3[u] = 0;\n                vec3[v] = 0;\n                vec3[w] = depth > 0 ? 1 : -1;\n                normals.push(vec3.x, vec3.y, vec3.z);\n                textures.push(j / gridX);\n                textures.push(1 - i / gridY);\n            }\n        }\n        for (var i = 0; i < gridY; i++) {\n            for (var j = 0; j < gridX; j++) {\n                var a = j + (gridX + 1) * i;\n                var b = j + (gridX + 1) * (i + 1);\n                var c = j + 1 + (gridX + 1) * (i + 1);\n                var d = j + 1 + (gridX + 1) * i;\n                indices.push(a, b, d);\n                indices.push(b, c, d);\n            }\n        }\n        return {\n            vertices: vertices,\n            normals: normals,\n            textures: textures,\n            indices: indices\n        };\n    };\n    return Plane;\n}(Geometry));\n\nvar BoxGeometry = /** @class */ (function (_super) {\n    __extends(BoxGeometry, _super);\n    function BoxGeometry(_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.width, width = _c === void 0 ? 1 : _c, _d = _b.height, height = _d === void 0 ? 1 : _d, _e = _b.depth, depth = _e === void 0 ? 1 : _e, _f = _b.widthSegments, widthSegments = _f === void 0 ? 1 : _f, _g = _b.heightSegments, heightSegments = _g === void 0 ? 1 : _g, _h = _b.depthSegments, depthSegments = _h === void 0 ? 1 : _h;\n        var _this = _super.call(this) || this;\n        _this.faces = {};\n        _this.width = width;\n        _this.height = height;\n        _this.depth = depth;\n        _this.widthSegments = Math.floor(widthSegments);\n        _this.heightSegments = Math.floor(heightSegments);\n        _this.depthSegments = Math.floor(depthSegments);\n        _this.generate(_this.width, _this.height, _this.depth, _this.widthSegments, _this.heightSegments, _this.depthSegments); // prettier-ignore\n        return _this;\n    }\n    BoxGeometry.prototype.generate = function (width, height, depth, widthSegments, heightSegments, depthSegments) {\n        var _this = this;\n        this.faces = {};\n        this.faces.left = Plane.compute('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments); // prettier-ignore\n        this.faces.right = Plane.compute('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments); // prettier-ignore\n        this.faces.top = Plane.compute('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments); // prettier-ignore\n        this.faces.bottom = Plane.compute('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments); // prettier-ignore\n        this.faces.front = Plane.compute('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments); // prettier-ignore\n        this.faces.back = Plane.compute('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments); // prettier-ignore\n        Object.keys(this.faces).forEach(function (key, i) {\n            var face = _this.faces[key];\n            var vertices = face.vertices, normals = face.normals, textures = face.textures, indices = face.indices;\n            var computedIndices = indices.map(function (indice) { return indice + i * 4; });\n            _this.vertices = _this.vertices.concat(vertices);\n            _this.normals = _this.normals.concat(normals);\n            _this.textures = _this.textures.concat(textures);\n            _this.indices = _this.indices.concat(computedIndices);\n        });\n    };\n    return BoxGeometry;\n}(Geometry));\n\nvar SphereGeometry = /** @class */ (function (_super) {\n    __extends(SphereGeometry, _super);\n    function SphereGeometry(_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.radius, radius = _c === void 0 ? 1 : _c, _d = _b.widthSegments, widthSegments = _d === void 0 ? 10 : _d, _e = _b.heightSegments, heightSegments = _e === void 0 ? 10 : _e;\n        var _this = _super.call(this) || this;\n        _this.widthSegments = widthSegments;\n        _this.heightSegments = heightSegments;\n        _this.radius = radius;\n        _this.generate();\n        return _this;\n    }\n    SphereGeometry.prototype.generate = function () {\n        for (var width = 0; width <= this.widthSegments; width++) {\n            var theta = (width * Math.PI) / this.widthSegments;\n            var sinTheta = Math.sin(theta);\n            var cosTheta = Math.cos(theta);\n            for (var height = 0; height <= this.heightSegments; height++) {\n                var phi = (height * 2 * Math.PI) / this.heightSegments;\n                var sinPhi = Math.sin(phi);\n                var cosPhi = Math.cos(phi);\n                var x = cosPhi * sinTheta;\n                var y = cosTheta;\n                var z = sinPhi * sinTheta;\n                var u = 1 - height / this.heightSegments;\n                var v = 1 - width / this.widthSegments;\n                this.normals.push(x, y, z);\n                this.textures.push(u, v);\n                this.vertices.push(this.radius * x, this.radius * y, this.radius * z);\n            }\n        }\n        for (var width = 0; width < this.widthSegments; width++) {\n            for (var height = 0; height < this.heightSegments; height++) {\n                var first = width * (this.heightSegments + 1) + height;\n                var second = first + this.heightSegments + 1;\n                this.indices.push(second, first, first + 1, second + 1, second, first + 1);\n            }\n        }\n    };\n    return SphereGeometry;\n}(Geometry));\n\nexports.Box = BoxGeometry;\nexports.Plane = Plane;\nexports.Sphere = SphereGeometry;\n","module.exports=\"#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nuniform mat4 u_world;\\nuniform mat4 u_view;\\nuniform mat4 u_projection;\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n  vNormal = normal;\\n  vPosition = position;\\n\\n  gl_Position = u_projection * u_view * u_world * vec4(position, 1.);\\n}\";","module.exports=\"#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\nvarying vec3 vNormal;\\nvarying vec3 vPosition;\\n\\nvoid main() {\\n  vec3 color = (vNormal * vPosition + 1.) * .5;\\n  gl_FragColor = vec4(color, 1.);\\n}\";","import { vec2, mat4 } from 'gl-matrix'\nimport { Box as BoxGeometry } from '../dist'\n\nimport vertexSource from './shader.vert'\nimport fragmentSource from './shader.frag'\n\nclass App {\n  constructor() {\n    this.canvas = document.getElementById('canvas')\n    this.gl =\n      this.canvas.getContext('webgl') ||\n      this.canvas.getContext('experimental-webgl')\n\n    this.gl ? this.init() : console.log(\"WebGL isn't supported\")\n  }\n\n  componentWillUnmount() {\n    this.unlisten()\n    window.cancelAnimationFrame(this.raf)\n    try {\n      document.body.removeChild(this.canvas)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  init() {\n    // Listen events\n    this.listen()\n\n    // Define default size\n    this.canvas.width = 512\n    this.canvas.height = 512\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height)\n\n    this.gl.enable(this.gl.DEPTH_TEST) // Enable depth feature\n\n    // Call instance method to create shaders\n    this.shaders = this.createShaders()\n    if (!this.shaders) return\n\n    // Call instance method to create and link program\n    this.program = this.createProgram()\n    if (!this.program) return\n\n    // Tell webGL the current program\n    this.gl.useProgram(this.program)\n\n    // Create box\n    this.box = new BoxGeometry()\n    console.log(this.box)\n    this.createBox()\n\n    // Create uniforms\n    this.createUniforms()\n\n    // Create some values for animation\n    this.angle = {\n      x: 0,\n      z: 0\n    }\n    this.identityMatrix = mat4.create()\n    this.xRotation = mat4.create()\n    this.zRotation = mat4.create()\n\n    // Render\n    this.render()\n  }\n\n  listen() {\n    this.mouse = null\n    this.canvas.addEventListener('mousedown', this.onMouseDown)\n    this.canvas.addEventListener('touchstart', this.onMouseDown)\n    this.canvas.addEventListener('mousemove', this.onMouseMove)\n    this.canvas.addEventListener('touchmove', this.onMouseMove)\n    window.addEventListener('touchend', this.onMouseUp)\n    window.addEventListener('touchleave', this.onMouseUp)\n    window.addEventListener('touchcancel', this.onMouseUp)\n    window.addEventListener('mouseup', this.onMouseUp)\n  }\n\n  unlisten() {\n    this.canvas.removeEventListener('mousedown', this.onMouseDown)\n    this.canvas.removeEventListener('touchstart', this.onMouseDown)\n    this.canvas.removeEventListener('mousemove', this.onMouseMove)\n    this.canvas.removeEventListener('touchmove', this.onMouseMove)\n    window.removeEventListener('touchend', this.onMouseUp)\n    window.removeEventListener('touchleave', this.onMouseUp)\n    window.removeEventListener('touchcancel', this.onMouseUp)\n    window.removeEventListener('mouseup', this.onMouseUp)\n  }\n\n  createShaders() {\n    // Create shaders\n    const vertexShader = this.gl.createShader(this.gl.VERTEX_SHADER)\n    const fragmentShader = this.gl.createShader(this.gl.FRAGMENT_SHADER)\n\n    // Link shaders sources to gl shaders\n    this.gl.shaderSource(vertexShader, vertexSource)\n    this.gl.shaderSource(fragmentShader, fragmentSource)\n\n    // Compile shaders and check if there's error during copilation\n    this.gl.compileShader(vertexShader)\n    if (!this.gl.getShaderParameter(vertexShader, this.gl.COMPILE_STATUS)) {\n      console.error(\n        'ERROR DURING VERTEX SHADER COMPILATION',\n        this.gl.getShaderInfoLog(vertexShader)\n      )\n      return null\n    }\n    this.gl.compileShader(fragmentShader)\n    if (!this.gl.getShaderParameter(fragmentShader, this.gl.COMPILE_STATUS)) {\n      console.error(\n        'ERROR DURING FRAGMENT SHADER COMPILATION',\n        this.gl.getShaderInfoLog(fragmentShader)\n      )\n      return null\n    }\n\n    return {\n      vertexShader,\n      fragmentShader\n    }\n  }\n\n  createProgram() {\n    const { vertexShader, fragmentShader } = this.shaders\n\n    // Create program & attach shaders to pragram\n    const program = this.gl.createProgram()\n    this.gl.attachShader(program, vertexShader)\n    this.gl.attachShader(program, fragmentShader)\n\n    // Link program to gl context\n    this.gl.linkProgram(program)\n    if (!this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {\n      console.error(\n        'ERROR DURING PROGRAM LINK',\n        this.gl.getProgramInfoLog(program)\n      )\n      return null\n    }\n\n    // Validate program\n    this.gl.validateProgram(program)\n    if (!this.gl.getProgramParameter(program, this.gl.VALIDATE_STATUS)) {\n      console.error(\n        'ERROR DURING PROGRAM VALIDATION',\n        this.gl.getProgramInfoLog(program)\n      )\n      return null\n    }\n\n    return program\n  }\n\n  createBox() {\n    const { vertices, indices, normals } = this.box\n\n    // Create indices buffer, bind it and add datas\n    const indicesBuffer = this.gl.createBuffer()\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, indicesBuffer)\n    this.gl.bufferData(\n      this.gl.ELEMENT_ARRAY_BUFFER,\n      new Uint16Array(indices),\n      this.gl.STATIC_DRAW\n    )\n\n    // Create vertex buffer, bind it and add datas\n    const vertexBuffer = this.gl.createBuffer()\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertexBuffer)\n    this.gl.bufferData(\n      this.gl.ARRAY_BUFFER,\n      new Float32Array(vertices),\n      this.gl.STATIC_DRAW\n    )\n\n    // Get vertices position attribute location in the array of attributes\n    const positionLocation = this.gl.getAttribLocation(this.program, 'position')\n\n    this.gl.vertexAttribPointer(\n      positionLocation, // Attribute position\n      3, // Two elements needed because attribute waiting a vec2\n      this.gl.FLOAT, // Type of elements\n      this.gl.FALSE, // Normalization\n      3 * Float32Array.BYTES_PER_ELEMENT, // Size of an individual vertex\n      0 // Offset from the beginning of a single vertex to this attribute\n    )\n\n    this.gl.enableVertexAttribArray(positionLocation)\n\n    // Create normals buffer, bind it and add datas\n    const normalsBuffer = this.gl.createBuffer()\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, normalsBuffer)\n    this.gl.bufferData(\n      this.gl.ARRAY_BUFFER,\n      new Float32Array(normals),\n      this.gl.STATIC_DRAW\n    )\n\n    // Get normals coordinates position attribute location in the array of attributes\n    const normalLocation = this.gl.getAttribLocation(this.program, 'normal')\n\n    this.gl.vertexAttribPointer(\n      normalLocation, // Attribute position\n      3, // Two elements needed because attribute waiting a vec2\n      this.gl.FLOAT, // Type of elements\n      this.gl.FALSE, // Normalization\n      3 * Float32Array.BYTES_PER_ELEMENT, // Size of an individual vertex\n      0 // Offset from the beginning of a single vertex to this attribute\n    )\n\n    this.gl.enableVertexAttribArray(normalLocation)\n  }\n\n  createUniforms() {\n    // Get uniforms index in the array of uniforms\n    this.worldUniformLocation = this.gl.getUniformLocation(\n      this.program,\n      'u_world'\n    )\n    this.viewUniformLocation = this.gl.getUniformLocation(\n      this.program,\n      'u_view'\n    )\n    this.projectionUniformLocation = this.gl.getUniformLocation(\n      this.program,\n      'u_projection'\n    )\n\n    // Create new Matrix\n    this.worldMatrix = mat4.create()\n    this.viewMatrix = mat4.create()\n    this.projectionMatrix = mat4.create()\n\n    // Camera lookAt and options\n    mat4.lookAt(\n      this.viewMatrix,\n      [0, 0, -6], // Camera position\n      [0, 0, 0], // Point where looking at\n      [0, 1, 0] // Pointing up\n    )\n    mat4.perspective(\n      this.projectionMatrix,\n      Math.PI / 4, // Vertical field of view in radians: 45deg\n      this.canvas.width / this.canvas.height, // Aspect ratio\n      0.1, // Near\n      1000 // Far\n    )\n\n    // Send uniforms to shaders\n    this.gl.uniformMatrix4fv(\n      this.worldUniformLocation,\n      this.gl.FALSE,\n      this.worldMatrix\n    )\n    this.gl.uniformMatrix4fv(\n      this.viewUniformLocation,\n      this.gl.FALSE,\n      this.viewMatrix\n    )\n    this.gl.uniformMatrix4fv(\n      this.projectionUniformLocation,\n      this.gl.FALSE,\n      this.projectionMatrix\n    )\n  }\n\n  onMouseDown = e => {\n    e = e.touches ? e.touches[0] : e\n    this.mouse = vec2.fromValues(e.clientX, e.clientY)\n    this.previousAngle = { ...this.angle }\n  }\n\n  onMouseMove = e => {\n    if (!this.mouse) return\n    e = e.touches ? e.touches[0] : e\n\n    this.angle.x =\n      this.previousAngle.x +\n      ((e.clientX - this.mouse[0]) / this.canvas.width) * 1.5\n    this.angle.z =\n      this.previousAngle.z -\n      ((e.clientY - this.mouse[1]) / this.canvas.height) * 1.5\n\n    mat4.rotate(this.xRotation, this.identityMatrix, this.angle.x, [0, 1, 0])\n    mat4.rotate(this.zRotation, this.identityMatrix, this.angle.z, [1, 0, 0])\n    mat4.multiply(this.worldMatrix, this.zRotation, this.xRotation)\n    this.gl.uniformMatrix4fv(\n      this.worldUniformLocation,\n      this.gl.FALSE,\n      this.worldMatrix\n    )\n  }\n\n  onMouseUp = () => {\n    this.mouse = null\n  }\n\n  render = () => {\n    this.raf = window.requestAnimationFrame(this.render)\n\n    if (!this.mouse) {\n      this.angle.x += 0.01\n      this.angle.z += 0.005\n      mat4.rotate(this.xRotation, this.identityMatrix, this.angle.x, [0, 1, 0])\n      mat4.rotate(this.zRotation, this.identityMatrix, this.angle.z, [1, 0, 0])\n      mat4.multiply(this.worldMatrix, this.zRotation, this.xRotation)\n      this.gl.uniformMatrix4fv(\n        this.worldUniformLocation,\n        this.gl.FALSE,\n        this.worldMatrix\n      )\n    }\n\n    // This is clearring the background color and reset the COLOR BUFFER BIT\n    this.gl.clearColor(0.2, 0.2, 0.2, 1)\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT)\n\n    this.gl.drawElements(\n      this.gl.TRIANGLES, // Type to draw\n      this.box.indices.length,\n      this.gl.UNSIGNED_SHORT,\n      0\n    )\n  }\n}\n\nnew App()\n"]}